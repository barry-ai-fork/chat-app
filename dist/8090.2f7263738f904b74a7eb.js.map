{"version":3,"file":"8090.2f7263738f904b74a7eb.js","mappings":"uBAAIA,ECAAC,E,ihMCEG,MAwHMC,GA3EyB,oBAAXC,QAA0BA,OAAOC,YA2EzBC,KAAKC,MAAM,MACjCC,EAA6B,IAAIC,IAAI,CAChD,cAAc,aAAc,sBAAuB,iBAAkB,0BAA2B,kBAoCrFC,EAAgC,IAAID,IAAI,CACnD,YAAa,YAAa,eAGfE,EAAgC,IAAIF,IAAI,CACnD,cAGWG,EAAgC,IAAIH,IAAI,CACnD,YACA,YACA,YACA,aACA,aACA,YACA,YACA,YACA,gBAqBWI,GAlB6B,IAAIJ,IAAI,IAC7CC,KACAC,IAayC,IAAIF,IAAI,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAGhH,UAwBhCK,EAAkE,CAC7EC,mBAAoB,CAAC,IAAM,KAC3BC,cAAe,CAAC,EAAG,IACnBC,UAAW,CAAC,IAAK,KACjBC,mBAAoB,CAAC,IAAK,KAC1BC,cAAe,CAAC,GAAI,IACpBC,mBAAoB,CAAC,EAAG,IACxBC,cAAe,CAAC,KAAM,MACtBC,SAAU,CAAC,IAAK,KAChBC,eAAgB,CAAC,GAAI,IACrBC,YAAa,CAAC,GAAI,MCpHpB,IA4BIC,EACAC,E,eCvIG,SAASC,EAA2CC,EAAiBC,GAC1E,OAAOD,EAAWE,QAAO,CAACC,EAA2BC,KACnDD,EAAMC,EAAOH,IAAQG,EAEdD,IACN,IAaE,SAASE,EAA2BC,EAAWC,GACpD,OAAOA,EAAKL,QAAO,CAACM,EAAQP,KAC1BO,EAAOP,GAAOK,EAAOL,GACdO,IACN,I,eCtBE,SAASC,EAAeC,GAA0E,IAA3DC,EAA2D,wDAAjCC,EAAiC,uDAAd,aACzF,MAAMC,EAASF,EAAmB,GAAM,QAAOC,YAE/C,MAAQ,GAAEC,IAASC,KAAKC,OAAOC,gBAAgBN,MAG1C,SAASO,EACdC,GAEA,MAAM,MACJC,EADI,eAEJC,EAFI,eAGJC,EAHI,UAIJC,EAJI,UAKJC,EALI,SAMJC,KACGC,GACDP,EAEJ,OAAOO,ECvBF,SAASC,EAAehB,EAAeiB,EAAeC,GAC3D,MAJe,gPAKZC,QAAQ,WAKb,SAAmBnB,GACjB,IAAIoB,EAAO,IAEX,MAAMC,EAAMrB,EAAMsB,OAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CAC5B,MAAMC,EAAMxB,EAAMuB,GACdC,GAAO,IACTJ,GAhBS,mEAgBMI,EAAM,IAAM,KAEvBA,GAAO,IACTJ,GAAQ,IACCI,GAAO,KAChBJ,GAAQ,KAEVA,GAAQf,OAAa,GAANmB,IAMnB,OAFAJ,GAAQ,IAEDA,EAzBgBK,CAAUzB,IAC9BmB,QAAQ,YAAad,OAAOY,IAC5BE,QAAQ,aAAcd,OAAOa,ICDlC,MAAMQ,EAAqB,CAAEC,EAAG,IAAKC,EAAG,KAEjC,SAASC,EACdC,EAAgC5B,GAEhC,IAAK4B,IAAUA,EAAMR,OACnB,OAGF,MAAMS,EAAQD,EAAME,MAAMC,GAA0CA,aAAaC,EAAAA,IAAAA,oBACjF,IAAKH,EACH,OAGF,MAAMI,EAAYL,EAAMM,QAAQH,GAA6BA,aAAaC,EAAAA,IAAAA,aACpE,EAAEP,EAAF,EAAKC,GAAMO,EAAUb,OAASa,EAAUA,EAAUb,OAAS,GAAKI,GAChE,MAAE1B,GAAU+B,EAOlB,MAAO,CACLM,QAPctC,EACbG,GAAyB,eAAbA,EAAwDF,GAA5BsC,EAAAA,EAAAA,oBAAmBtC,QAC5DuC,EACArC,GAKAe,MAAOU,EACPT,OAAQU,GA6BL,SAASY,EAAcC,GAC5B,MAAMX,EAAQW,EAAMX,MACjBM,QAAQH,GACAA,aAAaC,EAAAA,IAAAA,WAAoBD,aAAaC,EAAAA,IAAAA,uBAEtDQ,IAAIC,GAEP,MAAO,CACLC,GAAIvC,OAAOoC,EAAMG,IACjBC,UAAWhB,EAA8BY,EAAMX,OAC/CA,MAAAA,KACIW,EAAMK,YAAc,CAAEA,WAAYL,EAAMK,WAAWJ,IAAIK,GAAoBC,SAAS,IAIrF,SAASD,EAAkBE,GAChC,MAAM,aACJC,EADI,KACUC,EADV,EACgBvB,EADhB,EACmBD,EADnB,KACsByB,GACxBH,EAEJ,MAAO,CACLC,aAAAA,EACAC,KAAAA,EACAjC,OAAQU,EACRX,MAAOU,EACPyB,KAAMA,GAIH,SAAST,EAAkBU,GAChC,MAAM,EAAE1B,EAAF,EAAKC,EAAL,KAAQwB,GAASC,EAEvB,MAAO,CACLpC,MAAOU,EACPT,OAAQU,EACRwB,KAAMA,GCpFV,MAAME,EAAmB,CACvBC,cAAe,GACfC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,YAAa,GACbC,OAAQ,GACRC,aAAc,IAGVC,EAAmBT,EAEzB,IAEO,SAASU,IACdC,OAAOC,OAAOH,EAAST,GCtBzB,MAAMa,EAA2B,0BAC3BC,EAA0B,aAEzB,SAASC,EAAyBC,EAA+BC,GACtE,GAAID,aAAoBpC,EAAAA,IAAAA,cACtB,OAGF,MAAM,SAAEhC,EAAF,YAAYsE,GAAgBF,EAC5BG,EAAmBH,EAASI,WAC/B1C,MAAM2C,GACLA,aAAgBzC,EAAAA,IAAAA,2BAGd0C,GAAiB1E,IAAaiE,GAA4BjE,IAAakE,IACxEE,EAASI,WACT1C,MAAM2C,GACLA,aAAgBzC,EAAAA,IAAAA,4BAGtB,IAAKuC,IAAqBG,EACxB,OAGF,MAAMC,EAAW3E,IAAaiE,EACxBnB,EAAU9C,IAAakE,EAEvBU,EAAqBR,EAASI,WACjC1C,MAAM2C,GACLA,aAAgBzC,EAAAA,IAAAA,6BAGd6C,EAAqBT,EAASI,WACjC1C,MAAM2C,GACLA,aAAgBzC,EAAAA,IAAAA,yBAGd8C,EAAgBF,GAAsBC,EAEtCE,EAAiBR,GAAoBA,EAAiBS,sBAAsBhD,EAAAA,IAAAA,kBAC9EuC,EAAiBS,gBACjB3C,EACE4C,EAAQV,MAAAA,OAAH,EAAGA,EAAkBW,IAE1BC,EAAcf,EAASgB,QAAUhB,EAASgB,OAAOtD,MACpDC,GAAmCA,aAAaC,EAAAA,IAAAA,kBAInD,KAAIhC,IAAakE,GAA6BmB,KAAaC,iBAAoBH,GACzDf,EAASgB,QAAUhB,EAASgB,OAAOtD,MACpDC,GAA6BA,aAAaC,EAAAA,IAAAA,aAI3C,OAIJ,MAAMuD,EAAYnB,EAASgB,QAAUhB,EAASgB,OAAOtD,MAClDC,GAAiCA,aAAaC,EAAAA,IAAAA,gBAG3CW,EAAYwC,EFjCb,SAAqChC,GAC1C,MAAM,EAAE1B,EAAF,EAAKC,EAAL,MAAQ5B,GAAUqD,EAGxB,MAAO,CACLhB,QAHctC,EAAeC,OAAOuC,EAAW,cAI/CtB,MAAOU,EACPT,OAAQU,GE2BR8D,CAA4BL,GAC1BI,GAAaT,EFxBZ,SACL3B,EACA2B,GAEA,MAAM,EAAErD,EAAF,EAAKC,GAAMoD,EAGjB,MAAO,CACL3C,QAHe,2BAA0BrB,EAAeqC,EAAUrD,MAAO2B,EAAGC,KAI5EX,MAAOU,EACPT,OAAQU,GEeR+D,CAA0BF,EAAWT,QACnCzC,GAEIZ,EAAGV,EAAOW,EAAGV,GAAWmE,GAAyCL,GAAiB,GAEpFY,GAAarB,IAAeC,MAAAA,OAAhB,EAAgBA,EAAaqB,MAAK,QAAC,KAAEzC,GAAH,QAAuB,MAATA,MAElE,MAAO,CACLR,GAAIvC,OAAOiE,EAAS1B,IACpBkD,aAAcb,EAAiB5E,OAAO4E,EAAerC,IP8DxB,iBO7D7BmD,qBAAsBd,GAAkB5E,OAAO4E,EAAee,YAC9Db,MAAAA,EACAN,SAAAA,EACA7B,QAAAA,EACA/B,MAAAA,EACAC,OAAAA,EACA2B,UAAAA,EACA+C,UAAAA,GAIG,SAASK,EAAgBC,GAC9B,MAAM,SACJC,EADI,SAEJC,EAFI,cAGJC,EAHI,OAIJC,EAJI,GAKJ1D,EALI,WAMJoD,EANI,MAOJO,EAPI,OAQJjB,EARI,MASJkB,EATI,UAUJC,GACEP,EAEJ,MAAO,CACLC,SAAAA,EACAtB,SAAUuB,EACVM,SAAUJ,EACVD,cAAAA,EACAzD,GAAIvC,OAAOuC,GACXoD,WAAY3F,OAAO2F,GACnBO,MAAAA,EACAI,aAAcC,QAAQtB,MAAAA,OAAD,EAACA,EAAQhE,QAC9BkF,MAAAA,EACAC,UAAAA,GAIG,SAASI,EAAuBC,GACrC,MAAMC,EAAad,EAAgBa,EAAkBZ,KAE/Cc,EAAoBF,aAA6B5E,EAAAA,IAAAA,uBACnD4E,EAAkBG,OAClB,CAACH,EAAkBI,OAavB,OAXAH,EAAWE,OAAS,GACpBD,EAAiBG,SAASD,IACxB,GAAIA,aAAiBhF,EAAAA,IAAAA,SAAiB,CACpC,MAAMkF,EAAe/C,EAAyB6C,GAC1CE,IACFL,EAAWE,OAAQI,KAAKD,GACxBrD,EAAAA,UAAkB1D,OAAO6G,EAAMtE,KAAOsE,OAKrCH,EC3GF,SAASO,EAAiBC,EAAgBC,GAC/C,IAAIC,EAAO,EACX,MAAMC,EAAU,IAAIC,MAAMH,GACpBI,EAAeL,EAAKjG,OAASkG,EAC7BK,EAAaN,EAAK,GAClBO,EAAcP,EAAKA,EAAKjG,OAAS,GACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIiG,EAAUjG,IAAK,WACjC,MAAMwG,EAAM/J,KAAKgK,MAAMzG,EAAIqG,GACrBK,IAAO,UAACV,EAAKQ,EAAM,UAAZ,QAAkBF,IAAlB,UAAiCN,EAAKQ,UAAtC,QAA8CF,IAA9C,UAA6DN,EAAKQ,EAAM,UAAxE,QAA8ED,IAAgB,EAC3GJ,EAAQnG,GAAK0G,EACTR,EAAOQ,IACTR,EAAOQ,GAGX,MAAO,CAAEV,KAAMG,EAASD,KAAAA,G,4CCgOnB,IAAKS,EC9QAC,ECCL,SAASC,EAAWC,GACzB,OAAOA,EAAKC,eAAe,UAGtB,SAASC,EAAWF,GACzB,OAAOA,EAAKC,eAAe,UAOtB,SAASE,EAAe5F,EAAuBQ,GACpD,MAAgB,SAATA,EAAkB/C,OAAOuC,GAAO,IAAGA,IAGrC,SAAS6F,EAAwBJ,GACtC,OAAID,EAAWC,GACNG,EAAeH,EAAKK,OAAQ,QAC1BH,EAAWF,GACbG,EAAeH,EAAKM,OAAQ,QAE5BH,EAAgBH,EAAiCO,UAAW,Y,SFuP3DV,GAAAA,EAAAA,KAAAA,oBAAAA,EAAAA,WAAAA,0BAAAA,EAAAA,WAAAA,0BAAAA,EAAAA,QAAAA,uBAAAA,EAAAA,KAAAA,oBAAAA,EAAAA,MAAAA,qBAAAA,EAAAA,QAAAA,uBAAAA,EAAAA,OAAAA,sBAAAA,EAAAA,YAAAA,2BAAAA,EAAAA,QAAAA,uBAAAA,EAAAA,MAAAA,qBAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,OAAAA,sBAAAA,EAAAA,QAAAA,uBAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,UAAAA,yBAAAA,EAAAA,QAAAA,uBAAAA,EAAAA,QAAAA,uB,CAAAA,IAAAA,EAAAA,K,SC9QAC,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,IAAAA,EAAAA,K,sBECL,SAASU,EAAwBC,GACtC,GAAMA,aAAsB5G,EAAAA,IAAAA,SAAkB4G,aAAsB5G,EAAAA,IAAAA,eAIpE,OAAOuG,EAAwBK,EAAWC,QAGrC,SAASC,EAAoBC,GAClC,MAAMC,EAAiB,GAAEL,EAAwBI,MAAYA,EAAQrG,KACrEmB,EAAAA,SAAiBmF,GAAiBD,EAE9BA,aAAmB/G,EAAAA,IAAAA,UACjB+G,EAAQE,iBAAiBjH,EAAAA,IAAAA,sBACxB+G,EAAQE,MAAM7E,oBAAoBpC,EAAAA,IAAAA,WAErC6B,EAAAA,UAAkB1D,OAAO4I,EAAQE,MAAM7E,SAAS1B,KAAOqG,EAAQE,MAAM7E,UAGnE2E,EAAQE,iBAAiBjH,EAAAA,IAAAA,qBACxB+G,EAAQE,MAAMC,mBAAmBlH,EAAAA,IAAAA,SACjC+G,EAAQE,MAAMC,QAAQ9E,oBAAoBpC,EAAAA,IAAAA,WAE7C6B,EAAAA,UAAkB1D,OAAO4I,EAAQE,MAAMC,QAAQ9E,SAAS1B,KAAOqG,EAAQE,MAAMC,QAAQ9E,UAGnF2E,EAAQE,iBAAiBjH,EAAAA,IAAAA,mBACvB+G,EAAQE,MAAME,KAAK/E,oBAAoBpC,EAAAA,IAAAA,WACzC6B,EAAAA,UAAkB1D,OAAO4I,EAAQE,MAAME,KAAK/E,SAAS1B,KAAOqG,EAAQE,MAAME,KAAK/E,UAEjFgF,EAAkBL,EAAQE,MAAME,KAAK5G,QAGnCwG,EAAQE,iBAAiBjH,EAAAA,IAAAA,qBACxB+G,EAAQE,MAAM1G,QACjBsB,EAAAA,aAAqB1D,OAAO4I,EAAQE,MAAM1G,MAAM8G,MAAQN,EAAQE,MAAM1G,QAItEwG,aAAmB/G,EAAAA,IAAAA,gBAAyB,UAAW+G,EAAQO,QACjEF,EAAkBL,EAAQO,OAAO/G,OAI9B,SAAS6G,EAAkB7G,GAC5BA,aAAiBP,EAAAA,IAAAA,QACnB6B,EAAAA,OAAe1D,OAAOoC,EAAMG,KAAOH,GAWhC,SAASgH,EAAiBC,GAA4C,IAAzBC,EAAyB,wDAC3E,MAAM/G,EAAK4F,EAAekB,EAAK9G,GAAI,SAC/B+G,GAAoB5F,EAAAA,MAAcnB,KACpCmB,EAAAA,MAAcnB,GAAM8G,GAIjB,SAASE,EAA+BC,GAC7CA,EAAS1C,SAAS2C,IACZA,aAAkB5H,EAAAA,IAAAA,MAAe4H,EAAOrH,MAC1CgH,EAAiBK,IACPA,aAAkB5H,EAAAA,IAAAA,MAAe4H,aAAkB5H,EAAAA,IAAAA,UAAmB4H,EAAOrH,OAlB7F,SAA0BsH,GAAyD,IAArBC,EAAqB,wDACjF,MAAMpH,EAAK4F,EAAeuB,EAAKnH,GAAImH,aAAgB7H,EAAAA,IAAAA,KAAc,OAAS,WACrE8H,GAAgBjG,EAAAA,MAAcnB,KACjCmB,EAAAA,MAAcnB,GAAMmH,GAgBlBE,CAAiBH,MAKhB,SAASI,EAAeC,GAC7B,OAAO9J,OAAOC,gBAAgB6J,GAGzB,SAASC,EAAiBD,GAC/B,OAAOE,EAAOC,KAAKH,EAAO,UCnDrB,SAASI,GAAkBC,GAChC,MAA4B,iBAAjBA,EAcN,SAAqCA,GAC1C,OAAIA,EAAe,EACV,OACEA,IAAiB,IACnB,UAEA,OAnBAC,CAA4BD,GAGhCA,EAAaE,WAAW,KAElBF,EAAalJ,QATI,GAUnB,UAEA,OAJA,OAqCJ,SAASqJ,GAAeH,EAAsBxE,GACnD,MAAM5C,EAAOmH,GAAkBC,GAE/B,MAAa,SAATpH,EACK,IAAIlB,EAAAA,IAAAA,cAAqB,CAC9BwG,OAAQkC,GAAeJ,EAAc,QACrCxE,WAAY6E,GAAAA,CAAO7E,KAEH,YAAT5C,EACF,IAAIlB,EAAAA,IAAAA,iBAAwB,CACjC0G,UAAWgC,GAAeJ,EAAc,WACxCxE,WAAY6E,GAAAA,CAAO7E,KAGd,IAAI9D,EAAAA,IAAAA,cAAqB,CAC9ByG,OAAQiC,GAAeJ,EAAc,UAKpC,SAASM,GAA0BN,GACxC,MAAMpH,EAAOmH,GAAkBC,GAC/B,IAAIxE,EAEiB,MAArB,GAAa,SAAT5C,GAEF,GADA4C,EAAU,UAAGjC,EAAAA,MAAcyG,UAAjB,aAAG,EAA6BxE,YACrCA,EACH,YAEG,GAAa,YAAT5C,EAAoB,OAE7B,GADA4C,EAAU,QAAI,EAAAjC,EAAAA,MAAcyG,UAAlB,aAAG,EAAiDxE,YACzDA,EACH,OAIJ,OAAO2E,GAAeH,EAAcnK,OAAO2F,IAGtC,SAAS+E,GAAiBP,EAAsBxE,GACrD,MAAM5C,EAAOmH,GAAkBC,GAE/B,MAAa,SAATpH,EACK,IAAIlB,EAAAA,IAAAA,UAAiB,CAC1BwG,OAAQkC,GAAeJ,EAAc,QACrCxE,WAAY6E,GAAAA,CAAO7E,KAEH,YAAT5C,EACF,IAAIlB,EAAAA,IAAAA,aAAoB,CAC7B0G,UAAWgC,GAAeJ,EAAc,WACxCxE,WAAY6E,GAAAA,CAAO7E,KAGd4E,GAAeJ,EAAc,QAIjC,SAASQ,GAAqBpI,EAAYoD,GAC/C,OAAO,IAAI9D,EAAAA,IAAAA,kBAAyB,CAClCU,GAAIiI,GAAAA,CAAOjI,GACXoD,WAAY6E,GAAAA,CAAO7E,KAUhB,SAASiF,GAAmB9B,GACjC,MAAM7E,EAAWP,EAAAA,UAAkBoF,EAAMvG,IAEzC,GAAK0B,EAIL,OAAO,IAAIpC,EAAAA,IAAAA,cAAqBvC,EAAK2E,EAAU,CAC7C,KACA,aACA,mBA8CG,SAAS4G,GAA2BC,GAAoC,YAArBC,EAAqB,wDAC7E,OAAO,IAAIlJ,EAAAA,IAAAA,eAAsB,CAC/BiJ,KAAM,IAAIjJ,EAAAA,IAAAA,KAAY,CACpBU,GAAIiI,GAAAA,CAAOM,EAAKvI,IAChByI,aAAcF,EAAKG,QAAQC,SAC3BC,SAAUL,EAAKG,QAAQE,SACvBC,QAASN,EAAKG,QAAQG,QAAQ/I,KAAI,IAAsB,IAArB,KAAEgJ,EAAF,OAAQC,GAAa,EACtD,OAAO,IAAIzJ,EAAAA,IAAAA,WAAkB,CAAEwJ,KAAAA,EAAMC,OAAQvB,EAAiBuB,QAEhEC,KAAMT,EAAKG,QAAQM,KACnBC,eAAgBV,EAAKG,QAAQO,eAC7BC,UAAWX,EAAKG,QAAQQ,UACxBC,YAAaZ,EAAKG,QAAQS,YAC1BC,SAAQZ,GAAqBD,EAAKG,QAAQU,SAE5CC,eAAc,UAAEd,EAAKe,QAAQA,eAAf,aAAE,EAAsB9J,QAAQ+J,GAAMA,EAAEC,YAAW1J,KAAKyJ,GAAM/B,EAAiB+B,EAAER,UAC/FU,SAAUlB,EAAKe,QAAQG,SACvBC,iBAAgB,UAAEnB,EAAKe,QAAQI,wBAAf,aAAE,EAA+B5J,IAAI6J,MAkDlD,SAASC,KACd,OAAOC,EAAAA,EAAAA,uBAAqBC,EAAAA,EAAAA,qBAAoB,IAAI,GAAM,GAGrD,SAASC,KACd,OAAOF,EAAAA,EAAAA,uBAAqBC,EAAAA,EAAAA,qBAAoB,IAAI,GAAM,GAAME,aAiB3D,SAASL,GAAsBzC,GACpC,MAAM,KACJ1G,EADI,OACEyJ,EADF,OACUvL,EADV,IACkBiI,EADlB,OACuBb,EADvB,SAC+BoE,GACjChD,EAEEJ,EAAOhB,EAAS3E,EAAAA,MAAc2E,QAAUnG,EAE9C,OAAQa,GACN,KAAK8E,EAAsB6E,KACzB,OAAO,IAAI7K,EAAAA,IAAAA,kBAAyB,CAAE2K,OAAAA,EAAQvL,OAAAA,IAChD,KAAK4G,EAAsB8E,OACzB,OAAO,IAAI9K,EAAAA,IAAAA,oBAA2B,CAAE2K,OAAAA,EAAQvL,OAAAA,IAClD,KAAK4G,EAAsB+E,UACzB,OAAO,IAAI/K,EAAAA,IAAAA,uBAA8B,CAAE2K,OAAAA,EAAQvL,OAAAA,IACrD,KAAK4G,EAAsBgF,OACzB,OAAO,IAAIhL,EAAAA,IAAAA,oBAA2B,CAAE2K,OAAAA,EAAQvL,OAAAA,IAClD,KAAK4G,EAAsBiF,KACzB,OAAO,IAAIjL,EAAAA,IAAAA,kBAAyB,CAAE2K,OAAAA,EAAQvL,OAAAA,IAChD,KAAK4G,EAAsBkF,IACzB,OAAO,IAAIlL,EAAAA,IAAAA,iBAAwB,CAAE2K,OAAAA,EAAQvL,OAAAA,EAAQwL,SAAUA,GAAY,KAC7E,KAAK5E,EAAsBmF,WACzB,OAAO,IAAInL,EAAAA,IAAAA,wBAA+B,CAAE2K,OAAAA,EAAQvL,OAAAA,IACtD,KAAK4G,EAAsBoF,QACzB,OAAO,IAAIpL,EAAAA,IAAAA,qBAA4B,CAAE2K,OAAAA,EAAQvL,OAAAA,EAAQiI,IAAKA,IAChE,KAAKrB,EAAsBqF,IACzB,OAAO,IAAIrL,EAAAA,IAAAA,iBAAwB,CAAE2K,OAAAA,EAAQvL,OAAAA,IAC/C,KAAK4G,EAAsBsF,QACzB,OAAO,IAAItL,EAAAA,IAAAA,qBAA4B,CAAE2K,OAAAA,EAAQvL,OAAAA,IACnD,KAAK4G,EAAsBuF,YACzB,OAAO,IAAIvL,EAAAA,IAAAA,8BAAqC,CAC9C2K,OAAAA,EACAvL,OAAAA,EACAoH,OAAQ,IAAIxG,EAAAA,IAAAA,UAAiB,CAAEwG,OAAQmC,GAAAA,CAAOnC,GAAU1C,WAAY0D,EAAM1D,eAE9E,KAAKkC,EAAsBwF,QACzB,OAAO,IAAIxL,EAAAA,IAAAA,qBAA4B,CAAE2K,OAAAA,EAAQvL,OAAAA,IACnD,QACE,OAAO,IAAIY,EAAAA,IAAAA,qBAA4B,CAAE2K,OAAAA,EAAQvL,OAAAA,KAIhD,SAASqM,GAAmB1E,GACjC,MAAM,MAAEE,GAAUF,EAClB,QAAKE,IAKHA,aAAiBjH,EAAAA,IAAAA,mBACdiH,aAAiBjH,EAAAA,IAAAA,sBAElBiH,aAAiBjH,EAAAA,IAAAA,qBACdiH,EAAMC,mBAAmBlH,EAAAA,IAAAA,UAE1BiH,EAAMC,QAAQ3G,iBAAiBP,EAAAA,IAAAA,OAC7BiH,EAAMC,QAAQ9E,oBAAoBpC,EAAAA,IAAAA,UAC/BiH,EAAMC,QAAQ9E,SAASpE,SAASwK,WAAW,WAIlDvB,aAAiBjH,EAAAA,IAAAA,mBACbiH,EAAME,KAAK/E,oBAAoBpC,EAAAA,IAAAA,UAAmBiH,EAAME,KAAK5G,iBAAiBP,EAAAA,IAAAA,QAElFiH,aAAiBjH,EAAAA,IAAAA,qBAA8BiH,EAAM1G,OAoCpD,SAASmL,GAAT,GAQJ,IAR+B,MAChCC,EADgC,UAEhCC,EAFgC,SAGhCC,GAKC,EACD,OAAO,IAAI7L,EAAAA,IAAAA,kBAAyB,CAClC8L,SAAUnD,GAAAA,CAAO,GACjBgD,MAAAA,EACAC,UAAAA,EACAC,SAAAA,IAIG,SAASE,GACdC,GAEA,IADAC,EACA,uDADY,EAEZ,OAAO,IAAIjM,EAAAA,IAAAA,iBAAwB,IAC9BgM,EACHC,UAAAA,IAIG,SAASC,GACdC,GAEA,OAAO,IAAInM,EAAAA,IAAAA,gBAAuBmM,GAG7B,SAASC,GAAkBC,GAChC,MAAM,gBAAEC,GAAoBD,EAC5B,OAAO,IAAIrM,EAAAA,IAAAA,qBAA4B,IAClCqM,EACHC,gBAAiBA,EACb,IAAItM,EAAAA,IAAAA,YAAmBsM,QACvBjM,IAID,SAASkM,GAAqBC,GACnC,OAAQA,GACN,IAAK,cACH,OAAO,IAAIxM,EAAAA,IAAAA,2BAEb,IAAK,WACH,OAAO,IAAIA,EAAAA,IAAAA,+BAEb,IAAK,eACH,OAAO,IAAIA,EAAAA,IAAAA,4BAEb,IAAK,WACH,OAAO,IAAIA,EAAAA,IAAAA,wBAEb,IAAK,aACH,OAAO,IAAIA,EAAAA,IAAAA,0BAEb,IAAK,YACH,OAAO,IAAIA,EAAAA,IAAAA,yBAEb,IAAK,WACH,OAAO,IAAIA,EAAAA,IAAAA,yBAMV,SAASyM,GAAuBC,GACrC,OAAQA,GACN,IAAK,OACH,OAAO,IAAI1M,EAAAA,IAAAA,sBACb,IAAK,WACH,OAAO,IAAIA,EAAAA,IAAAA,0BACb,IAAK,aACH,OAAO,IAAIA,EAAAA,IAAAA,4BACb,IAAK,cACH,OAAO,IAAIA,EAAAA,IAAAA,6BACb,IAAK,YACH,OAAO,IAAIA,EAAAA,IAAAA,2BACb,IAAK,OACH,OAAO,IAAIA,EAAAA,IAAAA,sBACb,IAAK,gBACH,OAAO,IAAIA,EAAAA,IAAAA,+BACb,IAAK,eACH,OAAO,IAAIA,EAAAA,IAAAA,8BACb,IAAK,kBACH,OAAO,IAAIA,EAAAA,IAAAA,iCACb,IAAK,QACH,OAAO,IAAIA,EAAAA,IAAAA,wBAsBV,SAAS2M,GAAsBC,GACpC,OAAO,IAAI5M,EAAAA,IAAAA,SAAgB,CACzBqF,KAAMwH,KAAKC,UAAUF,KAIlB,SAASlE,GAAehI,EAAYQ,GAEzC,MAAkB,iBAAPR,EACFiI,GAAAA,CAAO7M,KAAKiR,IAAIrM,IAGT,SAATQ,EAAkByH,GAAAA,CAAOjI,GAAMiI,GAAAA,CAAOjI,EAAGsM,MAAM,IAGjD,SAASC,GAAoBC,GAClC,OAAO,IAAIlN,EAAAA,IAAAA,eAAsB,CAC/BU,GAAIiI,GAAAA,CAAOuE,EAAUxM,IACrBoD,WAAY6E,GAAAA,CAAOuE,EAAUpJ,cAI1B,SAASqJ,GAAT,GAA+D,IAAlC,GAAEzM,EAAF,WAAMoD,GAA4B,EACpE,OAAO,IAAI9D,EAAAA,IAAAA,eAAsB,CAC/BU,GAAIiI,GAAAA,CAAOjI,GACXoD,WAAY6E,GAAAA,CAAO7E,KAIhB,SAASsJ,GAAkBC,GAChC,MAAI,SAAUA,EACL,IAAIrN,EAAAA,IAAAA,iBAAwB,CACjCsN,KAAMD,EAAQC,OAGT,IAAItN,EAAAA,IAAAA,oBAA2B,CACpCmG,KAAMsC,GAAe4E,EAAQxF,KAAKnH,GAAI2M,EAAQxF,KAAK/D,YACnDyJ,MAAOF,EAAQG,YChhBd,SAASC,GAA6BC,GAC3C,MAAM,KACJrK,EADI,IACEsK,EADF,MACOC,EADP,KACcC,EADd,UACoBC,EADpB,cAC+BC,EAD/B,WAC8CC,EAD9C,KAC0DC,EAD1D,MACgEC,EADhE,WACuEC,EADvE,OACmFC,EADnF,OAC2FC,EAD3F,cAEJC,EAFI,YAEWC,EAFX,KAEwBpI,EAFxB,MAE8BqI,EAF9B,aAEqCC,EAFrC,gBAEmDC,GACrDhB,EAEJ,MAAO,CACLiB,OAAQtL,EACRuL,MAAOjB,EACPI,cAAAA,EACAc,OAAQZ,EACRa,QAASZ,EACTa,YAAaZ,EACba,cAAehB,EACfiB,gBAAiBX,EACjBY,YAAapB,EACbqB,cAAeZ,EACfX,MAAAA,EACAQ,OAAAA,EACAM,gBAAiBA,MAAAA,OAAF,EAAEA,EAAiBU,WAClCf,OAAAA,EACAR,KAAM,IAAIwB,KAAKxB,GACfyB,OAAQpJ,EAAWC,GACnBzF,GAAI6F,EAAwBJ,GAC5BqI,MAAOA,EAAQe,GAAkCf,QAASnO,EAC1DoO,aAAcA,EAAec,GAAkCd,QAAgBpO,GAInF,SAASkP,GACPC,GAEA,MAAM,YACJC,EADI,SACSC,EADT,OACmBC,EADnB,aAC2BC,GAC7BJ,EACJ,MAAO,CACLC,YAAAA,EACAC,SAAAA,EACAG,SAAUF,EACVC,aAAcA,EAAapP,IAAIsP,KAInC,SAASA,GACPC,GAEA,MAAO,CACLC,UAAWD,EAA4BC,UACvCC,QAASF,EAA4BE,SAIlC,SAASC,GAAkBhD,GAChC,MAAM,GACJxM,EADI,WACAoD,GACFoJ,EAEJ,GAAIA,aAAqBlN,EAAAA,IAAAA,mBACvB,MAAO,CACLmQ,gBAAiB,YACjBzP,GAAIA,EAAG0O,WACPtL,WAAYA,EAAWsL,WACvBgB,kBAAmB,EACnBC,QAAS,EACTC,aAAc,IAIlB,MAAM,QACJD,EADI,kBACKD,EADL,WACwBG,EADxB,aACoCC,EADpC,mBACkDC,EADlD,UACsEC,EADtE,cACiFC,EADjF,wBAEJC,GACE1D,EAEJ,MAAO,CACLiD,gBAAiB,eACjBU,UAAU,EACVnQ,GAAIA,EAAG0O,WACPtL,WAAYA,EAAWsL,WACvBiB,QAAAA,EACAD,kBAAAA,EACAG,WAAAA,EACAC,aAAAA,EACAC,mBAAAA,EACAC,UAAAA,EACAC,cAAAA,EACAC,wBAAAA,EACAN,aAAc,IAQX,SAASQ,GAAeC,GAC7B,MAAM,GAAErQ,GAAOqQ,EAEf,IAAIC,EAA0B,CAC5BtQ,GAAIA,EAAG0O,YAGT,GAAI2B,aAAgB/Q,EAAAA,IAAAA,mBACf+Q,aAAgB/Q,EAAAA,IAAAA,kBAChB+Q,aAAgB/Q,EAAAA,IAAAA,WAChB+Q,aAAgB/Q,EAAAA,IAAAA,mBAA2B,CAC9C,MAAM,WACJ8D,EADI,QACQmN,EADR,KACiBpD,EADjB,MACuBW,EADvB,cAC8B0C,EAD9B,SAC6CC,GAC/CJ,EAEJC,EAAY,IACPA,EACHlN,WAAYA,EAAWsL,WACvB6B,QAASA,EAAQ7B,WACjB8B,cAAeA,EAAc9B,WAC7BvB,KAAAA,EACA/M,QAAS0N,EACT2C,SAAUC,GAAqBD,IAInC,GAAIJ,aAAgB/Q,EAAAA,IAAAA,UAAkB,CACpC,MAAM,WACJqR,EADI,MACQC,EADR,eACeC,EADf,YAC+BC,EAD/B,UAC4CC,GAC9CV,EAEJC,EAAY,IACPA,EACHU,MAAO,SACPJ,MAAO7L,MAAM2C,KAAKkJ,GAClBC,eAAgBA,EAAenC,WAC/BqC,UAAAA,EACAJ,WAAAA,EACAG,YAAaA,EAAYhR,IAAImR,IAAwBzR,OAAOwE,UAuChE,OAnCIqM,aAAgB/Q,EAAAA,IAAAA,qBAClBgR,EAAY,IACPA,EACHU,MAAO,YACPE,SAAUb,EAAKa,SACflF,OAAQmF,GAA0Bd,EAAKrE,QACvCoF,WAAYf,EAAKe,WACjBC,UAAWhB,EAAKgB,YAIhBhB,aAAgB/Q,EAAAA,IAAAA,mBAClBgR,EAAY,IACPA,EACHU,MAAO,UACPM,YAAajB,EAAKiB,cAIlBjB,aAAgB/Q,EAAAA,IAAAA,oBAClBgR,EAAY,IACPA,EACHU,MAAO,WACPO,GAAIxM,MAAM2C,KAAK2I,EAAKkB,MAIpBlB,aAAgB/Q,EAAAA,IAAAA,qBAClBgR,EAAY,IACPA,EACHU,MAAO,YACPQ,OAAQzM,MAAM2C,KAAK2I,EAAKmB,UAIrBlB,EAGF,SAASa,GAA0BM,GACxC,OAAIA,aAAyBnS,EAAAA,IAAAA,6BACpB,SACEmS,aAAyBnS,EAAAA,IAAAA,2BAC3B,OACEmS,aAAyBnS,EAAAA,IAAAA,6BAC3B,SAEA,aAIX,SAAS2R,GAAuBS,GAC9B,GAAIA,aAAsBpS,EAAAA,IAAAA,sBAA8B,CACtD,MAAM,SACJqS,EADI,SACMC,EADN,KACgBC,EADhB,KACsBC,EADtB,GAC4BC,EAD5B,KACgCC,EADhC,KACsCC,GACxCP,EAEJ,MAAO,CACLC,SAAAA,EACAC,SAAAA,EACAM,OAAQL,EACRM,OAAQL,EACRC,GAAAA,EACAC,KAAAA,EACAC,KAAAA,IAOC,SAASvB,GAAqBD,GACnC,MAAM,gBACJ2B,EADI,SACaC,EADb,SACuBC,EADvB,OACiCC,EADjC,aACyCC,GAC3C/B,EAEJ,MAAO,CACL2B,gBAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAG,SAAUF,EACVG,eAAgBF,GAIb,SAASG,KACd,OAAO,IAAIrT,EAAAA,IAAAA,kBAAyB,CAClC8S,gBAAiB,CAAC,SAClBC,SAAU,GACVC,SAAU,GACVE,cAAc,EACdD,QAAQ,ICtLZ,MAAMK,GAAgC,OAGtC,IAAIC,GAAsB,EAC1B,MAAMC,GAAwB,IAAMC,WAAY,GAAEpE,KAAKqE,SAASH,QAEhE,IAAII,GAMG,SAASC,GAAyBhN,GACvC,MAAM,OACJiN,EADI,QACI9M,EADJ,SACaY,EADb,WACuBmM,EADvB,YACmCC,EADnC,WACgDC,EADhD,eAC4DC,EAD5D,SAC4EC,EAD5E,YACsFC,GACxFvN,EACEH,EAASoN,EAAStN,EAAwBsN,QAAUxT,EACpD+T,EAAkBJ,EACnBA,aAAsBhU,EAAAA,IAAAA,WACrBgU,EAAW3P,MACT2P,EAAWnM,gBAAgB7H,EAAAA,IAAAA,eAA4CK,EAAxB2T,EAAWnM,KAAKxD,WACnEhE,EAEJ,MAAO,CACL6T,SAAUlM,EAAekM,GACzBG,QAAOR,GAAS3N,EAAW2N,GAC3BrK,KAAM8K,GAAwBvN,EAASY,GACvC4M,UAAWzY,KAAKC,MAAMsT,KAAKqE,MAAQ,KfRG,IeStCc,cAAe9P,QAAQyP,MACnB1N,GAAU,CAAEA,OAAAA,MACZwN,GAAkB,CAAEA,eAAAA,MACpBD,GAAc,CAAEI,gBAAAA,MAChBN,GAAc,CAAEA,WAAAA,MAChBC,GAAe,CAAEU,cAAeV,IAIjC,SAASW,GAAgB9N,GAC9B,MAAMH,EAASE,EAAwBC,GACvC,GACGH,IACIG,aAAsB5G,EAAAA,IAAAA,SAAkB4G,aAAsB5G,EAAAA,IAAAA,gBAIrE,OA8CK,SAAmCyG,EAAgBG,GACxD,MAAMiN,EAASjN,EAAWiN,OAAStN,EAAwBK,EAAWiN,aAAUxT,EAC1EwG,EAASD,EAAWC,OAASN,EAAwBK,EAAWC,aAAUxG,EAC1EsU,GAAkBd,GAAUpN,IAAWkN,GACvCiB,EAAchO,EAAWiO,MAAQjO,EAAWkO,MAAUH,IAAmB/N,EAAWmO,QACpFC,EA4GD,SACLpO,GACA,MACA,IAAIoO,EAAiC,GAEjCpO,EAAWK,QACb+N,EAAU,IACLC,GAAyBrO,EAAWK,SAI3C,MAAMiO,EAAsBtO,EAAWK,iBAAiBjH,EAAAA,IAAAA,wBAUxD,OARI4G,EAAWG,SAAYmO,GACnBF,EAAQG,SAAYH,EAAQ/L,MAAS+L,EAAQI,SAAW,UAAEJ,EAAQxG,aAAV,OAAE,EAAe6G,UAC/EL,EAAU,IACLA,EACHxL,KAAM8K,GAAwB1N,EAAWG,QAASH,EAAWe,YAI1DqN,EAjISM,CAAoB1O,GAC9BU,EAASV,EAAWU,QAmoB5B,SACEA,EACAiO,EACAC,EACAC,EACAb,GAEA,GAAItN,aAAkBtH,EAAAA,IAAAA,mBACpB,OAGF,IAAIgR,EACAD,EACA2E,EACAC,EACAnM,EACJ,MAAMoM,EAAoB,GAC1B,IACIrV,EACAsV,EAFA3U,EAA0B,QAI9B,MAAM4U,EAAgB,UAAWxO,EAC7BA,EAAO/F,OAAS+F,EAAO/F,MAAMf,KAAKE,GAAO4F,EAAe5F,EAAI,UAC3D,WAAY4G,GAAU,CAAChB,EAAegB,EAAOd,OAAQ,UAAa,GACvE,IAAIuP,EAEJ,GAAIzO,aAAkBtH,EAAAA,IAAAA,wBACpBwJ,EAAO,oCACPoM,EAAkBzQ,KAAK,kBAAmBmC,EAAOjD,OACjDnD,EAAO,kBACF,GAAIoG,aAAkBtH,EAAAA,IAAAA,2BACvByV,GACFjM,EAAO,8BACPoM,EAAkBzQ,KAAKmC,EAAOjD,SAE9BmF,EAAO,gCACPoM,EAAkBzQ,KAAK,kBAAmBmC,EAAOjD,aAE9C,GAAIiD,aAAkBtH,EAAAA,IAAAA,2BACvByV,EACFjM,EAAO,+BAEPA,EAAO,iCACPoM,EAAkBzQ,KAAK,yBAEpB,GAAImC,aAAkBtH,EAAAA,IAAAA,6BAEzBwJ,EADEiM,EACK,8BAEA,iCAEJ,GAAInO,aAAkBtH,EAAAA,IAAAA,0BACtBuV,GAAYO,EAAcE,SAAST,IACtC/L,EAAO,0BACPoM,EAAkBzQ,KAAK,mBAEvBqE,EAAO,uBACPoM,EAAkBzQ,KAAK,kBAAmB,uBAEvC,GAAImC,aAAkBtH,EAAAA,IAAAA,6BACtBuV,GAAYO,EAAcE,SAAST,IACtC/L,EAAO,wBACPoM,EAAkBzQ,KAAK,mBAEvBqE,EAAO,sBACPoM,EAAkBzQ,KAAK,kBAAmB,uBAEvC,GAAImC,aAAkBtH,EAAAA,IAAAA,8BAC3BwJ,EAAO,iCACPoM,EAAkBzQ,KAAK,wBAClB,GAAImC,aAAkBtH,EAAAA,IAAAA,2BAC3BwJ,EAAO,mCACF,GAAIlC,aAAkBtH,EAAAA,IAAAA,2BAC3B+V,EAAexP,EAAwBe,GACvCkC,EAAO,4BACPoM,EAAkBzQ,KAAK,sBAClB,GAAImC,aAAkBtH,EAAAA,IAAAA,gCAC3B+V,EAAexP,EAAwBe,GACvCkC,EAAO,8BACPoM,EAAkBzQ,KAAK,sBAClB,GAAImC,aAAkBtH,EAAAA,IAAAA,wBAC3BwJ,EAAO,2CACPoM,EAAkBzQ,KAAK,kBAAmB,kBACrC,GAAImC,aAAkBtH,EAAAA,IAAAA,0BAC3BwJ,EAAO,iBACPtI,EAAO,oBACF,GAAIoG,aAAkBtH,EAAAA,IAAAA,uBAA+B,CAC1D,MAAMiW,EAAevR,QAAQ4C,EAAOsK,UAOpC,GANApI,EAAO,CACLyM,EAAe,mBAAqB,OACpC3O,EAAOkH,MAAQ,YAAc,OAC7BoG,EAAcqB,EAAe,WAAa,WAAeA,EAAe,WAAa,YACrFC,KAAK,KAEHD,EAAc,CAChB,MAAME,EAAOra,KAAKsa,IAAIta,KAAKC,MAAMuL,EAAOsK,SAAY,IAAK,GACzDgE,EAAkBzQ,KAAM,GAAEgR,QAAWA,EAAO,EAAI,IAAM,MAGxDnF,EAAY,CACV4D,WAAAA,EACA9T,QAASwG,EAAOkH,MAChBoD,SAAUtK,EAAOsK,SACjBlF,OAAQmF,GAA0BvK,EAAOoF,cAEtC,GAAIpF,aAAkBtH,EAAAA,IAAAA,+BAC3BwJ,EAAO,mCACPuH,EAAO,CACLrQ,GAAI4G,EAAOyJ,KAAKrQ,GAAG0O,WACnBtL,WAAYwD,EAAOyJ,KAAKjN,WAAWsL,YAErCwG,EAAkBzQ,KAAK,kBAAmB,sBACrC,GAAImC,aAAkBtH,EAAAA,IAAAA,2BAC3BwJ,EAAO,sBACPoM,EAAkBzQ,KAAK,mBACvBjE,EAAO,qBACF,GAAIoG,aAAkBtH,EAAAA,IAAAA,yBAC3B0V,EAASW,OAAO/O,EAAOgP,aACvBX,EAAWrO,EAAOqO,SAClBnM,EAAO,0BACHgM,GACFM,EAAc3Q,KAAKqQ,GAErBI,EAAkBzQ,KAAK,mBAAoB,gBAAiB,kBACvD,GAAImC,aAAkBtH,EAAAA,IAAAA,uBAC3B,GAAIsH,EAAOsK,SAAU,CACnB,MAAMuE,EAAOra,KAAKsa,IAAIta,KAAKC,MAAMuL,EAAOsK,SAAW,IAAK,GACxDpI,EAAO,8BACPoM,EAAkBzQ,KAAM,GAAEgR,QAAWA,EAAO,EAAI,IAAM,WAEtD3M,EAAO,uCACPuH,EAAO,CACLrQ,GAAI4G,EAAOyJ,KAAKrQ,GAAG0O,WACnBtL,WAAYwD,EAAOyJ,KAAKjN,WAAWsL,iBAG9B9H,aAAkBtH,EAAAA,IAAAA,yBAC3BwJ,EAAO,oCACPoM,EAAkBzQ,KAAKmC,EAAOiP,SACrBjP,aAAkBtH,EAAAA,IAAAA,0BAC3BwJ,EAAOlC,EAAOP,QACLO,aAAkBtH,EAAAA,IAAAA,kCAC3BwJ,EAAO,uCACPoM,EAAkBzQ,KAAK,oBACdmC,aAAkBtH,EAAAA,IAAAA,wBAC3BwJ,EAAO+L,IAAa5B,GAAgB,wBAA0B,yBAC9DiC,EAAkBzQ,KAAK,WACvB0Q,EAAQvO,EAAOuO,OACNvO,aAAkBtH,EAAAA,IAAAA,8BAC3BwJ,EAAO,8BACPoM,EAAkBzQ,KAAKmC,EAAOkC,OAE9BA,EAAO,8BAQT,MALI,UAAWlC,GAAUA,EAAO/G,iBAAiBP,EAAAA,IAAAA,QAC/CoH,EAAkBE,EAAO/G,OACzBA,EAAQD,EAAcgH,EAAO/G,QAGxB,CACLiJ,KAAAA,EACAtI,KAAAA,EACA4U,cAAAA,EACAC,aAAAA,EACAxV,MAAAA,EACAmV,OAAAA,EACAC,SAAAA,EACAC,kBAAAA,EACA7E,KAAAA,EACAC,UAAAA,EACA6E,MAAAA,GA7yBGW,CAAY5P,EAAWU,OAAQuM,EAAQhN,EAAQnC,QAAQkC,EAAWkO,MAAOF,GAC1EtN,IACF0N,EAAQ1N,OAASA,GAGnB,MAAM,aAAEmP,EAAF,aAAgBC,EAAhB,cAA8BC,GAAkB/P,EAAWgQ,SAAW,GACtEC,EAAWjQ,EAAWkQ,WAAalQ,EAAWmQ,UAC9C,cACJC,EADI,gBACWC,EADX,oBAC4BC,EAD5B,oBACiDC,GAyyBzD,SAA2BpQ,GACzB,MAAM,YAAEqQ,EAAF,MAAenQ,GAAUF,EAG/B,IAAKqQ,EACH,OAAInQ,aAAiBjH,EAAAA,IAAAA,qBAA8BiH,EAAMC,mBAAmBlH,EAAAA,IAAAA,SAC/C,qBAAvBiH,EAAMC,QAAQhG,KACT,CACL8V,cAAe,CAAC,CAAC,CACf9V,KAAM,MACNsI,KAAM,eACNnC,IAAKJ,EAAMC,QAAQG,aAM3B,EAIF,KAAM+P,aAAuBpX,EAAAA,IAAAA,qBAA8BoX,aAAuBpX,EAAAA,IAAAA,mBAChF,OAGF,MAAMqX,EAASD,EAAYE,KAAK9W,KAAI,IAAiB,IAAhB,QAAE+W,GAAc,EACnD,OAAOA,EAAQ/W,KAAKgX,IAClB,MAAM,KAAEhO,GAASgO,EAEjB,OAAIA,aAAkBxX,EAAAA,IAAAA,eACb,CACLkB,KAAM,UACNsI,KAAAA,GAIAgO,aAAkBxX,EAAAA,IAAAA,kBAChBwX,EAAOnQ,IAAI2O,SAAS,gBACf,CACL9U,KAAM,cACNsI,KAAAA,GAIG,CACLtI,KAAM,MACNsI,KAAAA,EACAnC,IAAKmQ,EAAOnQ,KAIZmQ,aAAkBxX,EAAAA,IAAAA,uBAChBwX,EAAOC,iBACF,CACLvW,KAAM,cACNsI,KAAAA,GAIG,CACLtI,KAAM,WACNsI,KAAAA,EACAnE,KAAM2C,EAAewP,EAAOnS,OAI5BmS,aAAkBxX,EAAAA,IAAAA,0BACb,CACLkB,KAAM,cACNsI,KAAAA,EACAkO,OAAQF,EAAO9N,MAIf8N,aAAkBxX,EAAAA,IAAAA,2BACb,CACLkB,KAAM,eACNsI,KAAAA,GAIAgO,aAAkBxX,EAAAA,IAAAA,kBAChBiH,aAAiBjH,EAAAA,IAAAA,qBAA8BiH,EAAM0Q,aAChD,CACLzW,KAAM,UACNsI,KAAM,iBACNoO,iBAAkB3Q,EAAM0Q,cAGrB,CACLzW,KAAM,MACNsI,KAAAA,GAIAgO,aAAkBxX,EAAAA,IAAAA,mBACb,CACLkB,KAAM,OACNsI,KAAAA,GAIAgO,aAAkBxX,EAAAA,IAAAA,2BACb,CACLkB,KAAM,kBACNsI,KAAAA,EACAqO,MAAOL,EAAOK,MACdC,WAAYN,EAAOO,UAInBP,aAAkBxX,EAAAA,IAAAA,0BACb,CACLkB,KAAM,cACNsI,KAAAA,EACAhD,OAAQgR,EAAOhR,OAAO4I,YAItBoI,aAAkBxX,EAAAA,IAAAA,4BACb,CACLkB,KAAM,gBACNsI,KAAAA,EACAnC,IAAKmQ,EAAOnQ,KAIZmQ,aAAkBxX,EAAAA,IAAAA,sBACb,CACLkB,KAAM,UACNsI,KAAAA,EACAnC,IAAKmQ,EAAOnQ,KAIZmQ,aAAkBxX,EAAAA,IAAAA,sBACb,CACLkB,KAAM,UACNsI,KAAAA,EACAnC,IAAKmQ,EAAOnQ,IACZ2Q,SAAUR,EAAOQ,UAId,CACL9W,KAAM,cACNsI,KAAAA,SAKN,MAAO,CACL,CAAC4N,aAAuBpX,EAAAA,IAAAA,oBAA6B,kBAAoB,iBAAkBqX,KACvFD,aAAuBpX,EAAAA,IAAAA,qBAA8B,CACvDkX,oBAAqBE,EAAYa,YACjCd,oBAAqBC,EAAYc,YAn8BjCC,CAAkBvR,IAAe,GAC/BwR,EAAcxR,EAAWmO,SA8LjC,SAAoCA,GAAiF,IAA/CJ,EAA+C,wDACnH,MAAM0D,EAAkBtD,EAAQuD,eAAiB/R,EAAwBwO,EAAQuD,eAC3EzE,EAASkB,EAAQlB,QAAUtN,EAAwBwO,EAAQlB,QAEjE,MAAO,CACLhG,KAAMkH,EAAQlH,KACd4H,cAAe/Q,QAAQqQ,EAAQhB,aAC/BU,cAAeM,EAAQhB,YACvBwE,oBAAqB7T,QAAQqQ,EAAQhB,aAAesE,IAAoB1D,GACxE6D,WAAYH,GAAmBxE,EAC/B4E,cAAe1D,EAAQ2D,gBAAkB3D,EAAQhB,YACjD4E,aAAc9E,EACd+E,eAAgB7D,EAAQ8D,SACxBC,WAAY/D,EAAQgE,YA3MoBC,CAA2BpS,EAAWmO,QAASJ,IACnF,QAAEsE,EAASC,YAAaC,EAAxB,WAAuCJ,GAAenS,EACtDwS,EAAYxS,EAAWwS,WAAajb,OAAOyI,EAAWwS,WACtDC,EAAY3U,QAAQ0U,MAAgBpE,EAAQ5S,UAAY4S,EAAQsE,OAAStE,EAAQG,SACjFoE,EAA4B3S,EAAWwQ,uBAAuBpX,EAAAA,IAAAA,kBAEpE,MAAO,CACLU,GAAIkG,EAAWlG,GACf+F,OAAAA,EACAmO,WAAAA,EACAI,QAAAA,EACAnH,KAAMjH,EAAWiH,KACjB0H,SAAU1B,GAAWjN,EAAWiO,KAAOjO,EAAWkO,MAAQnB,IAAkBlN,EAC5E+S,MAAO5S,EAAW4S,MAClBC,SAAU7S,EAAW6S,SACrBC,gBAAiB9S,EAAW+S,cAC5BC,UAAWhT,EAAWgT,WAAaC,GAAsBjT,EAAWgT,cAChEnD,GAAgB,CAAEqD,iBAAkBrD,MACpCE,GAAiB,CAAEoD,cAAexT,EAAwBoQ,OAC1DD,GAAgB,CAAEsD,oBAAqBtD,MACvC0B,GAAe,CAAEA,YAAAA,MACjBvB,GAAY,CAAEA,SAAAA,MACdjQ,EAAWkQ,UAAY,CAAEA,SAAUlQ,EAAWkQ,aAC9CqC,GAAiB,CAAEA,cAAAA,MACnBvS,EAAWqT,WAAad,GAAiB,CAAEe,kBAAkB,MAC7DtT,EAAWqT,WAAa,CAAEE,aAAa,MACvCf,GAAa,CACfA,UAAAA,EACAC,UAAAA,GAEFrC,cAAAA,KACIC,GAAmB,CAAEA,gBAAAA,EAAiBC,oBAAAA,EAAqBC,oBAAAA,MAC3DoC,GAA6B,CAAEA,0BAAAA,MAC/B3S,EAAWwT,UAAY,CAAEA,SAAU9T,EAAeM,EAAWwT,SAAU,aACvEnB,MAAAA,OAAA,EAAAA,EAASoB,WAAY,CAAEC,WAAYC,GAAgBtB,EAASrS,EAAWlG,GAAI+F,OAC3EsS,GAAc,CAAED,WAAYC,MAC5BnS,EAAW4T,YAAc,CAAEC,aAAa,IAnGvCC,CAA0BjU,EAAQG,GAuGpC,SAASiT,GAAsBD,GACpC,MAAM,gBACJe,EADI,QACa3Q,EADb,WACsB4Q,GACxBhB,EAEJ,MAAO,CACLgB,WAAAA,EACA5Q,QAASA,EAAQxJ,IAAIqa,IACrBF,gBAAiBA,MAAAA,OAAF,EAAEA,EAAiBna,IAAIsa,KAI1C,SAASD,GAAmBE,GAC1B,MAAM,OAAEC,EAAF,MAAU1W,EAAV,SAAiB2W,GAAaF,EAEpC,MAAO,CACLG,SAAUF,EACV1W,MAAAA,EACA2W,SAAAA,GAIG,SAASH,GAAyBK,GACvC,MAAM,OACJtU,EADI,SACIoU,EADJ,IACcG,EADd,OACmBC,GACrBF,EAEJ,MAAO,CACL3U,OAAQD,EAAwBM,GAChCoU,SAAAA,EACAK,SAAUD,EACVE,MAAOH,GAIJ,SAASI,GAA0BC,GACxC,MAAM,gBACJC,EADI,WACaC,EADb,SACyBV,EADzB,MACmC5W,EADnC,SAEJuX,EAFI,gBAEMC,EAFN,WAEuBC,EAFvB,gBAEmCC,EAFnC,kBAEoDC,EAFpD,QAGJC,GACER,EAEJ,MAAO,CACLC,gBAAiBQ,GAAiBR,GAClCM,kBAAmBE,GAAiBF,GACpCD,gBAAiBG,GAAiBH,GAClCJ,WAAYO,GAAiBP,GAC7BE,gBAAiBA,EAAkBK,GAAiBL,QAAmBxb,EACvEyb,WAAYA,EAAaI,GAAiBJ,QAAczb,EACxD4a,SAAAA,EACA5W,MAAAA,EACA8X,WAAYP,EACZQ,UAAWH,GA4BR,SAAS3H,GACdvN,EACAY,GAEA,MAAO,CACL6B,KAAMzC,KACFY,GAAY,CAAEA,SAAUA,EAASnH,IAAI6b,MAoBtC,SAASpH,GAAyBhO,GACvC,GAAI,eAAgBA,GAASA,EAAMqV,WACjC,OAGF,MAAMnH,EAwDR,SAAsBlO,GACpB,GACIA,aAAiBjH,EAAAA,IAAAA,sBACfiH,EAAM7E,UACL6E,EAAM7E,oBAAoBpC,EAAAA,IAAAA,SAKjC,OAAOmC,EAAyB8E,EAAM7E,SAAU6E,EAAMsV,WAjEtCC,CAAavV,GAC7B,GAAIkO,EAAS,MAAO,CAAEA,QAAAA,GAEtB,MAAM5U,EAiER,SAAoB0G,GAClB,GAAMA,aAAiBjH,EAAAA,IAAAA,mBAA8BiH,EAAM1G,OAAW0G,EAAM1G,iBAAiBP,EAAAA,IAAAA,MAI7F,OAAOM,EAAc2G,EAAM1G,OAtEbkc,CAAWxV,GACzB,GAAI1G,EAAO,MAAO,CAAEA,MAAAA,GAEpB,MAAMiO,EA0HR,SAAoBvH,GAClB,GACIA,aAAiBjH,EAAAA,IAAAA,sBACdiH,EAAM7E,oBAAoBpC,EAAAA,IAAAA,UAC3BiH,EAAM7E,SAASpE,SAASwK,WAAW,SAKzC,OAAOkU,GAAuBzV,EAAM7E,UAnItBua,CAAW1V,GACzB,GAAIuH,EAAO,MAAO,CAAEA,MAAAA,GAEpB,MAAM8K,EAmIR,SAAoBrS,GAClB,KACIA,aAAiBjH,EAAAA,IAAAA,sBACfiH,EAAM7E,UACL6E,EAAM7E,oBAAoBpC,EAAAA,IAAAA,UAE/B,OAGF,MAAM4c,EAAiB3V,EAAM7E,SAASI,WACnC1C,MAAM2C,GACLA,aAAgBzC,EAAAA,IAAAA,yBAGpB,IAAK4c,GAAkBA,EAAeC,MACpC,OAGF,MAAMC,EAAiB7V,EAAM7E,SAASgB,QAAU6D,EAAM7E,SAASgB,OAC5DlD,QAAQL,GAAqCA,aAAiBG,EAAAA,IAAAA,YAC9DQ,KAAKX,GAAUY,EAAkBZ,KAEpC,MAAO,CACLa,GAAIvC,OAAO8I,EAAM7E,SAAS1B,IAC1Bqc,SAAUC,GAAwB/V,EAAM7E,SAAU,SAClD0a,eAAAA,EACA7b,KAAMgG,EAAM7E,SAASnB,KAAKyJ,gBACvBjN,EAAKwJ,EAAM7E,SAAU,CAAC,gBACtB3E,EAAKmf,EAAgB,CAAC,WAAY,YAAa,WA/JtCK,CAAWhW,GACzB,GAAIqS,EAAO,MAAO,CAAEA,MAAAA,GAEpB,MAAMuD,EAgKR,SAAoB5V,GAClB,KACIA,aAAiBjH,EAAAA,IAAAA,sBACfiH,EAAM7E,UACL6E,EAAM7E,oBAAoBpC,EAAAA,IAAAA,UAE/B,OAGF,MAAM4c,EAAiB3V,EAAM7E,SAASI,WACnC1C,MAAM2C,GACLA,aAAgBzC,EAAAA,IAAAA,yBAGpB,IAAK4c,IAAmBA,EAAeC,MACrC,OAGF,MAAM,SAAEjL,EAAF,SAAYsL,GAAaN,EAE/B,MAAO,CACLlc,GAAIvC,OAAO8I,EAAM7E,SAAS1B,IAC1BkR,SAAAA,EACAsL,SAAUA,EAAWzX,MAAM2C,KAAK8U,QAAY7c,GAvLhC8c,CAAWlW,GACzB,GAAI4V,EAAO,MAAO,CAAEA,MAAAA,GAEpB,MAAMza,EAwLR,SAAgC6E,GAC9B,GAAMA,aAAiBjH,EAAAA,IAAAA,sBAAiCiH,EAAM7E,SAI9D,OAAO8Z,GAAiBjV,EAAM7E,UA7Lbgb,CAAuBnW,GACxC,GAAI7E,EAAU,MAAO,CAAEA,SAAAA,GAEvB,MAAMgT,EAyPR,SAAsBnO,GACpB,KAAMA,aAAiBjH,EAAAA,IAAAA,qBACrB,OAGF,MAAM,UACJ4L,EADI,SACOC,EADP,YACiBwR,EADjB,OAC8B7W,GAChCS,EAEJ,MAAO,CACL2E,UAAAA,EAAWC,SAAAA,EAAUwR,YAAAA,EAAa7W,OAAQF,EAAeE,EAAQ,SAnQnD8W,CAAarW,GAC7B,GAAImO,EAAS,MAAO,CAAEA,QAAAA,GAEtB,MAAMnM,EAoQR,SAA4BhC,GAC1B,GAAMA,aAAiBjH,EAAAA,IAAAA,iBAIvB,OAmGK,SAAmBiJ,EAAmBsU,GAC3C,MAAM,GAAE7c,EAAI6I,QAASiU,GAAevU,EAC9BM,EAAUiU,EAAWhd,KAAKid,IAAD,CAC7BjU,KAAMiU,EAAOjU,KACbC,OAAQzB,EAAeyV,EAAOhU,YAGhC,MAAO,CACL/I,GAAIvC,OAAOuC,GACX0I,QAAS,CACPC,SAAUJ,EAAKE,gBACZ1L,EAAKwL,EAAM,CACZ,SACA,iBACA,OACA,WACA,cACA,cAEFM,QAAAA,GAEFS,QAAS0T,GAAiBH,IAxHrBI,CAAU1W,EAAMgC,KAAMhC,EAAM+C,SAzQtB4T,CAAmB3W,GAChC,GAAIgC,EAAM,MAAO,CAAEA,KAAAA,GAEnB,MAAM4U,EAAUC,GAAa7W,GAC7B,GAAI4W,EAAS,MAAO,CAAEA,QAAAA,GAEtB,MAAMxQ,EAsQR,SAA+BpG,GAC7B,GAAMA,aAAiBjH,EAAAA,IAAAA,oBAIvB,OAoHK,SAAsBiH,GAC3B,MACE8W,YAAavU,EADT,MACenF,EADf,MACsB9D,EADtB,KAC6Byd,EAD7B,YACmC1H,EADnC,SACgDX,EADhD,aAC0DgC,GAC5D1Q,EAEJ,MAAO,CACLuC,KAAAA,EACAnF,MAAAA,EACA9D,MAAO0d,GAAoB1d,GAC3BoX,aAAAA,EACAjC,OAAQW,OAAOC,GACfX,SAAAA,EACAuI,OAAQF,GAhIHG,CAAalX,GA3QJmX,CAAsBnX,GACtC,GAAIoG,EAAS,MAAO,CAAEA,QAAAA,GAEtB,MAAMgR,EA2QR,SAAgCpX,GAC9B,OAAIA,aAAiBjH,EAAAA,IAAAA,gBAevB,SAAkBiH,GAChB,MAAMqX,EAAQC,GAActX,EAAMuX,KAClC,OAAOF,GAAS,CAAEpd,KAAM,MAAOsd,IAAKF,GAhB3BG,CAASxX,GAGdA,aAAiBjH,EAAAA,IAAAA,kBAgBvB,SAAoBiH,GAClB,MAAM,IACJuX,EADI,MACCna,EADD,SACQqa,EADR,QACkBC,EADlB,QAC2BC,EAD3B,UACoCC,GACtC5X,EACEqX,EAAQC,GAAcC,GAC5B,OAAOF,GAAS,CACdpd,KAAM,QACNsd,IAAKF,EACLja,MAAAA,EACAqa,SAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAC,UAAAA,GA3BOC,CAAW7X,GAGhBA,aAAiBjH,EAAAA,IAAAA,oBA4BvB,SAAsBiH,GACpB,MAAM,IAAEuX,EAAF,OAAOO,EAAP,QAAeC,GAAY/X,EAC3BqX,EAAQC,GAAcC,GAC5B,OAAOF,GAAS,CACdpd,KAAM,UACNsd,IAAKF,EACLS,OAAAA,EACAC,QAAAA,GAlCOC,CAAahY,QADtB,EApRiBiY,CAAuBjY,GACxC,GAAIoX,EAAU,MAAO,CAAEA,SAAAA,GAEvB,MAAMlX,EAqUR,SAA4BF,GAC1B,GAAMA,aAAiBjH,EAAAA,IAAAA,iBAIvB,OAGF,SAAmBiH,GACjB,MAAM,GACJvG,EADI,WACAoD,EADA,UACYS,EADZ,MACuBF,EADvB,YAC8B0Z,EAAaxd,MAAO4e,EAAU/c,SAAUgd,GACxEnY,EAAME,KAEJ5G,EAAQ4e,aAAoBnf,EAAAA,IAAAA,MAAeM,EAAc6e,QAAY9e,EACrE+B,EAAWgd,aAAuBpf,EAAAA,IAAAA,SAAkBkc,GAAiBkD,QAAe/e,EAE1F,MAAO,CACLK,GAAIA,EAAG0O,WACPtL,WAAYA,EAAWsL,WACvB7K,UAAAA,EACAF,MAAAA,EACA0Z,YAAAA,EACAxd,MAAAA,EACA6B,SAAAA,GAlBKid,CAAUpY,GA1UJqY,CAAmBrY,GAChC,OAAIE,EAAa,CAAEA,KAAAA,QAAnB,EA0CK,SAASuV,GAAuBta,GACrC,GAAIA,aAAoBpC,EAAAA,IAAAA,cACtB,OAGF,MAAM,GACJU,EADI,SACA1C,EADA,OACUoF,EADV,KACkBnC,EADlB,WACwBuB,GAC1BJ,EAGJ,GflP6B,eekPzBpE,IAAkCqF,KAAaC,gBACjD,OAIF,GfxP4B,oBewPxBtF,IAAiCqF,KAAakc,eAChD,OAGF,MAAMC,EAAYhd,EACf1C,MAAM2f,GAA+CA,aAAazf,EAAAA,IAAAA,yBAErE,IAAKwf,EACH,OAGF,MAAME,EAAUld,EACb1C,MAAM2f,GAAkDA,aAAazf,EAAAA,IAAAA,6BAElE,SACJ4R,EACAnS,EAAGV,EACHW,EAAGV,EAHC,kBAIJ2gB,GAAoB,EACpBC,aAAcvK,GAAU,GACtBmK,EAEJ,MAAO,CACL9e,GAAIvC,OAAOuC,GACX1C,SAAAA,EACA4T,SAAAA,EACAmL,SAAUC,GAAwB5a,EAAU,SAC5CrD,MAAAA,EACAC,OAAAA,EACA2gB,kBAAAA,EACAtK,QAAAA,EACAwK,MAAOnb,QAAQgb,GACf/e,UAAWhB,EAA8ByD,GACzCnC,KAAMA,EAAKyJ,cAmFR,SAASwR,GAAiB9Z,GAC/B,KAAMA,aAAoBpC,EAAAA,IAAAA,UACxB,OAGF,MAAM,GACJU,EADI,KACAO,EADA,SACMjD,EADN,KACgB6P,EADhB,OACsBzK,EADtB,WAC8BZ,GAChCJ,EAEEzB,EAAYyC,GAAUzD,EAA8ByD,GAE1D,IAAI0c,EACAC,EACJ,MAAM5e,EAAYiC,GAAUA,EAAOtD,MAAMC,GAAkCA,aAAaC,EAAAA,IAAAA,YACxF,GAAImB,EAMF,GALA4e,EAAY,CACVhhB,MAAOoC,EAAU1B,EACjBT,OAAQmC,EAAUzB,GAGhBxD,EAA8B8jB,IAAIhiB,GAAW,CAC/C8hB,EAAY,QAEZ,MAAMG,EAAiBzd,EACpB1C,MAAM2f,GAAmDA,aAAazf,EAAAA,IAAAA,6BAEzE,GAAIigB,EAAgB,CAClB,MAAQxgB,EAAGV,EAAOW,EAAGV,GAAWihB,EAChCF,EAAY,CACVhhB,MAAAA,EACAC,OAAAA,SAGC,GAAI7C,EAAAA,IAAkC6B,GAAW,CACtD8hB,EAAY,QACZ,MAAMI,EAAiB1d,EACpB1C,MAAM2f,GAA+CA,aAAazf,EAAAA,IAAAA,yBAErE,GAAIkgB,EAAgB,CAClB,MAAQzgB,EAAGV,EAAOW,EAAGV,GAAWkhB,EAChCH,EAAY,CACVhhB,MAAAA,EACAC,OAAAA,IAMR,MAAO,CACL0B,GAAIvC,OAAOuC,GACXO,KAAMA,EAAKyJ,aACX1M,SAAAA,EACAmiB,UAAWtS,EACXkP,SAAUC,GAAwB5a,GAClCzB,UAAAA,EACAmf,UAAAA,EACAC,UAAAA,GAkFJ,SAASxB,GAAcC,GACrB,GAAIA,aAAexe,EAAAA,IAAAA,cAAsB,OACzC,MAAM,KACJogB,EADI,IACEC,EADF,eACOC,EADP,WACuBxc,GACzB0a,EACJ,MAAO,CACL4B,KAAAA,EACAC,IAAAA,EACAvc,WAAYA,EAAWsL,WACvBkR,eAAAA,GAwEG,SAAS5C,GAAiBH,GAC/B,MACEvT,QAASuW,EADL,YACiBC,EADjB,aAC8BC,EAD9B,SAC4CtW,EAAUC,iBAAkBzC,EADxE,IACkFgG,GACpF4P,EACEvT,EAAUuW,GAAcA,EAAW/f,KAAI,QAAC,OAC5CiJ,EAD4C,OACpCuR,EADoC,QAC5B0F,EAD4B,OACnBC,GADkB,QAEtC,CACLzF,SAAUF,EACV9Q,UAAWwW,EACXjX,OAAQzB,EAAeyB,GACvBmX,YAAaD,MAGf,MAAO,CACL/R,MAAOjB,EACP6S,YAAAA,EACAK,eAAgBJ,MAAAA,OAAF,EAAEA,EAAcjgB,KAAKE,GAAO4F,EAAe5F,EAAI,UAC7DsJ,QAAAA,EACAG,SAAAA,KACIxC,GAAY,CAAEyC,iBAAkBzC,EAASnH,IAAI6b,MAI9C,SAASyB,GAAa7W,GAC3B,KACIA,aAAiBjH,EAAAA,IAAAA,qBACdiH,EAAMC,mBAAmBlH,EAAAA,IAAAA,SAE9B,OAGF,MAAM,GAAEU,EAAF,MAAMH,EAAN,SAAa6B,GAAa6E,EAAMC,QAEtC,IAAIsH,EAKJ,OAJIpM,aAAoBpC,EAAAA,IAAAA,UAAmBoC,EAASpE,SAASwK,WAAW,YACtEgG,EAAQkO,GAAuBta,IAG1B,CACL1B,GAAI2V,OAAO3V,MACRjD,EAAKwJ,EAAMC,QAAS,CACrB,MACA,aACA,OACA,WACA,QACA,cACA,aAEF3G,MAAOA,aAAiBP,EAAAA,IAAAA,MAAeM,EAAcC,QAASF,EAC9D+B,UAAWoM,GAASpM,EAAW8Z,GAAiB9Z,QAAY/B,EAC5DmO,MAAAA,GAmVJ,SAASwO,GAAwB5a,GAAiD,IAAtB0e,EAAsB,uDAAR,OACxE,MAAM,SAAE9iB,EAAF,WAAYwE,GAAeJ,EAC3B2e,EAAoBve,EACvB1C,MAAM2f,GAAkDA,aAAazf,EAAAA,IAAAA,4BAExE,GAAI+gB,EACF,OAAOA,EAAkBhE,SAG3B,MAAMiE,EAAYhjB,EAASijB,MAAM,KAAK,GAEtC,MAAQ,GAAEH,IAAc3iB,OAAOiE,EAAS1B,OAAOsgB,IAiGjD,SAASE,GACPC,GAEA,MACEC,SAAUrE,EADN,QAEJsE,EAFI,eAGJC,EAHI,SAIJtjB,EAJI,KAKJiD,GACEkgB,EAEJ,GAAIA,EAAWI,MAAO,CACpB,GAAIrlB,EAA8B8jB,IAAIhiB,GAAW,CAC/C,MAAM,MAAEe,EAAF,OAASC,GAAWmiB,EAAWI,MACrC,MAAO,CACLhhB,MAAO,CACLG,GAAI4S,GACJ1T,MAAO,GACPe,UAAW,CAAE5B,MAAAA,EAAOC,OAAAA,EAAQmB,QAAS,IACrCkhB,QAAAA,IAIN,GAAIllB,EAAAA,IAAkC6B,GAAW,CAC/C,MAAM,MAAEe,EAAF,OAASC,EAAT,SAAiB4S,GAAauP,EAAWI,MAC/C,MAAO,CACL/S,MAAO,CACL9N,GAAI4S,GACJtV,SAAAA,EACA4T,SAAUA,GAAY,EACtBmL,SAAAA,EACAhe,MAAAA,EACAC,OAAAA,EACAqiB,QAAAA,KACIC,GAAkB,CAAE3gB,UAAW,CAAE5B,MAAAA,EAAOC,OAAAA,EAAQmB,QAASmhB,IAC7DrgB,KAAAA,KAKR,GAAIkgB,EAAWtE,MAAO,CACpB,MAAM,SAAEjL,EAAF,SAAYsL,GAAaiE,EAAWtE,OAClCxX,KAAMmc,GAAkBpc,EAAiB8X,EAxsCvB,IAysC1B,MAAO,CACLL,MAAO,CACLnc,GAAI4S,GACJ1B,SAAAA,EACAsL,SAAUsE,IAIhB,GAAIplB,EAA8B4jB,IAAIhiB,GAAW,CAC/C,MAAM,SAAE4T,EAAF,UAAY6P,EAAZ,MAAuBpd,GAAU8c,EAAW7H,OAAS,GAC3D,MAAO,CACLA,MAAO,CACL5Y,GAAI4S,GACJtV,SAAAA,EACA+e,SAAAA,EACA9b,KAAAA,EACA2Q,SAAUA,GAAY,EACtBvN,MAAAA,EACAod,UAAAA,IAIN,MAAO,CACLrf,SAAU,CACRpE,SAAAA,EACA+e,SAAAA,EACA9b,KAAAA,KACIqgB,GAAkB,CAAEA,eAAAA,KAKvB,SAASrD,GAAoB7b,GAClC,IAAKA,EAAU,OAEf,MAAM,IACJiF,EADI,KACCpG,EADD,SACOjD,GACToE,EACE0B,EAAa1B,aAAoBpC,EAAAA,IAAAA,YAAqBoC,EAAS0B,WAAWsL,gBAAa/O,EACvFqhB,EAAWtf,EAASI,WAAW1C,MAAM2C,GACzCA,aAAgBzC,EAAAA,IAAAA,6BAIlB,MAAO,CACLqH,IAAAA,EACAvD,WAAAA,EACA7C,KAAAA,EACAjD,SAAAA,EACA2jB,WAPiBD,GAAY,CAAE3iB,MAAO2iB,EAASjiB,EAAGT,OAAQ0iB,EAAShiB,IAWvE,SAASkiB,GAAa3Y,EAAkB4Y,GACtC,MAAO,CACL5Y,KAAM,CACJvI,GAAIvC,OAAO0jB,GACXzY,QAAS3L,EAAKwL,EAAKG,QAAS,CAAC,WAAY,YACzCY,QAAS,KAKR,SAASqS,GAAsBzU,GACpC,MAAQlJ,UAAWwC,EAAb,OAAmByJ,EAAnB,OAA2BvL,GAAWwI,EAC5C,MAAO,CACL1G,KAAAA,EACAyJ,OAAAA,EACAvL,OAAAA,KACIwI,aAAkB5H,EAAAA,IAAAA,0BAAmC,CAAEwG,OAAQF,EAAesB,EAAOpB,OAAQ,YAC7F,QAASoB,GAAU,CAAEP,IAAKO,EAAOP,QACjC,aAAcO,GAAU,CAAEgD,SAAUhD,EAAOgD,WAInD,SAAS2P,GACPuH,EAA2CtU,EAAmB/G,GAE9D,MAAM,UACJC,EADI,QACOuS,EADP,MACgB8I,EADhB,UACuBC,EADvB,eACkCC,GACpCH,EACJ,IAAKpb,EACH,OAGF,MAAMwb,EAAe5b,EAAeI,EAAW,WAC/C,Mf7oCyC,Se6oCrCwb,EAMG,CACLC,SAAU3U,KAHS/G,IAAWyb,EAIX,CACjBzb,OAAQyb,EACRE,gBAAiB3b,GACf,CACFA,OAAAA,GAEF4b,cAAepJ,EACfqJ,cAAeP,EACfQ,uBAAwBP,KACpBC,GAAkB,CAAEO,iBAAkBP,EAAezhB,IAAI+F,UAjB/D,ECv1CK,MAAMkc,GAAiBC,GACrB5mB,KAAKgK,MAAMuJ,KAAKqE,MAAQ,KAAQgP,EC0BzC,SAASC,GACPC,GAEyB,IADzBC,EACyB,wDACzB,MAAMjU,EAAQlK,QAAQ,QAASke,GAAcA,EAAWjV,KAClD7J,EAAc,eAAgB8e,GAAezkB,OAAOykB,EAAW9e,YAC/Dgf,EAAiB,UAAWF,GAAcA,EAAWriB,OAAS,aAAcqiB,EAAWriB,OACxFqiB,EAAWriB,MAAMwiB,SAChBC,EAAc,UAAWJ,GAAeA,EAAWriB,OAAS0iB,GAAgBL,EAAWriB,OACvF2iB,EAAoBxe,QAAQ,eAAgBke,GAAcA,EAAWO,YACrEC,EAAiB1e,QAAQ,YAAake,GAAcA,EAAWS,SAC/DC,EAAS5e,QAAQ,SAAUke,GAAcA,EAAWW,MACpDC,EAAS9e,QAAQ,SAAUke,GAAcA,EAAWa,MACpDC,EAAehf,QAAQ,eAAgBke,GAAcA,EAAWe,YAChEC,EAAgBlf,QAAQ,gBAAiBke,GAAcA,EAAWiB,aAExE,MAAO,CACLjV,MAAAA,EACAwU,eAAAA,EACAF,kBAAAA,KACIpf,GAAc,CAAEA,WAAAA,GACpBgf,eAAAA,KACIE,GAAc,CAAEA,WAAAA,OAEjBJ,aAAsB5iB,EAAAA,IAAAA,SAAkB4iB,aAAsB5iB,EAAAA,IAAAA,OAC5D,CAAEqS,SAAUuQ,EAAWvQ,aAEvB,aAAcuQ,GAAe,CAAEkB,WAAYlB,EAAWmB,aACtD,eAAgBnB,GAAe,CAAEoB,aAAcpB,EAAWqB,eAC1D,iBAAkBrB,GAAe,CAAEsB,eAAgBtB,EAAWuB,kBAC9DvB,aAAsB5iB,EAAAA,IAAAA,MAAe4iB,aAAsB5iB,EAAAA,IAAAA,UAAmB,IAC7E4iB,EAAWxS,mBAAqB,CAAEgU,aAAcxB,EAAWxS,mBAC/DiU,SAAUzB,EAAW/U,UAElB+U,aAAsB5iB,EAAAA,IAAAA,MAAe4iB,aAAsB5iB,EAAAA,IAAAA,UAAmB,CACjFya,YAAa/V,QAAQ,eAAgBke,GAAcA,EAAWpI,gBAE5DqI,GAAa,CAAEA,WAAW,MAC3ByB,GAAwB1B,MACtB,YAAaA,GAAe,CAAE2B,UAAW3B,EAAW4B,YACtDC,GAAyB7B,MACzB8B,GAA0B9B,GAC7B+B,SAAUrB,EAAS,OAAUE,EAAS,YAASnjB,EAC/CqjB,aAAAA,EACAE,cAAAA,GAIG,SAASgB,GACdC,EACAjC,EACAF,GAEA,MAAM,KACJvc,EADI,SACE2e,EADF,WACYC,EADZ,YACwBC,EADxB,oBACqCC,EADrC,qBAC0DC,EAC9DC,gBAAgB,OAAEC,EAAF,UAAUC,GAFtB,gBAGJC,EAHI,eAGaC,EAHb,MAG6BC,GAC/BX,EACE/V,EAAUsW,GAAgC,iBAAdC,GAA0B5C,GAAcC,GAAoB2C,EAE9F,MAAO,CACL3kB,GAAI6F,EAAwBJ,MACxB2e,GAAY,CAAEA,SAAAA,GAClB5jB,KAAMukB,GAA6B7C,GACnCve,MAAOqhB,GAA2Bvf,EAAMyc,GACxC+C,wBAAyBL,EACzB/C,uBAAwBgD,EACxBP,YAAAA,EACAC,oBAAAA,EACAC,qBAAAA,EACApW,QAAAA,KACIiW,GAAc,CAAEa,eAAe,MAC/BJ,aAAiBxlB,EAAAA,IAAAA,cAAuB,CAAE6lB,UAAWL,EAAM3X,SAC5D8U,GAAiCC,IAIxC,SAAS0B,GAAwB1B,GAK/B,OAAMA,aAAsB5iB,EAAAA,IAAAA,MAAe4iB,aAAsB5iB,EAAAA,IAAAA,QAI1D,CACLmM,YAAayW,EAAWzW,YAAc9N,EAAuBukB,EAAWzW,kBAAe9L,EACvFylB,wBAAyBlD,aAAsB5iB,EAAAA,IAAAA,SAAkB4iB,EAAW5W,aACxE3N,EAAuBukB,EAAW5W,mBAClC3L,EACJ0lB,oBAAqBnD,EAAWmD,oBAC5B1nB,EAAuBukB,EAAWmD,0BAClC1lB,GAVG,GAcX,SAASokB,GAAyB7B,GAMhC,GAAIA,aAAsB5iB,EAAAA,IAAAA,cACxB,MAAO,CACLgmB,aAAa,GAIjB,GAAIpD,aAAsB5iB,EAAAA,IAAAA,iBACxB,MAAO,CACLimB,cAAc,GAIlB,MAAMC,EAAe,GAErB,GAAI,eAAgBtD,EAAY,CAC9B,MAAMuD,EAAoBvD,EAAWwD,WAoDzC,SACEC,GAEA,IAAKA,EACH,OAGF,MAAMC,EAAeD,EAAmBvmB,MAAK,QAAC,SAAEymB,GAAH,QAA+B,QAAbA,KAC/D,OAAOD,EAAe7oB,EAAK6oB,EAAc,CAAC,SAAU,cAAWjmB,EA3DzDmmB,CAA8B5D,EAAWuD,wBACzC9lB,EAEA8lB,GACFpkB,OAAOC,OAAOkkB,EAAc,CAC1BD,cAAc,EACdE,kBAAAA,IAkBN,OAbIvD,aAAsB5iB,EAAAA,IAAAA,MACxB+B,OAAOC,OAAOkkB,EAAc,CAC1BO,YAAa7D,EAAW3U,OAIxB2U,aAAsB5iB,EAAAA,IAAAA,SACxB+B,OAAOC,OAAOkkB,EAAc,CAE1BO,YAAa7D,EAAW3U,OAIrBiY,EAGT,SAASxB,GAA0B9B,GAMjC,OACEA,aAAsB5iB,EAAAA,IAAAA,MACnB4iB,EAAW8D,cACT9D,EAAW8D,sBAAsB1mB,EAAAA,IAAAA,mBAE/B,CACL0mB,WAAY,CACVjgB,OAAQF,EAAwBqc,EAAW8D,eACvC9D,EAAW8D,sBAAsB1mB,EAAAA,IAAAA,cAAuB,CAC1D8D,WAAY3F,OAAOykB,EAAW8D,WAAW5iB,eAM1C,GAcF,SAAS6iB,GACdC,GAGqB,IAFrB/D,EAEqB,wDADrBgE,EACqB,wDACrB,GACED,aAAmB5mB,EAAAA,IAAAA,MAChB4mB,aAAmB5mB,EAAAA,IAAAA,SACnB4mB,aAAmB5mB,EAAAA,IAAAA,MAEpB6mB,IAEED,aAAmB5mB,EAAAA,IAAAA,eAChB4mB,aAAmB5mB,EAAAA,IAAAA,kBAO5B,MAAO,CACLU,GAAI4F,EAAesgB,EAAQlmB,GAAIkmB,aAAmB5mB,EAAAA,IAAAA,KAAc,OAAS,QACzEkB,KAAMukB,GAA6BmB,GACnCviB,MAAOuiB,aAAmB5mB,EAAAA,IAAAA,KAAc8mB,GAAYF,GAAWA,EAAQviB,SACpEse,GAAiCiE,EAAS/D,IAI1C,SAAS4C,GAA6B7C,GAC3C,OAAIA,aAAsB5iB,EAAAA,IAAAA,MAAe4iB,aAAsB5iB,EAAAA,IAAAA,UACtD,kBAEP4iB,aAAsB5iB,EAAAA,IAAAA,MACnB4iB,aAAsB5iB,EAAAA,IAAAA,eACtB4iB,aAAsB5iB,EAAAA,IAAAA,UAElB,qBAEA4iB,EAAWmE,UAAY,qBAAuB,kBAIlD,SAASC,GAAW7gB,GACzB,OAAID,EAAWC,GACL,OAAMA,EAAKK,SACVH,EAAWF,GACZ,OAAMA,EAAKM,SAEX,OAAMN,EAAKO,YAIhB,SAASgf,GAA2Bvf,EAAuByc,GAChE,OAAI1c,EAAWC,GACN2gB,GAAYlE,GAEXA,EAA2Bve,MAIvC,SAASyiB,GAAYtf,GACnB,OAAOA,EAAKoE,UACP,GAAEpE,EAAKoE,YAAYpE,EAAKqE,SAAY,IAAGrE,EAAKqE,WAAa,KACzDrE,EAAKqE,eAAYxL,EAGjB,SAAS4iB,GAAgB1iB,GAC9B,GAAI,YAAaA,EACf,OAAOpC,OAAOoC,EAAM0mB,SAMjB,SAASC,GACd1pB,GAMA,MAAO,CACLgJ,OALchJ,aAAkBwC,EAAAA,IAAAA,0BAAmCxC,aAAkBwC,EAAAA,IAAAA,uBACnFuG,EAAwB/I,EAAO2I,MAC/BG,EAAe9I,EAAOgJ,OAAQ,QAIhC2gB,UAAW,cAAe3pB,EAAS8I,EAAe9I,EAAO2pB,UAAgC,aAAU9mB,EACnG+mB,WAAY,SAAU5pB,EAASA,EAAOqQ,UAAOxN,EAC7CgnB,eAAgB,aAAc7pB,EAAS8I,EAAe9I,EAAO8pB,SAAU,aAAUjnB,EACjFknB,iBAAkB,eAAgB/pB,EAAS8I,EAAe9I,EAAOgqB,WAAY,aAAUnnB,EACvF2L,aAAc,iBAAkBxO,EAASa,EAAuBb,EAAOwO,mBAAgB3L,EACvF8L,YAAa,gBAAiB3O,EAASa,EAAuBb,EAAO2O,kBAAe9L,EACpFonB,YAAa,SAAUjqB,EAASA,EAAOkqB,UAAOrnB,MACzC7C,aAAkBwC,EAAAA,IAAAA,yBAAkCxC,aAAkBwC,EAAAA,IAAAA,uBAAgC,CACzG2nB,SAAS,OAENnqB,aAAkBwC,EAAAA,IAAAA,2BAAoCxC,aAAkBwC,EAAAA,IAAAA,yBAAkC,CAC7G4nB,SAAS,IAKR,SAASC,GACdvX,GAGA,OAAIA,aAAwBtQ,EAAAA,IAAAA,kBAGxBsQ,aAAwBtQ,EAAAA,IAAAA,SAAAA,oBAFnBsQ,EAAaA,aAAa9P,IAAI0mB,IAAiBhnB,OAAsBwE,cAE9E,EA0DK,SAASojB,GAAmB5nB,GACjC,MAAO,KflVwCxC,EemV/BwC,EfnV0CvC,EemVlC,CACpB,KAAM,QAAS,WAAY,WAAY,cAAe,SAAU,OAChE,eAAgB,cAAe,mBfpV5BA,EAAKL,QAAO,CAACM,EAAQP,KACtBK,EAAOL,KACTO,EAAOP,GAAOK,EAAOL,IAGhBO,IACN,KegVDd,SAAUoD,EAAO6nB,WACjBC,cAAe9nB,EAAO+nB,YAAYznB,IAAI+F,GAAyBrG,OAAewE,SAC9EwjB,gBAAiBhoB,EAAOioB,aAAa3nB,IAAI+F,GAAyBrG,OAAewE,SACjF0jB,gBAAiBloB,EAAOmoB,aAAa7nB,IAAI+F,GAAyBrG,OAAewE,Uf1V9E,IAA0ChH,EAAWC,Ee8VrD,SAAS2qB,GAAT,GAKuB,IALkB,OAC9CpoB,EAD8C,YACtC6d,GAIoB,EAC5B,GAAM7d,aAAkBF,EAAAA,IAAAA,aACxB,MAAO,IACF8nB,GAAmB5nB,GACtB6d,YAAAA,GAIG,SAASwK,GAAwBC,GACtC,OAAOA,EAASlrB,QAAO,CAACmrB,EAAaC,KACnC,MAAMC,EAAQriB,EAAeoiB,EAAQliB,OAAS,QAS9C,OAPIkiB,EAAQE,WACVH,EAAcA,EAAYI,OAAOH,EAAQE,SAASpoB,KAAKsoB,IAAD,CACpDH,MAAAA,KACGtqB,EAAuByqB,SAIvBL,IACN,IAGE,SAASM,GAAuBC,GACrC,MAAM,QACJC,EADI,KAEJpb,EAFI,WAGJqb,EAHI,KAIJC,EAJI,UAKJC,EALI,UAMJ3X,EANI,MAOJ4X,EAPI,WAQJC,EARI,UASJC,EATI,cAUJC,EAVI,MAWJnlB,EAXI,QAYJ4M,GACE+X,EACJ,MAAO,CACLS,UAAWR,EACXpb,KAAAA,EACAqb,WAAAA,EACAC,KAAAA,EACAO,YAAaN,EACb3X,UAAAA,EACA4X,MAAAA,EACAC,WAAAA,EACAK,gBAAiBH,EACjBD,UAAAA,EACAllB,MAAAA,EACA4M,QAAS3K,EAAe2K,EAAS,SCxX9B,SAAS2Y,GAAsBC,GACpC,MAAO,CACLnpB,GAAImpB,EAAIlB,MAAMvZ,WACd0a,YAAaD,EAAIC,YACjBvlB,UAAWslB,EAAItlB,UACfwlB,UAAWF,EAAIE,UAAUvpB,IAAIwpB,IAC7BC,MAAOJ,EAAII,MAAMzpB,IAAI0pB,IAAwBhqB,OAAOwE,UAIxD,SAASslB,GAA2BG,GAClC,OAAIA,aAAoBnqB,EAAAA,IAAAA,wBAAuC,MAC3DmqB,aAAoBnqB,EAAAA,IAAAA,qBAAoC,UACxDmqB,aAAoBnqB,EAAAA,IAAAA,uBAAsC,OAC1DmqB,aAAoBnqB,EAAAA,IAAAA,4BAA2C,UAC/DmqB,aAAoBnqB,EAAAA,IAAAA,4BAA2C,YAAnE,EAIF,SAASkqB,GAAuBE,GAC9B,KAAMA,EAAKA,gBAAgBpqB,EAAAA,IAAAA,UAAkB,OAE7C,MAAMoC,EAAW8Z,GAAiBkO,EAAKA,MAEvC,OAAKhoB,GAELP,EAAAA,UAAkB1D,OAAOisB,EAAKA,KAAK1pB,KAAO0pB,EAAKA,KAExC,CACLC,KAAMD,EAAKC,KACXjoB,SAAAA,SANF,EAUK,SAASkoB,GAAgB5B,EAAyBjiB,GACvD,MAAM,YACJsX,EADI,iBACSwM,EADT,oBAC2BC,EAD3B,OACgDhkB,EADhD,SACwDoiB,EADxD,WACkE6B,GACpE/B,EAEEC,EAAQniB,GAAUF,EAAeE,EAAQ,QACzCjG,EAAQgqB,aAA4BvqB,EAAAA,IAAAA,MAAeM,EAAciqB,QAAoBlqB,EACrFqqB,EAAMF,aAA+BxqB,EAAAA,IAAAA,SAAkB0c,GAAuB8N,QAAuBnqB,EAErGsqB,EAAgB/B,MAAAA,OAAH,EAAGA,EAAUpoB,KAAKoqB,GAYvC,SAA4BjC,EAAeiC,GACzC,MAAO,CACLjC,MAAAA,KACGtqB,EAAuBusB,IAfqBC,CAAmBlC,GAASliB,EAAQmkB,KAErF,MAAO,CACLjC,MAAOA,GAASliB,EAChBsX,YAAAA,EACA2M,IAAAA,EACAnqB,MAAAA,EACAkqB,WAAYK,GAAsBL,GAClC7B,SAAU+B,MAAAA,GAAAA,EAAevrB,OAASurB,OAAgBtqB,GAW/C,SAASyqB,GAAsBL,GACpC,OAAIA,aAAsBzqB,EAAAA,IAAAA,cACjB,CACLkB,KAAM,SACNsI,KAAMihB,EAAWjhB,KACjBnC,IAAKojB,EAAWpjB,KAIb,CACLnG,KAAM,YChIH,SAAS6pB,GAAqBC,GACnC,MACEC,UAAU,MACRrd,EADQ,iBACDsd,EADC,YACiBC,EADjB,QAC8BzC,EAD9B,QACuC0C,EADvC,aAERC,GAHE,MAKJ9pB,GACEypB,EAEExjB,EAAO8jB,GAAa/pB,EAAM,IAEhC,MAAO,IACFiG,EACH+jB,SAAU,IACJF,aAAwBrrB,EAAAA,IAAAA,OAAgB,CAAEqrB,aAAc/qB,EAAc+qB,IAC1EG,IAAK5d,EACLsd,iBAAAA,EACAO,gBAAiBN,EACjBO,UAAWhnB,QAAQ0mB,MACf1C,GAAW,CAAEA,QAAS4B,GAAgB5B,EAASlhB,EAAK9G,OAKvD,SAAS4qB,GAAaK,GAC3B,KAAMA,aAAmB3rB,EAAAA,IAAAA,MACvB,OAGF,MAAM,GACJU,EADI,UACAkL,EADA,SACWC,EADX,KACqB4X,EADrB,KAC2BF,GAC7BoI,EACE7I,EAAiB6I,EAAQprB,iBAAiBP,EAAAA,IAAAA,iBAC5C0E,QAAQinB,EAAQprB,MAAMwiB,eACtB1iB,EACE2iB,EAAa2I,EAAQprB,iBAAiBP,EAAAA,IAAAA,iBACxC7B,OAAOwtB,EAAQprB,MAAM0mB,cACrB5mB,EACEurB,GAyBkBpkB,EAzBUmkB,GA0BzB9B,IACA,cAELriB,EAAKqkB,QACA,kBAGF,kBART,IAA0BrkB,EAvBxB,MAAO,CACL9G,GAAI4F,EAAe5F,EAAI,QACvBkO,MAAOlK,QAAQinB,EAAQhe,KACvBgX,SAAUpB,EAAO,OAAUE,EAAO,YAASpjB,KACvCsrB,EAAQtoB,MAAQ,CAAEsL,QAAQ,GAC9ByN,UAAW1X,QAAQinB,EAAQ1P,YACvB0P,EAAQ5H,UAAY,CAAED,YAAY,OACjC6H,EAAQvW,SAAWuW,EAAQG,gBAAkB,CAAEC,WAAW,GAC/D7qB,KAAM0qB,KACFhgB,GAAa,CAAEA,UAAAA,MACF,gBAAbggB,GAA8B,CAAEI,qBAAsBL,EAAQM,eAC9DpgB,GAAY,CAAEA,SAAAA,GAClBwG,SAAUsZ,EAAQtZ,UAAY,GAC9BgL,YAAasO,EAAQhgB,OAAS,GAC9BugB,UAAWP,EAAQQ,UACfR,EAAQ7nB,YAAc,CAAEA,WAAY3F,OAAOwtB,EAAQ7nB,gBACnDkf,GAAc,CAAEA,WAAAA,GACpBF,eAAAA,KACI6I,EAAQ9B,KAAO8B,EAAQS,sBAAwB,CAAEC,eAAgBV,EAAQS,yBACzET,EAAQ9B,KAAO8B,EAAQW,eAAiB,CAAEC,gBAAiBZ,EAAQW,gBA+BpE,SAASE,GAAyBC,GACvC,MAAMC,EAAkD,GAClDnrB,EAAmB,GAezB,OAbAkrB,EAASxnB,SAAS0mB,IAChB,MAAMnkB,EAAO8jB,GAAaK,GArBvB,IAA4BgB,EAsB1BnlB,IAILjG,EAAM4D,KAAKqC,GAEP,WAAYmkB,IACde,EAAiBllB,EAAK9G,MA7BOisB,EA6BkBhB,EAAQQ,SA5BzCQ,aAAqB3sB,EAAAA,IAAAA,gBAC9B,CAAEkB,KAAM,mBACNyrB,aAAqB3sB,EAAAA,IAAAA,iBACvB,CAAEkB,KAAM,mBAAoB0rB,QAASD,EAAUC,SAC7CD,aAAqB3sB,EAAAA,IAAAA,kBACvB,CAAEkB,KAAM,oBAAqB2rB,UAAWF,EAAUE,WAChDF,aAAqB3sB,EAAAA,IAAAA,mBACvB,CAAEkB,KAAM,sBACNyrB,aAAqB3sB,EAAAA,IAAAA,mBACvB,CAAEkB,KAAM,sBAER,CAAEA,KAAM,4BAqBV,CAAEK,MAAAA,EAAOmrB,iBAAAA,GCrGX,SAASI,GAAkBC,GAChC,GAAIA,aAAqB/sB,EAAAA,IAAAA,gBAEvB,OAGF,MAAM,KAAEsN,GAASyf,EAEX3qB,EAAW8Z,GAAiB6Q,EAAU3qB,UAE5C,OAAKA,EAIE,CACLkL,KAAAA,EACAlL,SAAAA,QANF,EAUK,SAAS4qB,GAAgBC,GAC9B,MAAO,CACLC,UAAWxoB,QAAQuoB,EAAQE,SAC3BC,cAAe1oB,QAAQuoB,EAAQI,aAC/BC,kBAAmB5oB,QAAQuoB,EAAQM,iBACnCC,KAAMrvB,OAAO8uB,EAAQO,MACrBC,iBAAkBR,EAAQS,qBAC1BC,uBAAwBV,EAAQW,6BAC7BnwB,EAAKwvB,EAAS,CACf,cAAe,WAAY,gBAAiB,UAAW,aAAc,cAAe,aACpF,KAAM,UAAW,YAKhB,SAASY,GAAmBZ,GACjC,MAAO,CACLO,KAAMrvB,OAAO8uB,EAAQO,MACrB7E,MAAOriB,EAAe2mB,EAAQtE,MAAO,WAClClrB,EAAKwvB,EAAS,CACf,WAAY,UAAW,cAAe,aAAc,KAAM,SAAU,YA0BnE,SAASa,GAAkBC,GAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EA2BJ,OAzBAL,EAAM9oB,SAASopB,IACTA,aAAgBruB,EAAAA,IAAAA,qBAClBguB,EAAaA,GAAc,YAClBK,aAAgBruB,EAAAA,IAAAA,0BACzBguB,EAAaA,GAAc,WAClBK,aAAgBruB,EAAAA,IAAAA,6BACzBguB,EAAaA,GAAc,cAClBK,aAAgBruB,EAAAA,IAAAA,wBACzBguB,EAAaA,GAAc,SAClBK,aAAgBruB,EAAAA,IAAAA,uBACzBiuB,EAAeI,EAAK9sB,MAAMf,KAAKiG,GAAWH,EAAeG,EAAQ,UACxD4nB,aAAgBruB,EAAAA,IAAAA,0BACzBmuB,EAAeE,EAAK9sB,MAAMf,KAAKiG,GAAWH,EAAeG,EAAQ,UACxD4nB,aAAgBruB,EAAAA,IAAAA,kCACzBkuB,EAAeG,EAAK/sB,MAAMd,KAAKiG,GAAWH,EAAeG,EAAQ,UACxD4nB,aAAgBruB,EAAAA,IAAAA,uCACzBouB,EAAeC,EAAK/sB,MAAMd,KAAKiG,GAAWH,EAAeG,EAAQ,cAIhEunB,IAEHA,EAAa,UAGR,CACLA,WAAAA,EACAC,aAAcA,GAAgB,GAC9BC,aAAcA,GAAgB,GAC9BC,aAAcA,GAAgB,GAC9BC,aAAcA,GAAgB,IAqBlC,SAASE,GAAgBC,EAA8BC,GACrD,MAAM,OACJC,EADI,KACIC,EADJ,YACUC,EADV,KACuBtE,GACzBkE,GACE,YAAEK,EAAF,SAAeC,EAAf,SAAyBC,GAAaN,GAAQ,GAEpD,MAAO,CACLO,SAAUN,EACVC,KAAAA,EACAC,YAAAA,EACAtE,KAAAA,EACAuE,YAAAA,EACAC,SAAAA,EACAC,SAAAA,GA2BG,SAASE,GAAUC,GACxB,KAAIA,aAAgBjvB,EAAAA,IAAAA,UACpB,OAAIivB,aAAgBjvB,EAAAA,IAAAA,YACfivB,aAAgBjvB,EAAAA,IAAAA,UAChBivB,aAAgBjvB,EAAAA,IAAAA,WAA0BivB,EAAKhnB,MAChDgnB,aAAgBjvB,EAAAA,IAAAA,UAAyBivB,EAAKhnB,MAAMzH,IAAIwuB,IAErDC,EAAKhnB,MAAM3K,QAAO,CAAC4xB,EAA0BC,KAClDD,EAAIC,EAAG9xB,KAAO2xB,GAAUG,EAAGlnB,OACpBinB,IACN,IAGE,SAASE,GAAsBxxB,GACpC,GAAIA,aAAkBoC,EAAAA,IAAAA,qBAA6B,CACjD,MAAM,IAAE6pB,EAAF,OAAOtT,EAAP,mBAAe8Y,GAAuBzxB,EACtC4J,EAAO8jB,GAAazB,GAC1B,IAAKriB,EAAM,OAIX,OAFAD,EAAiBsiB,GAEV,CACL3oB,KAAM,UACNqV,OAAAA,EACA+Y,yBAA0BD,EAC1BxF,IAAKriB,GAIT,OAAI5J,aAAkBoC,EAAAA,IAAAA,sBACb,CACLkB,KAAM,WACNmG,IAAKzJ,EAAOyJ,KAIZzJ,aAAkBoC,EAAAA,IAAAA,qBACb,CACLkB,KAAM,gBAFV,ECzJF,IAAIquB,GAMmB,IAAItzB,ICzD3B,MAQMuzB,GAGF,GAEJ,IAAID,GAuGG,SAASE,GAAuBpS,GAChCmS,GAAeE,SAIpBF,GAAeE,QAAQrS,GAGlB,SAASsS,GAAgBnB,GACzBgB,GAAeE,SAIpBF,GAAeE,QAAQlB,GAGlB,SAASoB,GAAoBtd,GAC7Bkd,GAAeE,SAIpBF,GAAeE,QAAQpd,GAGlB,SAASud,GAAwBC,GACtC,MAAM,UAAElkB,EAAF,SAAaC,GAAaikB,EAE3BN,GAAeE,SAIpBF,GAAeE,QAAQ,CAAC9jB,EAAWC,IAG9B,SAASkkB,KACTP,GAAeQ,QAIpBR,GAAeQ,OAAO,IAAIC,MAAM,iBAG3B,SAASC,KACTV,GAAeQ,QAIpBR,GAAeQ,OAAO,IAAIC,MAAM,yB,gBC5KlC,MAAME,GAAW9sB,KAAK+sB,OAEf,IAAKC,GAOLC,eAAeC,GACpBC,EAAmBnzB,EAAa6D,GAChC,IAD4CuvB,EAC5C,wDACA,GAAKN,GAIL,IAEE,MAAMO,EAAU,IAAIC,QAAQtzB,EAAI4B,QAAQ,KAAM,MACxC2xB,QAAcT,GAASU,KAAKL,GAC5BM,QAAiBF,EAAMG,MAAML,GACnC,IAAKI,EACH,OAGF,MAAME,EAAcF,EAASG,QAAQC,IAAI,gBAEzC,OAAQhwB,GACN,KAAKmvB,GAAKc,KACR,aAAaL,EAAStnB,OACxB,KAAK6mB,GAAKe,KAAM,CAEd,GAAI/zB,EAAImL,WAAW,WAAawoB,GAAeA,EAAYxoB,WAAW,QACpE,OAGF,MAAM6oB,QAAaP,EAASO,OACtBC,GAAkBD,EAAKnwB,OAAUuvB,GAAiBY,EAAKnwB,KAAK8U,SAAS,QAE3E,IAAIub,EAAeF,EAAKnwB,MAAQ8vB,EAEhC,OAAMM,GAAkBC,GAKnBd,IACHc,EAAeA,EAAatyB,QAAQ,SAAU,KAGzC,IAAImyB,KAAK,CAACC,GAAO,CAAEnwB,KAAMqwB,KARvBF,EAUX,KAAKhB,GAAKmB,KACR,aAAaV,EAAS7B,OACxB,KAAKoB,GAAKoB,YACR,aAAaX,EAASY,cACxB,QACE,QAEJ,MAAOC,GAGP,YADAC,QAAQC,KAAKF,IAKVrB,eAAewB,GAAKtB,EAAmBnzB,EAAagI,GACzD,GAAK8qB,GAIL,IACE,MAAM4B,EAA4B,iBAAT1sB,GAAqBA,aAAgB+rB,MAAQ/rB,aAAgBosB,YAClFpsB,EACAwH,KAAKC,UAAUzH,GAEbqrB,EAAU,IAAIC,QAAQtzB,EAAI4B,QAAQ,KAAM,MACxC6xB,EAAW,IAAIkB,SAASD,GACxBnB,QAAcT,GAASU,KAAKL,GAClC,aAAaI,EAAMqB,IAAIvB,EAASI,GAChC,MAAOa,GAGP,YADAC,QAAQC,KAAKF,IAKVrB,eAAe4B,GAAO1B,EAAmBnzB,GAC9C,IACE,IAAK8yB,GACH,OAGF,MAAMS,QAAcT,GAASU,KAAKL,GAClC,aAAaI,EAAMuB,OAAO90B,GAC1B,MAAOs0B,GAGP,YADAC,QAAQC,KAAKF,IAKVrB,eAAe8B,GAAM5B,GAC1B,IACE,IAAKL,GACH,OAGF,aAAaA,GAASgC,OAAO3B,GAC7B,MAAOmB,GAGP,YADAC,QAAQC,KAAKF,K,SA7GLtB,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,YAAAA,GAAAA,c,CAAAA,KAAAA,GAAAA,KCeZ,MAAMgC,GAAqB,IAAIp2B,IAAI,CACjC,MAAO,UAAW,MAAO,YAAa,QAAS,cAAe,WAAY,gBAG7Dq0B,eAAegC,GAAf,EAMbC,EACAC,EACAC,GACA,IARA,IACEprB,EADF,YACOqrB,EADP,MACoBC,EADpB,IAC2BC,EAD3B,cACgCnC,GAOhC,EACA,MAAM,KACJprB,EADI,SACErH,EADF,SACY60B,SAqCpBvC,eACEjpB,EACAkrB,EACAC,EACAC,EACAE,EACAC,EACAF,EACAjC,GAEA,MAAMqC,EAASC,GAAc1rB,GAE7B,IAAKyrB,EAAQ,OAEb,MAAM,WACJE,EADI,SACQC,EADR,SACkBC,EADlB,OAC4BtmB,EAD5B,eACoCumB,GACtCL,EAEJ,IAAKN,EACH,OAAOY,QAAQpD,OAAO,IAAIC,MAAM,mCAGlC,GAAmB,cAAf+C,EAA4B,CAC9B,MAAMlvB,EAAamvB,EACbI,EAAe,IAAIC,gBAAgB1mB,GACnCwT,EAAOiT,EAAanC,IAAI,QACxB7Q,EAAMgT,EAAanC,IAAI,OACvBzxB,EAAI4zB,EAAanC,IAAI,KACrBxxB,EAAI2zB,EAAanC,IAAI,KACrBqC,EAAOF,EAAanC,IAAI,QACxBsC,EAAQH,EAAanC,IAAI,SACzB5Q,EAAiB+S,EAAanC,IAAI,mBAGxC,MAAO,CACLlzB,SAAU,YACVqH,WAHiBktB,EAAOkB,kBAAkB3vB,EAAYsc,EAAMC,EAAK5gB,EAAGC,EAAG6zB,EAAMC,EAAOlT,IAOxF,IAAI1Y,EAMJ,OAAQorB,GACN,IAAK,UACL,IAAK,OACHprB,EAAS/F,EAAAA,MAAcoxB,GACvB,MACF,IAAK,OACHrrB,EAAS/F,EAAAA,MAAcoxB,GACvB,MACF,IAAK,MACHrrB,EAAS/F,EAAAA,SAAiBoxB,GAC1B,MACF,IAAK,UACL,IAAK,MACL,IAAK,YAaL,IAAK,WACHrrB,EAAS/F,EAAAA,UAAkBoxB,GAC3B,MAZF,IAAK,cACL,IAAK,QACHrrB,EAAS/F,EAAAA,OAAeoxB,GACxB,MACF,IAAK,aACHrrB,EAAS/F,EAAAA,YAAoBoxB,GAC7B,MACF,IAAK,cACHrrB,EAAS/F,EAAAA,aAAqBoxB,GAOlC,GAAKrrB,EAAL,CAIA,GAAIyqB,GAAmBrS,IAAIgT,GAAa,CAClCN,IAAgBzsB,EAAeytB,SACjCjB,EAAYkB,eAAgB,GAG9B,MAAMtuB,QAAaktB,EAAOD,cAAc1qB,EAAQ,CAC9CsrB,SAAAA,EAAUP,MAAAA,EAAOC,IAAAA,EAAKgB,iBAAkBnB,EAAYoB,QxBjH1B,KwBmH5B,IAAI71B,EACA60B,EAiCJ,OA/BIjrB,aAAkB5H,EAAAA,IAAAA,SACpBhC,EA4CN,SAAiC+I,EAAyBmsB,GACxD,GAAKnsB,GAAYA,EAAQE,MAIzB,OAAIF,EAAQE,iBAAiBjH,EAAAA,IAAAA,kBACpB,aAGL+G,EAAQE,iBAAiBjH,EAAAA,IAAAA,iBACxB+G,EAAQE,iBAAiBjH,EAAAA,IAAAA,mBACzB+G,EAAQE,iBAAiBjH,EAAAA,IAAAA,oBACrB,YAGL+G,EAAQE,iBAAiBjH,EAAAA,IAAAA,sBAA+B+G,EAAQE,MAAM7E,oBAAoBpC,EAAAA,IAAAA,SACxFkzB,EACKnsB,EAAQE,MAAM7E,SAAUI,WAAWmB,MAAM8b,GAAMA,aAAazf,EAAAA,IAAAA,2BAC/D,aACA,aAGC+G,EAAQE,MAAM7E,SAAUpE,SAG7B+I,EAAQE,iBAAiBjH,EAAAA,IAAAA,qBACxB+G,EAAQE,MAAMC,mBAAmBlH,EAAAA,IAAAA,SACjC+G,EAAQE,MAAMC,QAAQ9E,oBAAoBpC,EAAAA,IAAAA,SACzCkzB,EACK,aAGFnsB,EAAQE,MAAMC,QAAQ9E,SAASpE,cAPxC,EArEe81B,CAAwBlsB,EAAQsrB,GACvCtrB,EAAOX,iBAAiBjH,EAAAA,IAAAA,sBAA+B4H,EAAOX,MAAM7E,oBAAoBpC,EAAAA,IAAAA,WAC1F6yB,EAAWjrB,EAAOX,MAAM7E,SAASnB,KAAKyJ,cAEpC9C,EAAOX,iBAAiBjH,EAAAA,IAAAA,qBACvB4H,EAAOX,MAAMC,mBAAmBlH,EAAAA,IAAAA,SAChC4H,EAAOX,MAAMC,QAAQ9E,oBAAoBpC,EAAAA,IAAAA,WAC5C6yB,EAAWjrB,EAAOX,MAAMC,QAAQ9E,SAASnB,KAAKyJ,eAEvC9C,aAAkB5H,EAAAA,IAAAA,MAEzBhC,EADiB,gBAAfg1B,EACS,YAEA,aAEW,YAAfA,GAA4BE,EACrCl1B,EAAW,aACa,gBAAfg1B,GACTh1B,EAAY4J,EAAkC5J,SAC9C60B,EAAYjrB,EAAkC3G,OAE9CjD,EAAY4J,EAA2B5J,SACvC60B,EAAYjrB,EAA2B3G,KAAKyJ,eAIzC+lB,GAAiBzyB,IACpBA,EAAWA,EAASiB,QAAQ,SAAU,KAGjC,CAAEjB,SAAAA,EAAUqH,KAAAA,EAAMwtB,SAAAA,GACpB,GAAmB,eAAfG,EAA6B,CACtC,MAAM3tB,QAAaktB,EAAOwB,wBAAwBnsB,GAGlD,MAAO,CAAE5J,SAFQg2B,GAAY3uB,GAEVA,KAAAA,GACd,CACL,MAAMA,QAAaktB,EAAO0B,qBAAqBrsB,EAA2B,YAAnBurB,GAGvD,MAAO,CAAEn1B,SAFQg2B,GAAY3uB,GAEVA,KAAAA,KAzKX6uB,CAAS7sB,EAAKkrB,EAAQC,EAAaC,EAAYE,EAAOC,EAAKF,EAAajC,IAAkB,GAEpG,IAAKprB,EACH,OAGF,MAAMytB,QA8MRxC,eACEjrB,EAAcqtB,EAA6B10B,GAE3C,OAAQ00B,GACN,KAAKzsB,EAAekuB,QAClB,OAAO,IAAI/C,KAAK,CAAC/rB,GAAO,CAAEnE,KAAMlD,IAClC,KAAKiI,EAAekrB,KAClB,OAAO9rB,EAAK+J,WACd,KAAKnJ,EAAemuB,YAClB,OAAO/uB,EAAKgvB,QAvNKC,CAAWjvB,EAAMqtB,EAAa10B,GACnD,IAAK80B,EACH,OAGF,MAAMyB,EAAW7B,IAAgBzsB,EAAemuB,cAC9C1B,IAAgBzsB,EAAekuB,SAAYrB,EAAgB7xB,MxBR1B,QwBmBnC,OAR6BkvB,GAAYoE,GAElCpE,GADa9oB,EAAImB,WAAW,UxBfG,mBADR,WwBiBEnB,EAAKyrB,GAM9B,CACL0B,SAJe9B,IAAgBzsB,EAAemuB,YAAc,IA+M1CK,EA/M4D3B,EAgN5E2B,aAAqBrD,KAChBsD,IAAIC,gBAAgBF,GAGtBA,GA/ML/C,YAJkBgB,IAAgBzsB,EAAemuB,YAActB,OAAwBzyB,EAKvFrC,SAAAA,EACA60B,SAAAA,GAwMJ,IAAsB4B,EAQtB,SAAST,GAAY3uB,GAAmD,IAAjCuvB,EAAiC,uDAAd,aACxD,GAAIvvB,EAAKjG,OAAS,EAChB,OAAOw1B,EAGT,IAAI1zB,EAAO0zB,EACX,MAAMC,EAAYxvB,EAAKyvB,SAAS,EAAG,GAAGx3B,QAAO,CAACM,EAAQm3B,IAASn3B,EAASm3B,EAAK3lB,SAAS,KAAK,IAG3F,OAAQylB,GACN,IAAK,WACH3zB,EAAO,YACP,MACF,IAAK,WACHA,EAAO,YACP,MACF,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,WACHA,EAAO,aACP,MACF,IAAK,WAEHA,EAAO,aAIX,OAAOA,EAGF,SAAS6xB,GAAc1rB,GAC5B,MAAM2tB,EAAa3tB,EAAImB,WAAW,aAC9BnB,EAAI0pB,MAAM,+BACV1pB,EAAImB,WAAW,eACbnB,EAAI0pB,MAAM,sBACV1pB,EAAI0pB,MAEJ,sHAEN,IAAKiE,EACH,OAGF,MAAM7B,EAAiB6B,EAAW,GAC5B/B,EAA4B+B,EAAW,GAE7C,IAAIhC,EACJ,MAAMpmB,EAASooB,EAAW,GACpB9B,GAAWtmB,MAAAA,OAAA,EAAAA,EAAQ3N,QAAQ,SAAU,WAAOoB,EAQlD,OALE2yB,EADoB,WAAlBgC,EAAW,IAAqC,YAAlBA,EAAW,GAC9B3sB,GAAkB4qB,GAElB+B,EAAW,GAGnB,CACL7B,eAAAA,EACAH,WAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAtmB,OAAAA,GCpTJqoB,GAAAA,OAAAA,SAA+C,QAI/C,IACI1C,GAoGGjC,eAAe4E,KAA0B,IAAlBC,EAAkB,wDACzCA,SACGC,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,QAG1B8B,UAEMywB,GAAO2C,UAGR5E,eAAe+E,WACd9C,GAAO8C,aAGR/E,eAAegF,GAAcC,IA4C7BjF,eAAe8E,GACpB1E,IAkFK,SAAS4B,GACdkD,EACA/C,GAEA,OAAOgD,GAAwBD,EAAMjD,GApPrB,MAoP0CE,GAAYiD,OAAMpF,MAAAA,IAC1E,GAAIqB,EAAI5qB,QAAQyB,WAAW,kBAEzB,aADsCmtB,GAAoB,CAAEtuB,IAAKmuB,EAAKnuB,MAS/DouB,GAAwBD,EAAMjD,GA/PzB,MA+P8CE,QAHxD,KASD,SAASmD,GAAWC,EAAYpD,GACrC,OAAOF,GAAOqD,WAAW,CAAEC,KAAAA,EAAMpD,WAAAA,EAAYoB,QzBvPjB,KyB0PvB,SAASiC,GAAoBlpB,GAClC,OAAO2lB,GAAOuD,oBAAoBlpB,GAG7B0jB,eAAeyF,KACpB,MAAMC,QAAiBZ,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,YAAyB,CAChEU,GAAI,IAAIV,EAAAA,IAAAA,iBAGV,KAAKg2B,GAAcA,EAASz0B,MAAM,aAAcvB,EAAAA,IAAAA,MAC9C,OAGF,MAAMwH,EAAOwuB,EAASz0B,MAAM,GAExBiG,EAAKjH,iBAAiBP,EAAAA,IAAAA,QACxB6B,EAAAA,OAAe2F,EAAKjH,MAAMG,GAAG0O,YAAc5H,EAAKjH,OAElDsB,EAAAA,MAAcyE,EAAekB,EAAK9G,GAAI,SAAW8G,EACjD,MAAMyuB,EAAclL,GAAqBiL,GV3PpC,IAAwCE,EAAAA,EU6PdD,EAAYv1B,GV5P3CiT,GAAgBuiB,EOgDX,SAA6BD,GAClC1G,GAAS,CACP,QAAS,oBACT0G,YAAAA,IG0MFE,CAAoBF,GAgDf3F,eAAeqF,GAAf,GAIJ,IAJuC,IACxCtuB,GAGC,EACD,MAAMyrB,EAASC,GAAc1rB,GAE7B,IAAKyrB,EAAQ,OAEb,MAAM,WACJE,EADI,SACQC,EADR,eACkBE,GACpBL,EAEJ,GAAuB,SAAnBK,EACF,OAAO,EAGT,GAAmB,QAAfH,EAAsB,CACxB,MAAMprB,EAAS/F,EAAAA,SAAiBoxB,GAC1BzlB,EAAY5F,EAAOlH,GAEnByF,EAAO,cAAeyB,EAAOf,OAAS,IAAI7G,EAAAA,IAAAA,aAAoB,CAClE0G,UAAWkB,EAAOf,OAAOH,UACzB5C,WAAajC,EAAAA,MAAcyE,EAAesB,EAAOf,OAAOH,UAAW,YAA+B5C,kBAC/FzD,EACCzC,QAAew3B,GACnBjvB,EACI,IAAInG,EAAAA,IAAAA,SAAAA,YAA4B,CAChCo2B,QAASjwB,EACTzF,GAAI,CAAC,IAAIV,EAAAA,IAAAA,eAAsB,CAAEU,GAAI8M,OAErC,IAAIxN,EAAAA,IAAAA,SAAAA,YAA4B,CAChCU,GAAI,CAAC,IAAIV,EAAAA,IAAAA,eAAsB,CAAEU,GAAI8M,QAI3C,IAAK5P,GAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,oBAAqC,OAAO,EAE7E,MAAM+G,EAAUnJ,EAAO4D,SAAS,GAChC,QAAIuF,aAAmB/G,EAAAA,IAAAA,eACvB8G,EAAoBC,GACb,IAGT,OAAO,EChWT,MAAMsvB,GAAa,GAAK,GAAK,EAC7B,IAAI9G,GAMGe,eAAegG,GAAf,GAcJ,IAd8B,MAC/BC,EAD+B,WAE/BC,EAF+B,SAG/BvyB,EAH+B,WAI/BwyB,EAJ+B,iBAK/B/T,EAL+B,wBAM/BgU,GAQC,EACD,MAAM94B,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAChE22B,WAAY,IAAI32B,EAAAA,IAAAA,eAChBu2B,MAAAA,EACAC,WAAAA,EACA1R,SAAU7gB,E1BsHoB,O0BtHY5D,KACtCo2B,GAAc,CAAEG,eAAe,MAE/BC,EAAeJ,QACXrB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CACzD8kB,SAAU7gB,E1BiHkB,O0BjHc5D,UAE1CA,EAEJ,IAAKzC,GAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,mBAC/B,OAGE62B,GACFC,GAAcD,GAEhBC,GAAcl5B,GAEd,MAAMm5B,EAAuB55B,GAC1B05B,EAAeA,EAAar1B,SAAW,IAAIqnB,OAAOjrB,EAAO4D,UACvDhB,IAAIkU,IACJxU,OAAmBwE,SACtB,UAEIsyB,EAAgE,IAChEH,GAAgBI,GAAaJ,MAC9BI,GAAar5B,IAEZ0D,EAAmB,GACnB41B,EAA+C,GAC/CC,EAAyC,GAEzCC,GAAWP,EAAeA,EAAaO,QAAU,IAAIvO,OAAOjrB,EAAOw5B,SAEnEC,EAA6B,GAEnCD,EAAQnyB,SAAS4f,IACf,KACIA,aAAkB7kB,EAAAA,IAAAA,UAEfiE,G1B8EuB,I0B9EX4gB,EAAOC,UACpB7gB,G1B6EwB,I0B7EZ4gB,EAAOC,SAEvB,OAGF,MACMjd,EAAO+c,GAAuBC,EADjBmS,EAAWhQ,GAAWnC,EAAO1e,OACQuc,GAmBxD,GAhBE7a,EAAKnH,KAAOrE,GACTq6B,KACEK,EAAqBlvB,EAAKnH,KAAOg2B,EAAwB7oB,KAAOkpB,EAAqBlvB,EAAKnH,IAAImN,MAEnGhG,EAAKyvB,YAAcZ,EAEnB7uB,EAAKyvB,YAAcP,EAAqBlvB,EAAKnH,IAG/CmH,EAAK0vB,UAAW,EAChBj2B,EAAM6D,KAAK0C,GAEP4uB,GAAc5R,EAAO2S,QACvBH,EAAiBlyB,KAAK0C,EAAKnH,IAGzBmkB,EAAOW,MAAO,CAChB,MAAM,cAAEiS,EAAF,aAAiBC,GX+ItB,SAA2BlS,GAChC,GAAIA,aAAiBxlB,EAAAA,IAAAA,kBACnB,OAGF,MAAM,QACJ+G,EADI,SACKY,EADL,aACe8O,EADf,KAC6B5I,GAC/B2X,EAEJ,MAAO,CACLiS,cAAe1wB,EAAUuN,GAAwBvN,EAASY,QAAYtH,EACtEq3B,aAAcjhB,EACd5I,KAAAA,GW3J0C8pB,CAAkB9S,EAAOW,QAAU,GACvEiS,IACFP,EAAWrvB,EAAKnH,IAAM+2B,GAEpBC,IACFP,EAAetvB,EAAKnH,IAAMg3B,OAKhC,MAAME,EAAUt2B,EAAMd,KAAKqH,GAASA,EAAKnH,MAEnC,MAAEa,EAAF,iBAASmrB,GAAqBF,KAA0BqK,MAAAA,OAAA,EAAAA,EAAct1B,QAAS,IAAIsnB,OAAOjrB,EAAO2D,QAEvG,IAAIs2B,EAOJ,OALEA,EADEj6B,aAAkBoC,EAAAA,IAAAA,SAAAA,aACHpC,EAAO0G,MAEPszB,EAAQx4B,OAGpB,CACLw4B,QAAAA,EACAt2B,MAAAA,EACAC,MAAAA,EACAmrB,iBAAAA,EACAwK,WAAAA,EACAC,eAAAA,EACAE,iBAAkBZ,EAAaY,OAAmBh3B,EAClDw3B,eAAAA,GAIG,SAASC,GAAcjwB,GAC5B,MAAM,GAAEnH,EAAF,WAAMoD,EAAN,YAAkBqI,GAAgBtE,EAIxC,OAFcgB,GAAiBnI,EAAIoD,aAEX9D,EAAAA,IAAAA,aAiO1BswB,eACE5vB,EACAoD,EACAqI,GACmC,MACnC,MAAMvO,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEo2B,QAASvtB,GAAiBnI,EAAIoD,MAGhC,KAAKlG,GAAYA,EAAOm6B,oBAAoB/3B,EAAAA,IAAAA,aAC1C,OAGF,MAAM,MACJ4N,EADI,YAEJoqB,EAFI,eAGJC,EAHI,gBAIJC,EAJI,qBAKJC,EALI,mBAMJC,EANI,kBAOJC,EAPI,oBAQJC,EARI,aASJC,EATI,aAUJC,EAVI,iBAWJC,EAXI,KAYJ1nB,EAZI,QAaJ2X,EAbI,mBAcJgQ,EAdI,cAeJC,EAfI,gBAgBJC,EAhBI,iBAiBJC,EAjBI,QAkBJC,EAlBI,kBAmBJ1oB,EAnBI,WAoBJpN,EApBI,UAqBJ+1B,GACEn7B,EAAOm6B,SAEPgB,aAAqB/4B,EAAAA,IAAAA,QACvB6B,EAAAA,OAAek3B,EAAUr4B,GAAG0O,YAAc2pB,GAG5C,MAAMC,EAAaf,aAA0Bj4B,EAAAA,IAAAA,mBACzCi4B,EAAe9O,UACf9oB,GAEE,QAAE44B,EAAF,MAAW13B,EAAX,iBAAkBmrB,GAAsB4L,SAA6BY,GAAax4B,EAAIoD,IAAgB,IACpGm1B,QAASE,EAAe53B,MAAO63B,EAAa1M,iBAAkB2M,GACpEf,GAAuBnsB,SAAqB+sB,GAAax4B,EAAIoD,EAAY,WACtE,IACGm1B,QAASK,EAAc/3B,MAAOg4B,EAAY7M,iBAAkB8M,GAClElB,GAAuBnsB,SAAqB+sB,GAAax4B,EAAIoD,EAAY,UACtE,GACC2kB,EAAcC,EAAUH,GAAwBG,QAAWroB,EAEjE,IAAIzC,MAAAA,GAAA,UAAAA,EAAQ0D,aAAR,eAAelC,QAAS,EAAG,CAC7B03B,GAAcl5B,GAEd,MAAO,CAAE67B,GAAiB77B,EAAO0D,MAC3BuG,EAAO8e,GAAwB8S,OAAep5B,GAAW,GAC3DwH,GACF0nB,GAAS,CACP,QAAS,aACT7uB,GAAImH,EAAKnH,GACTmH,KAAAA,IAKN,MAAM6xB,EAAe,IAChBhN,KACA2M,KACAG,GAGL,MAAO,CACLjO,SAAU,IACJwN,aAAqB/4B,EAAAA,IAAAA,OAAgB,CAAEqrB,aAAc/qB,EAAcy4B,IACvEnrB,MAAAA,EACAoqB,YAAAA,EACAgB,WAAAA,EACAW,SAAUzB,EAAkB,CAC1B0B,QAAS1B,EACT2B,aAAc1B,QACZ93B,EACJy5B,aAAc1B,EAAqB,CACjC3xB,OAAQH,EAAe8xB,EAAoB,QAC3C2B,aAAc1B,QACZh4B,EACJ25B,eAAgB1B,EAChB2B,kBAAmB1B,EACnB2B,mBAAoBzB,EACpBQ,QAAAA,EACAE,cAAAA,EACAG,aAAAA,EACAa,YAAappB,EAAO5S,OAAO4S,EAAKrQ,SAAML,EACtCm4B,aAAcA,EAAelyB,EAAekyB,EAAc,aAAUn4B,EACpEooB,YAAAA,EACA2R,iBAAkB1B,EAClB2B,SAAU1B,EAAgBpyB,EAAwBoyB,QAAiBt4B,EACnEu4B,gBAAAA,EACA0B,mBAAoBzB,MAAAA,OAAF,EAAEA,EAAkBr4B,KAAKgG,GAAWF,EAAeE,EAAQ,UAC7E+zB,eAAgBzB,EAChBj0B,WAAY7B,EAAae,EAAgBf,QAAc3C,GAEzDkB,MAAO,IAAKA,GAAS,MAAS63B,GAAe,MAASG,GAAc,IACpE7M,iBAAkBgN,EAClBxsB,UAAW6D,EAAO,CAChBtK,OAAQ/F,EACRmQ,UAAU,EACVnQ,GAAIqQ,EAAKrQ,GAAG0O,WACZtL,WAAYiN,MAAAA,OAAF,EAAEA,EAAMjN,WAAWsL,WAC7BkB,aAAc,GACdD,QAAS,EACTD,kBAAmB,EACnBD,gBAAiB,qBACf9P,EACJ+jB,aAAchU,GApVZoqB,CAAmB95B,EAAIoD,EAAaqI,GA+J1CmkB,eAA+B7pB,GAC7B,MAAM7I,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACjEyG,OAAQoC,GAAiBpC,MAG3B,KAAK7I,GAAYA,EAAOm6B,oBAAoB/3B,EAAAA,IAAAA,UAC1C,OAGF82B,GAAcl5B,GAEd,MAAM,MACJgQ,EADI,aAEJ0C,EAFI,eAGJ2nB,EAHI,QAIJvP,EAJI,KAKJ3X,EALI,mBAMJ2nB,EANI,iBAOJG,EAPI,gBAQJD,EARI,UASJG,GACEn7B,EAAOm6B,SAEPgB,aAAqB/4B,EAAAA,IAAAA,QACvB6B,EAAAA,OAAek3B,EAAUr4B,GAAG0O,YAAc2pB,GAG5C,MAAME,EAAUpR,GAAiBvX,GAC3BgpB,EAAeL,EAAUA,EAAQ/4B,QAAO,QAAC,QAAEynB,EAAF,QAAWC,GAAZ,SAA0BD,GAAWC,UAAWvnB,EACxFooB,EAAcC,EAAUH,GAAwBG,QAAWroB,GAC3D,MAAEkB,EAAF,iBAASmrB,GAAqBF,GAAyB5uB,EAAO2D,OAEpE,MAAO,CACLgqB,SAAU,IACJwN,aAAqB/4B,EAAAA,IAAAA,OAAgB,CAAEqrB,aAAc/qB,EAAcy4B,IACvEnrB,MAAAA,EACAqrB,QAAAA,EACAK,aAAAA,EACAU,gBAAgB,EAChBvR,YAAAA,KACIwP,aAA0Bj4B,EAAAA,IAAAA,oBAA6B,CAEzDg5B,WAAYf,EAAe9O,MAE7BgR,YAAappB,MAAAA,OAAF,EAAEA,EAAMrQ,GAAG0O,WACtBgrB,iBAAkB1B,EAClBE,gBAAAA,EACA0B,mBAAoBzB,MAAAA,OAAF,EAAEA,EAAkBr4B,KAAKgG,GAAWF,EAAeE,EAAQ,WAE/EjF,MAAAA,EACAmrB,iBAAAA,EACAxf,UAAW6D,EAAO,CAChBtK,OAAAA,EACAoK,UAAU,EACVnQ,GAAIqQ,EAAKrQ,GAAG0O,WACZtL,WAAYiN,EAAKjN,WAAWsL,WAC5Be,gBAAiB,eACjBC,kBAAmB,EACnBC,QAAS,EACTC,aAAc,SACZjQ,EACJ+jB,aAAc6U,MAAAA,OAAF,EAAEA,EAAS75B,QA3NrBq7B,CAAgB/5B,GAGf4vB,eAAeoK,GAAkB7yB,GACtC,MAAM,GAAEnH,EAAF,WAAMoD,GAAe+D,EAErBjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACrEmG,KAAMsC,GAAe/H,EAAIoD,MAG3B,GAAKlG,EAIL,OT+PK,YAKkC,IALJ,aACnC+8B,EADmC,WAEnCC,EAFmC,WAGnCC,EAHmC,aAInCC,GACuC,EACvC,MAAO,CACLC,eAAgBr2B,QAAQi2B,GACxBK,cAAet2B,QAAQk2B,GACvBK,cAAev2B,QAAQm2B,GACvBK,gBAAiBx2B,QAAQo2B,ISzQpBK,CAAqBv9B,EAAOw9B,UAG9B9K,eAAe+K,GAAf,GAAyD,IAA9B,MAAExjB,GAA4B,EAC9D,MAAMja,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,OAAuB,CAAEs7B,EAAGzjB,KACnE,IAAKja,EACH,OAGFk5B,GAAcl5B,GAEd,MAAM29B,EAAe39B,EAAO49B,UAAUh7B,IAAI+F,GACpCk1B,EAAW79B,EAAO0D,MAAMunB,OAAOjrB,EAAO2D,OACzCf,KAAKgH,GAASmf,GAAwBnf,KACtCtH,OAAgBwE,SACbg3B,EAAW99B,EAAO2D,MAAMf,IAAI8qB,IAAcprB,QAAQsH,GAAS9C,QAAQ8C,KAAUA,EAAKmH,SAExF,MAAO,CACLgtB,WAAYF,EAASv7B,QAAQ07B,GAAML,EAAavlB,SAAS4lB,EAAEl7B,MAC3Dm7B,WAAYH,EAASx7B,QAAQ47B,GAAMP,EAAavlB,SAAS8lB,EAAEp7B,MAC3Dq7B,YAAaN,EAASv7B,QAAQ07B,IAAOL,EAAavlB,SAAS4lB,EAAEl7B,MAC7Ds7B,YAAaN,EAASx7B,QAAQ47B,IAAOP,EAAavlB,SAAS8lB,EAAEp7B,OAI1D4vB,eAAe2L,GAAf,GAIJ,IACGtQ,GAL0B,KAC9BzqB,EAD8B,KACxBsG,GAGL,EAGD,GAAa,SAATtG,GAA4B,SAATA,EAAiB,CACtC,MAAMtD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,SAAsB,CAC3DU,GAAI,CACO,SAATQ,GAAmBsG,EACfqB,GAAiBrB,EAAK9G,GAAI8G,EAAK1D,YAC/B,IAAI9D,EAAAA,IAAAA,kBAGZ,IAAKpC,IAAWA,EAAOwB,OACrB,QAGDusB,GAAW/tB,OACP,GAAa,YAATsD,EAAoB,CAC7B,MAAMtD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,YACvC,IAAKpC,IAAWA,EAAO4J,KACrB,OAGFmkB,EAAU/tB,EAAO4J,KAGnB,MAAMK,EAAO8e,GAAwBgF,EAAmB,YAATzqB,GAC/C,GAAK2G,EAUL,OANA0nB,GAAS,CACP,QAAS,aACT7uB,GAAImH,EAAKnH,GACTmH,KAAAA,IAGK,CAAEpB,OAAQoB,EAAKnH,IAGjB4vB,eAAe4L,GAAf,GAOJ,IAPqC,KACtCr0B,EADsC,iBAEtC6a,EAFsC,iBAGtCyZ,EAHsC,cAItCC,GAGC,EACD,MAAM,GAAE17B,EAAF,WAAMoD,GAAe+D,EAErBjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEq8B,MAAO,CAAC,IAAIr8B,EAAAA,IAAAA,gBAAuB,CACjCmG,KAAMsC,GAAe/H,EAAIoD,SAI7B,IAAKlG,EACH,OAGF,MAAMinB,EAASjnB,EAAOw5B,QAAQ,GAC9B,KAAKvS,GAAYA,aAAkB7kB,EAAAA,IAAAA,QACjC,OAGF,MACM4iB,EADaqU,GAAar5B,GACFopB,GAAWnC,EAAO1e,OAChD,IAAKyc,EACH,OAGFkU,GAAcl5B,GAEd,MAAM0+B,EAAoB5nB,GAAgB9W,EAAO4D,SAAS,IACpD81B,EAAc6E,KAAsBG,GAAsBH,EAAiBtuB,KAAOyuB,EAAkBzuB,MACtGsuB,EACAG,EAEJ/M,GAAS,CACP,QAAS,aACT7uB,GAAAA,EACAmH,KAAM,IACD+c,GAAuBC,EAAQjC,EAAYF,OACzC0Z,GAAiB,CAAE9E,YAAAA,MAKvB,SAASiF,GAAT,GAUJ,IAVuB,KACxB10B,EADwB,KAExB2B,EAFwB,SAGxB7B,EAHwB,aAIxB8O,GAMC,EACD,OAAO2e,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,UAA0B,CACjDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCiD,QAASyC,KACL7B,GAAY,CACdA,SAAUA,EAASnH,IAAI6J,KAEzBoM,aAAAA,KAIG,SAAS+lB,GAAW30B,GACzB,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,UAA0B,CACjDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCiD,QAAS,MA6LNupB,eAAemM,GAAf,GAIJ,IAJwC,KACzC50B,EADyC,QACnCiH,EADmC,iBAC1B4T,GAGd,QACK0S,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,qBAAoC,CAC1DmG,KAAM,IAAInG,EAAAA,IAAAA,gBAAuB,CAC/BmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,cAErCs3B,SAAU,IAAIp7B,EAAAA,IAAAA,wBAA+B,CAAEqlB,UAAWvW,EAAUunB,GAAa,OAGnF9G,GAAS,CACP,QAAS,yBACT9oB,OAAQoB,EAAKnH,GACboO,QAAAA,IAGGotB,GAAkB,CACrBr0B,KAAAA,EACA6a,iBAAAA,EACA0Z,eAAe,IAIZ9L,eAAeoM,GAAf,GAIiD,IAJpB,MAClCr4B,EADkC,MAC3BuJ,EAAQ,GADmB,MACfrM,GAGmC,EACtD,MAAM3D,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACnE28B,WAAW,EACXt4B,MAAAA,EACAuJ,MAAAA,KAMF,KAAMhQ,aAAkBoC,EAAAA,IAAAA,SAKtB,OAGF,MAAM48B,EAAah/B,EAAO0D,MAAM,GAChC,KAAKs7B,GAAgBA,aAAsB58B,EAAAA,IAAAA,SAKzC,OAGF,MAAMo2B,EAAUzP,GAAwBiW,GAExC,GAAIr7B,MAAAA,GAAAA,EAAOnC,OACT,UACQg2B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACtDo2B,QAASvtB,GAAiButB,EAAQ11B,GAAI01B,EAAQtyB,YAC9CvC,MAAOA,EAAMf,KAAI,QAAC,GAAEE,EAAF,WAAMoD,GAAP,SAAwB+E,GAAiBnI,EAAIoD,SAEhE,MAAO6tB,IAKX,OAAOyE,EAGF,SAASyG,GAAT,GAIJ,IAJyB,UAC1Bn2B,EAD0B,WACf5C,GAGV,EACD,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACnDo2B,QAASvtB,GAAiBnC,EAAW5C,MAIlC,SAASg5B,GAAT,GAIJ,IAJ4B,KAC7Bj1B,EAD6B,KACvBL,GAGL,EACD,GAAkB,uBAAdK,EAAK3G,KACT,OAAOk0B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACtDyG,OAAQoC,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACvC0C,OAAQqC,GAAiBrB,EAAK9G,GAAI8G,EAAK1D,eAIpC,SAASi5B,GAAT,GAIJ,IAJwB,OACzBt2B,GAGC,EACD,OAAO2uB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAClDyG,OAAQoC,GAAiBpC,MAItB,SAASu2B,GAAT,GAIJ,IAJ0B,UAC3Bt2B,EAD2B,WAChB5C,GAGV,EACD,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,CACpDo2B,QAASvtB,GAAiBnC,EAAW5C,MAIlC,SAASm5B,GAAT,GAIJ,IAJ2B,UAC5Bv2B,EAD4B,WACjB5C,GAGV,EACD,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACrDo2B,QAASvtB,GAAiBnC,EAAW5C,MAIlCwsB,eAAe4M,GAAf,GAI0B,IAJK,MACpC74B,EADoC,MAC7B9C,GAGwB,EAC/B,MAAM3D,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAChEqE,MAAAA,EACA9C,MAAOA,EAAMf,KAAI,QAAC,GAAEE,EAAF,WAAMoD,GAAP,SAAwB+E,GAAiBnI,EAAIoD,SAMhE,KAAMlG,aAAkBoC,EAAAA,IAAAA,SAKtB,OAGF,MAAMm9B,EAAUv/B,EAAO0D,MAAM,GAC7B,OAAK67B,GAAaA,aAAmBn9B,EAAAA,IAAAA,KAQ9B2mB,GAAwBwW,QAR/B,EAWK7M,eAAe8M,GAAf,GAIJ,IAJiC,OAClC32B,EADkC,WAC1B3C,EAD0B,MACdvD,GAGnB,EACD,MAAM88B,QAAsBzH,GAAWr1B,GACjC+8B,EAAcz0B,GAAiBpC,EAAQ3C,GAE7C,OAAOsxB,GACLkI,aAAuBt9B,EAAAA,IAAAA,aACnB,IAAIA,EAAAA,IAAAA,SAAAA,UAA0B,CAC9Bo2B,QAASkH,EACT/8B,MAAO,IAAIP,EAAAA,IAAAA,uBAA8B,CACvC61B,KAAMwH,MAGR,IAAIr9B,EAAAA,IAAAA,SAAAA,cAA8B,CAClCyG,OAAQ62B,EACR/8B,MAAO,IAAIP,EAAAA,IAAAA,uBAA8B,CACvC61B,KAAMwH,OAOT/M,eAAeiN,GAAf,GAMJ,IANoC,KACrC11B,EADqC,eAErC21B,GAIC,EACD,MAAM,GAAE98B,EAAF,WAAMoD,GAAe+D,QAEMutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACjFmG,KAAM,IAAInG,EAAAA,IAAAA,gBAAuB,CAC/BmG,KAAMsC,GAAe/H,EAAIoD,KAE3B0zB,OAAQgG,QAAkBn9B,MAI1BkvB,GAAS,CACP,QAAS,mBACT7uB,GAAImH,EAAKnH,GACT+8B,SAAUD,IAKT,SAASE,GAAT,GAIJ,IAJgC,KACjC71B,EADiC,SAC3Bid,GAGL,EACD,MAAM,GAAEpkB,EAAF,WAAMoD,GAAe+D,EAE3B,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,gBAA+B,CACtD29B,YAAa,CAAC,IAAI39B,EAAAA,IAAAA,gBAAuB,CACvCmG,KAAMsC,GAAe/H,EAAIoD,GACzBghB,SAAAA,QAKCwL,eAAesN,KACpB,MAAMhgC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAEvC,IAAKpC,EACH,OAGF,MAAMigC,EAAwBjgC,EAAOkgC,WAAWC,GAAMA,aAAa/9B,EAAAA,IAAAA,sBAC7DrD,EAAgBiB,EAAOsC,QAAQ89B,GAAkCA,aAAch+B,EAAAA,IAAAA,eAC/Ei+B,EAAathC,EAAc6D,KAAI,QAAC,GAAEE,GAAH,SAAYA,KAIjD,OAH+B,IAA3Bm9B,GACFI,EAAWC,OAAOL,EAAuB,E1BvjBhB,G0ByjBpB,CACLM,KAAMhhC,EACJR,EACG6D,IAAIsnB,IAAqB,MAE9BmW,WAAAA,GAIG3N,eAAe8N,KACpB,MAAMp0B,QAAgBorB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,2BAExC,GAAKgK,EAIL,OAAOA,EAAQxJ,IAAI8nB,IAAiCpoB,OAAOwE,SAGtD4rB,eAAe+N,GAAf,GAMJ,IANkC,GACnC39B,EADmC,aAEnC49B,GAIC,EACD,MAAMp+B,Eb7jBD,SAAkCq+B,GACvC,MAAM,SACJC,EADI,SAEJC,EAFI,YAGJC,EAHI,OAIJC,EAJI,SAKJ7hC,EALI,KAMJ8hC,EANI,gBAOJC,EAPI,aAQJC,EARI,YASJC,EATI,cAUJ/W,EAVI,gBAWJE,EAXI,gBAYJE,GACEmW,EAEEtW,EAAcD,EAChBA,EAAcxnB,IAAIoI,IAA2B1I,OAA6BwE,SAC1E,GAEEyjB,EAAeD,EACjBA,EAAgB1nB,IAAIoI,IAA2B1I,OAA6BwE,SAC5E,GAEE2jB,EAAeD,EACjBA,EAAgB5nB,IAAIoI,IAA2B1I,OAA6BwE,SAC5E,GAEJ,OAAO,IAAI1E,EAAAA,IAAAA,aAAoB,CAC7BU,GAAI69B,EAAO79B,GACX2D,MAAOk6B,EAAOl6B,MACdm6B,SAAUA,QAAYn+B,EACtBo+B,SAAUA,QAAYp+B,EACtBq+B,YAAaA,QAAer+B,EAC5Bs+B,OAAQA,QAAUt+B,EAClBu+B,KAAMA,QAAQv+B,EACdw+B,gBAAiBA,QAAmBx+B,EACpCy+B,aAAcA,QAAgBz+B,EAC9B0+B,YAAaA,QAAe1+B,EAC5B0nB,WAAYjrB,QAAYuD,EACxB4nB,YAAAA,EACAE,aAAAA,EACAE,aAAAA,IamhBa2W,CAAyBV,SAEPlJ,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,mBAAmC,CACpFU,GAAAA,EACAR,OAAAA,MAIAqvB,GAAS,CACP,QAAS,mBACT7uB,GAAAA,EACA69B,OAAQD,IAKPhO,eAAe2O,GAAiBv+B,GACrC,MAAMw+B,QAA2B9J,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,mBAAmC,CACpFU,GAAAA,EACAR,YAAQG,KAEJ8+B,QAA+Bf,KAEjCc,GACF3P,GAAS,CACP,QAAS,mBACT7uB,GAAAA,EACA69B,YAAQl+B,IAGR8+B,GACF5P,GAAS,CACP,QAAS,+BACT6P,QAASD,IAKR7O,eAAe+O,GAAf,GAIJ,IAJsC,KACvCx3B,EADuC,cACjC+d,GAGL,EACD,MAAM,GAAEllB,EAAF,WAAMoD,GAAe+D,QAEMutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CAClFmG,KAAM,IAAInG,EAAAA,IAAAA,gBAAuB,CAC/BmG,KAAMsC,GAAe/H,EAAIoD,KAE3BuX,OAAQuK,QAAiBvlB,MAIzBkvB,GAAS,CACP,QAAS,aACT7uB,GAAImH,EAAKnH,GACTmH,KAAM,CAAE+d,cAAAA,KAKP0K,eAAegP,GAAqBjiB,GAKzC,OAAOkiB,SAJcnK,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,CAClE2L,MAAO0R,MAMJiT,eAAekP,GAAkBntB,GAKtC,OAAOktB,SAJcnK,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACrEqS,SAAAA,MAMJ,SAASktB,GAAoB3hC,GAC3B,IAAKA,EACH,OAGF,MAAM,MAAE2D,EAAF,MAASD,GAAU1D,EAEnBiK,EAAOvG,EAAMlC,OACfunB,GAAwBrlB,EAAM,IAC9BqlB,GAAwBplB,EAAM,IAElC,OAAKsG,GAILivB,GAAcl5B,GAEPiK,QANP,EASK,SAAS43B,GAAT,GAEmC,IAFH,KACrC53B,EADqC,UAC/B63B,GACkC,EACxC,MAAM,GAAEh/B,EAAF,WAAMoD,GAAe+D,EACrBuuB,EAAUvtB,GAAiBnI,EAAIoD,GAErC,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,uBAAuC,CAC9Do2B,QAASA,EACTuJ,QAASD,KAIN,SAASE,GAAT,GAEkD,IAFX,KAC5C/3B,EAD4C,aACtCmE,GACiD,EACvD,MAAM,GAAEtL,EAAF,WAAMoD,GAAe+D,EACrB1B,EAAOsC,GAAe/H,EAAIoD,GAEhC,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,4BAA4C,CACnEmG,KAAAA,EACA6F,aAAcD,GAAsBC,MAIjC,SAAS6zB,GAAT,GAEqF,IAF/C,KAC3Ch4B,EAD2C,KACrCL,EADqC,aAC/BwE,EAD+B,UACjBC,GACgE,EAC1F,MAAMmqB,EAAUvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACzC4J,EAAcjF,GAAejB,EAAK9G,GAAI8G,EAAK1D,YAEjD,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAClDo2B,QAAAA,EACA1oB,YAAAA,EACA1B,aAAcD,GAAsBC,EAAcC,MAI/C,SAAS6zB,GAAT,GAEoF,IAF3D,KAC9Bj4B,EAD8B,KACxBL,EADwB,YAClB2E,EADkB,YACLsb,EAAc,IACkD,EACzF,MAAM2O,EAAUvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACzC0C,EAASqC,GAAiBrB,EAAK9G,GAAI8G,EAAK1D,YAE9C,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,UAA0B,CACjDo2B,QAAAA,EACA5vB,OAAAA,EACA2F,YAAaD,GAAqBC,GAClCub,KAAMD,KAIH6I,eAAeyP,GAAgBl4B,EAAexD,GACnD,MAAMi5B,EAAcz0B,GAAiBhB,EAAKnH,GAAImH,EAAK/D,kBAC7CsxB,GACJkI,aAAuBt9B,EAAAA,IAAAA,aACnB,IAAIA,EAAAA,IAAAA,SAAAA,UAA0B,CAC9Bo2B,QAASkH,EACTj5B,MAAAA,IACG,IAAIrE,EAAAA,IAAAA,SAAAA,cAA8B,CACrCyG,OAAQ62B,EACRj5B,MAAAA,KAMDisB,eAAe0P,GAAgBn4B,EAAe+F,SAC9BwnB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACnEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnC8J,MAAAA,MAOF2hB,GAAS,CACP,QAAS,qBACT7uB,GAAImH,EAAKnH,GACT6qB,SAAU,CACR3d,MAAAA,KAKC,SAASqyB,GAAT,GAEmC,IAFT,KAC/Bp4B,EAD+B,UACzB63B,GACkC,EACxC,MAAM,GAAEh/B,EAAF,WAAMoD,GAAe+D,EACrBuuB,EAAUvtB,GAAiBnI,EAAIoD,GAErC,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CACxDo2B,QAASA,EACTuJ,QAASD,KASNpP,eAAe4I,GACpBzyB,EACA3C,GAGA,IACI5D,EAHJggC,EAEA,uDAFqC,SACrCv1B,EACA,uCAGA,OAAQu1B,GACN,IAAK,SACHhgC,EAAS,IAAIF,EAAAA,IAAAA,0BAAiC,CAAEs7B,EAAG,KACnD,MACF,IAAK,QACHp7B,EAAS,IAAIF,EAAAA,IAAAA,0BACb,MACF,QACEE,EAAS,IAAIF,EAAAA,IAAAA,0BAIjB,MAAMpC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACrEo2B,QAASvtB,GAAiBpC,EAAQ3C,GAClC5D,OAAAA,EACAyK,OAAAA,EACA4rB,M1B77B8B,O0Bg8BhC,IAAK34B,GAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,+BAC/B,OAGF82B,GAAcl5B,GACd,MAAM,MAAE2D,EAAF,iBAASmrB,GAAqBF,GAAyB5uB,EAAO2D,OAEpE,MAAO,CACL03B,QAASpR,GAAiBjqB,GAC1B2D,MAAAA,EACAmrB,iBAAAA,GAIG4D,eAAe6P,KACpB,MAAMviC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,wBAEvC,GAAKpC,EAML,OAFAk5B,GAAcl5B,GAEPA,EAAO0D,MAAMd,KAAKqH,GAAS8e,GAAwB9e,KAGrD,SAASu4B,GAAT,GAMJ,IANgC,QACjChK,EADiC,KAEjCvuB,GAIC,EACD,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,mBAAmC,CAC1D28B,UAAWl0B,GAAe2tB,EAAQ11B,GAAI01B,EAAQtyB,YAC9Cu8B,MAAOx4B,EAAOY,GAAeZ,EAAKnH,GAAImH,EAAK/D,YAAc,IAAI9D,EAAAA,IAAAA,qBAI1DswB,eAAegQ,GAAYz4B,GAChC,MAAMjK,QAAew3B,GACnB,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CAAEyG,OAAQoC,GAAiBhB,EAAKnH,OAQlE,GAAK9C,GAAYA,aAAkBoC,EAAAA,IAAAA,QAWnC,OAFA82B,GAAcl5B,GAEP+oB,GAAwB/oB,EAAO0D,MAAM,IAGvCgvB,eAAeiQ,GAAiB/S,GACrC,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CAAEwtB,KAAAA,KAEzE,IAAK5vB,EACH,OAGF,IAAIiK,EAEJ,GAAIjK,aAAkBoC,EAAAA,IAAAA,WAAmB,CACvC,MAAM,MACJO,EADI,kBACG6P,EADH,MACsB/L,EADtB,QAC6B+xB,EAD7B,cACsC5M,EADtC,MACqD5b,EADrD,UAC4DmZ,GAC9DnpB,EAEA2C,aAAiBP,EAAAA,IAAAA,OACnBoH,EAAkBxJ,EAAO2C,OAG3BgvB,GAAS,CACP,QAAS,aACTlqB,KAAM,CACJhB,MAAAA,EACAuJ,MAAAA,EACA4f,KAAAA,EACApd,kBAAAA,EACAowB,UAAWpK,IAAYrP,EACvB4C,gBAAiBH,KACbjpB,aAAiBP,EAAAA,IAAAA,OAAgB,CAAEO,MAAOD,EAAcC,YAIhEsH,EAAO8e,GAAwB/oB,EAAOiK,MAElCA,GACF0nB,GAAS,CACP,QAAS,aACT7uB,GAAImH,EAAKnH,GACTmH,KAAAA,IAKN,OAAKA,EAIE,CAAEpB,OAAQoB,EAAKnH,SAJtB,EAOK4vB,eAAemQ,GAAe54B,EAAetG,GAClD,IACE,MAAkB,oBAAdsG,EAAK3G,MAA4C,uBAAd2G,EAAK3G,WAC7Bk0B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CAC7Do2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCvC,MAAOA,EAAMf,KAAKgH,GAASqB,GAAiBrB,EAAK9G,GAAI8G,EAAK1D,uBAIjDsvB,QAAQsN,IAAIn/B,EAAMf,KAAKgH,GAC3B4tB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACnDyG,OAAQoC,GAAiBhB,EAAKnH,IAC9B8F,OAAQqC,GAAiBrB,EAAK9G,GAAI8G,EAAK1D,kBAG3C,MAAO6tB,GAEP,QAIG,SAASgP,GAAiB94B,EAAeL,GAC9C,MAAkB,oBAAdK,EAAK3G,MAA4C,uBAAd2G,EAAK3G,KACnC2+B,GAA6B,CAClCh4B,KAAAA,EACAL,KAAAA,EACAwE,aAAc,CACZ40B,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAc,EACdC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,YAAY,EACZC,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,aAAa,GAEft1B,UAAWoqB,KAGNjB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACtDyG,OAAQoC,GAAiBhB,EAAKnH,IAC9B8F,OAAQqC,GAAiBrB,EAAK9G,GAAI8G,EAAK1D,eAKtC,SAAS09B,GAAiB35B,EAAe63B,GAC9C,OAAOtK,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CACxDo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxC67B,QAASD,KAIN,SAAS+B,GAAkB55B,EAAe63B,GAC/C,OAAOtK,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACzDo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxC67B,QAASD,KAIb,SAASzI,GACPr5B,GAEA,MAAM8jC,EAA2D,GAUjE,OARA9jC,EAAO0D,MAAM2D,SAAS4C,IACpB65B,EAAO,OAAM75B,EAAKnH,MAAQmH,KAG5BjK,EAAO2D,MAAM0D,SAASuC,IACpBk6B,EAAO,OAAMl6B,EAAK9G,MAAQ8G,KAGrBk6B,EAGT,SAAS5K,GAAcl5B,GAMjB,UAAWA,GACb8J,EAA+B9J,EAAO2D,OAGpC,UAAW3D,GACb8J,EAA+B9J,EAAO0D,OAGpC,aAAc1D,GAChBA,EAAO4D,SAASyD,SAAS8B,IACnBA,aAAmB/G,EAAAA,IAAAA,SAAkByL,GAAmB1E,IAC1DD,EAAoBC,MAMrBupB,eAAeqR,GAAf,GAA4D,IAA5B,KAAEnU,GAA0B,EACjE,MAAMoU,QAAgBxM,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CAAEwtB,KAAAA,KAC3E,GAAMoU,aAAmB5hC,EAAAA,IAAAA,SAAoB4hC,EAAQtgC,MAAMlC,OAI3D,OAAOunB,GAAwBib,EAAQtgC,MAAM,IAGxC,SAASugC,GAAT,GAIJ,IAJqC,KACtCh6B,EADsC,iBAChCuyB,GAGL,EACD,OAAOhF,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,0BAA0C,CACjEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnC40B,mBAAoB0B,KAIjB,SAAS0H,GAAT,GAEqC,IAFV,KAChCj6B,EADgC,YAC1B4S,GACoC,EAC1C,MAAM,GAAE/Z,EAAF,WAAMoD,GAAe+D,EAE3B,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CACxDmG,KAAMsC,GAAe/H,EAAIoD,GACzB67B,QAASllB,K,yHCloCN6V,eAAeyR,GAAU1gB,EAAiBtE,GAC/C,MAAMsU,QANDf,eAAyBjP,GAE9B,aADuBkP,MAAMlP,IACbgQ,OAIG2Q,CAAU3gB,GAC7B,OAzDK,SAAoBgQ,EAAYtU,GACrC,OAAO,IAAIklB,KAAK,CAAC5Q,GAAOtU,EAAU,CAChCmlB,aAAc7yB,KAAKqE,MACnBxS,KAAMmwB,EAAKnwB,OAsDNihC,CAAW9Q,EAAMtU,GA5GN,oBAATklB,OAET5+B,KAAK4+B,KAAO,cAAc7Q,KAGxBgR,YAAYC,EAAsBtlB,EAAkBulB,GAClD,GAAIA,EAAS,CACX,MAAM,KAAEphC,KAASrC,GAASyjC,EAC1BC,MAAMF,EAAU,CAAEnhC,KAAAA,IAFP,uBAGXa,OAAOC,OAAOwgC,KAAM3jC,QAEpB0jC,MAAMF,GADD,uBAIPG,KAAKnY,KAAOtN,K,uBCoDlB,IAAIwS,GAMGe,eAAemS,GAAf,GAUJ,IAViC,KAClC56B,EADkC,SAElCsa,KACGugB,GAOF,EACD,MAAMC,GnBybsB,ImBzbPxgB,EAA8BniB,EAAAA,IAAAA,SAAAA,WAA6BA,EAAAA,IAAAA,SAAAA,WAChF,IAAIpC,EAEJ,IACEA,QAAew3B,GAAc,IAAIuN,EAAa,CAC5Cx8B,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,gBnBobX,ImBnbpBqe,GAA+B,CACjC5U,MAAO4U,MAENugB,KAEL,MAAO/Q,GACa,oBAAhBA,EAAI5qB,SACNwoB,GAAS,CACP,QAAS,aACT7uB,GAAImH,EAAKnH,GACTmH,KAAM,CACJoe,cAAc,KAMtB,IACGroB,GACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,SAEX,OAGFs1B,GAAcl5B,GAEd,MAAM4D,EAAW5D,EAAO4D,SAAShB,IAAIkU,IAAiBxU,OAAmBwE,SACnEnD,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACvDpD,EAAQ1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SAC5Em+B,EAAcrhC,EAAShB,KAAI,QAAC,WAAE8Z,GAAH,SAAoBA,KAAYpa,OAAsBwE,SAEvF,MAAO,CACLlD,SAAAA,EACAD,MAAAA,EACAD,MAAAA,EACAuhC,YAAAA,GAIGvS,eAAewS,GAAf,GAAuF,IAA3D,KAAEj7B,EAAF,UAAQ2F,GAAmD,EAC5F,MAAMgzB,EAA2C,YAA/Bn4B,GAAkBR,EAAKnH,IAEzC,IAAI9C,EACJ,IACEA,QAAew3B,GACboL,EACI,IAAIxgC,EAAAA,IAAAA,SAAAA,YAA4B,CAChCo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCpD,GAAI,CAAC,IAAIV,EAAAA,IAAAA,eAAsB,CAAEU,GAAI8M,OAErC,IAAIxN,EAAAA,IAAAA,SAAAA,YAA4B,CAChCU,GAAI,CAAC,IAAIV,EAAAA,IAAAA,eAAsB,CAAEU,GAAI8M,QAK3C,MAAOmkB,GACP,MAAM,QAAE5qB,GAAY4qB,EAIJ,oBAAZ5qB,GACFwoB,GAAS,CACP,QAAS,QACTwT,MAAO,CACLh8B,QAAAA,EACAi8B,YAAY,EACZC,aAAa,KAMrB,IAAKrlC,GAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,oBAC/B,OAGF,MAAM4G,EAAahJ,EAAO4D,SAAS,GACnC,IAAKoF,EACH,OAGF,GAAIA,aAAsB5G,EAAAA,IAAAA,aACxB,MnBkW2B,kBmB/V7B,MAAM+G,EAAUH,GAAc8N,GAAgB9N,GAC9C,OAAKG,GAIDH,aAAsB5G,EAAAA,IAAAA,SACxB8G,EAAoBF,GAKf,CAAEG,QAAAA,EAASxF,MAFJ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,gBAR7D,EAaF,IAAIw+B,GAAQ9P,QAAQ1D,UAEb,SAASyT,GAAT,EAoCL1Q,GACA,IApCA,KACE5qB,EADF,KAEE2B,EAFF,SAGE7B,EAHF,WAIEy7B,EAJF,gBAKEC,EALF,WAMEliB,EANF,QAOEhM,EAPF,IAQEuV,EARF,KASEzhB,EATF,QAUEmM,EAVF,SAWEkuB,EAXF,YAYEC,EAZF,UAaEnqB,EAbF,UAcEoqB,EAdF,OAeEC,EAfF,iBAgBE/gB,GAoBF,EAEA,MAAMghB,Eb84BD,SACL77B,EACA2B,EACA7B,EACAy7B,EACAC,EACAliB,EACAhM,EACAuV,EACAzhB,EACAmM,EACAgE,EACAmqB,EACAE,GAEY,IADZ/gB,EACY,0DADO,EAEnB,MAAMb,EAAUrO,KACVvM,EAAQka,GAAcD,GAAoBC,GAC1Cqf,EAA0B,oBAAd34B,EAAK3G,KAEvB,MAAO,CACLR,GAAImhB,EACJpb,OAAQoB,EAAKnH,GACbsU,QAAS,IACHxL,GAAQ,CACVA,KAAM,CACJA,KAAAA,EACA7B,SAAAA,OAGDV,KACCkO,GAAW,CAAEA,QAAAA,MACbuV,GAAO,CAAElc,MAAOkc,MAChBzhB,GAAQ2Y,GAAa3Y,EAAM4Y,MAC3BzM,GAAW,CAAEA,QAAAA,IAEnBvH,KAAM01B,GAAeznC,KAAKC,MAAMsT,KAAKqE,MAAQ,KAAQgP,EACrD9N,YAAa4rB,EACbjrB,UAAUkuB,MAAAA,OAAA,EAAAA,EAAQ/iC,KAAMiT,MACpByvB,GAAc,CAAEtpB,iBAAkBspB,MAClCC,GAAmB,CAAErpB,oBAAqBqpB,MAC1CjqB,GAAa,CACfA,UAAAA,KACInS,IAAUA,EAAM1G,OAAS0G,EAAMuH,QAAU,CAAE6K,WAAW,OAExDkqB,GAAe,CAAEI,aAAa,Ia37BfC,CACnB/7B,EACA2B,EACA7B,EACAy7B,EACAC,EACAliB,EACAhM,EACAuV,EACAzhB,EACAmM,EACAgE,EACAmqB,EACAE,EACA/gB,GAGF6M,GAAS,CACP,QAASmU,EAAaC,YAAc,sBAAwB,aAC5DjjC,GAAIgjC,EAAahjC,GACjB+F,OAAQoB,EAAKnH,GACbqG,QAAS,IACJ28B,EACHG,aAAc,gCAMlBC,YAAW,QArMa,KAyNxB,MAAM5vB,EAAW5J,KAGjB,OAFAzI,EAAAA,cAAsB1D,OAAO+V,IAAawvB,EAEtCtqB,EAyFN,WAsBElF,EACAwvB,EACAjR,GACA,IAxBA,KACE5qB,EADF,KAEE2B,EAFF,SAGE7B,EAHF,WAIEy7B,EAJF,WAKEjiB,EALF,UAME/H,EANF,SAOEkqB,EAPF,YAQEC,EARF,OASEE,GAeF,EACIM,GAAc,EACbC,GAAe5qB,KAClB4qB,GAAe5qB,GAAa,CAC1B6qB,QAAS,EACTC,mBAAoB,KAIxBH,EAAaC,GAAe5qB,GAAW6qB,UAEvC,MAAME,EAAYjB,GA6DlB,OA5DAA,GAAQ,WACN,IAAIj8B,EACJ,IACEA,QAkKNqpB,eAA2BoT,EAA0BviB,EAA2BsR,GAC9E,MAAM,SACJrR,EADI,QACMC,EADN,SACerjB,EADf,MACyBujB,EADzB,MACgC1E,EADhC,MACuCvD,EADvC,eAC8CgI,GAChDH,EAEEijB,EAAoCC,IACpC5R,EAAW6R,WACbF,EAAkBE,YAAa,EAE/B7R,EAAW4R,EAAUX,EAAahjC,KAIhCm1B,QAAakM,GAAU1gB,EAASD,GAChCmjB,QAAkB3O,GAAWC,EAAMuO,GAEnCI,EAAYljB,SAAwBygB,GAAUzgB,EAAgBF,GAC9DvhB,EAAQ2kC,QAAkB5O,GAAW4O,QAAankC,EAElDmC,EAA6C,CAAC,IAAIxC,EAAAA,IAAAA,0BAAiC,CAAE+c,SAAUqE,KACrG,GAAIG,EAAO,CACT,GAAIrlB,EAA8B8jB,IAAIhiB,GACpC,OAAO,IAAIgC,EAAAA,IAAAA,wBAA+B,CAAE61B,KAAM0O,IAGpD,GAAIpoC,EAAAA,IAAkC6B,GAAW,CAC/C,MAAM,MAAEe,EAAF,OAASC,EAAT,SAAiB4S,GAAa2P,OACnBlhB,IAAbuR,GACFpP,EAAW2C,KAAK,IAAInF,EAAAA,IAAAA,uBAA8B,CAChD4R,SAAAA,EACAnS,EAAGV,EACHW,EAAGV,EACH2gB,mBAAmB,MAM3B,GAAIrG,EAAO,CACT,MAAM,SAAE1H,EAAF,MAAYvN,EAAZ,UAAmBod,GAAcnI,EACvC9W,EAAW2C,KAAK,IAAInF,EAAAA,IAAAA,uBAA8B,CAChD4R,SAAAA,EACAvN,MAAAA,EACAod,UAAAA,KAIJ,GAAI5E,EAAO,CACT,MAAM,SAAEjL,EAAF,SAAYsL,GAAaL,GACvBxX,KAAMmc,GAAkBpc,EAAiB8X,EA/iBvB,IAgjB1B1a,EAAW2C,KAAK,IAAInF,EAAAA,IAAAA,uBAA8B,CAChD6c,OAAO,EACPjL,SAAAA,EACAsL,SAAU/U,GAAOC,KAAKoZ,MAI1B,OAAO,IAAIxhB,EAAAA,IAAAA,2BAAkC,CAC3C61B,KAAM0O,EACNvmC,SAAAA,EACAwE,WAAAA,EACA3C,MAAAA,IA/NgB4kC,CAAYf,EAAcviB,EAAYsR,GACpD,MAAOd,GAUP,OAJAqS,GAAe5qB,GAAW6qB,qBAEpBE,EAKR,MAAMO,QA8CVpU,eACEnqB,EACAw+B,GAEA,MAAMC,QAAqBxP,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACvEmG,KAAAA,EACAc,MAAO09B,KAGT,GACEC,aAAwB5kC,EAAAA,IAAAA,mBACrB4kC,EAAarkC,OACbqkC,EAAarkC,iBAAiBP,EAAAA,IAAAA,MACjC,CACA,MAAQO,OAAO,GAAEG,EAAF,WAAMoD,EAAN,cAAkB+gC,IAAoBD,EAErD,OAAO,IAAI5kC,EAAAA,IAAAA,gBAAuB,CAChCU,GAAI,IAAIV,EAAAA,IAAAA,WAAkB,CAAEU,GAAAA,EAAIoD,WAAAA,EAAY+gC,cAAAA,MAIhD,GACED,aAAwB5kC,EAAAA,IAAAA,sBACrB4kC,EAAaxiC,UACbwiC,EAAaxiC,oBAAoBpC,EAAAA,IAAAA,SACpC,CACA,MAAQoC,UAAU,GAAE1B,EAAF,WAAMoD,EAAN,cAAkB+gC,IAAoBD,EAExD,OAAO,IAAI5kC,EAAAA,IAAAA,mBAA0B,CACnCU,GAAI,IAAIV,EAAAA,IAAAA,cAAqB,CAAEU,GAAAA,EAAIoD,WAAAA,EAAY+gC,cAAAA,OA3ExBC,CACvBr8B,GAAeZ,EAAKnH,GAAImH,EAAK/D,YAC7BmD,GAKF,SAFMk9B,GAEDO,EAQH,YAPAV,GAAe5qB,GAAW6qB,UAiB5B,GAPAD,GAAe5qB,GAAW8qB,mBAAmBH,GAAc,IAAI/jC,EAAAA,IAAAA,iBAAwB,CACrFiH,MAAOy9B,EACPxwB,SAAAA,EACAnN,QAASyC,GAAQ,GACjB7B,SAAUA,EAAWA,EAASnH,IAAI6J,SAAyBhK,IAGzD0B,OAAOpE,KAAKqmC,GAAe5qB,GAAW8qB,oBAAoB9kC,OAAS4kC,GAAe5qB,GAAW6qB,QAC/F,OAGF,MAAM,mBAAEC,GAAuBF,GAAe5qB,UACvC4qB,GAAe5qB,SAEhBgc,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACrDw8B,YAAY,EACZr2B,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCihC,WAAYhjC,OAAOijC,OAAOd,GAC1BztB,aAAc2sB,KACVE,GAAY,CAAEle,OAAQke,MACtBC,GAAe,CAAE/yB,aAAc+yB,MAC/BE,GAAU,CAAEA,OAAQh7B,GAAeg7B,EAAO/iC,GAAI+iC,EAAO3/B,iBAxDrD,GA4DDo/B,GAzLE+B,CAAiB,CACtBp9B,KAAAA,EAAM2B,KAAAA,EAAM7B,SAAAA,EAAUy7B,WAAAA,EAAYjiB,WAAYA,EAAa/H,UAAAA,EAAWkqB,SAAAA,EAAUC,YAAAA,GAC/ErvB,EAAUwvB,EAAcjR,GAGtBiR,EAsDF,SAASwB,GAAT,GAYL,IAXA,OACEz+B,EADF,eAEE0+B,EAFF,wBAGEC,EAHF,qBAIEC,GAOF,EACA9V,GAAS,CACP,QAAS6V,EAA0B,sBAAwB,aAC3D1kC,GAAIykC,EACJ1+B,OAAQA,EACRM,QAAS,CACP88B,aAAcwB,OAAuBhlC,EAAY,+BAMvD,MAAM2jC,GAGD,GA0IE1T,eAAegV,GAAf,GAcJ,IAd+B,KAChCz9B,EADgC,QAEhCd,EAFgC,KAGhCyC,EAHgC,SAIhC7B,EAJgC,UAKhC67B,EALgC,iBAMhC9gB,GAQC,EACD,MAAMihB,EAA6B,IAAf58B,EAAQ8G,KAAcwB,KAAKqE,MAA2B,IAAnBgP,EACjD6iB,EAAqC,CACzCvwB,QAAS,IACJjO,EAAQiO,WACPxL,GAAQ,CACVA,KAAM,CACJA,KAAAA,EACA7B,SAAAA,MAMR4nB,GAAS,CACP,QAASoU,EAAc,yBAA2B,gBAClDjjC,GAAIqG,EAAQrG,GACZ+F,OAAQoB,EAAKnH,GACbqG,QAASw+B,IAIX1jC,EAAAA,cAAsBkF,EAAQrG,IAAM,IAAKqG,KAAYw+B,GAErD,MAAMC,EAAc79B,GAAYA,EAASnH,IAAI6J,UAEvC+qB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CAClD+G,QAASyC,GAAQ,GACjB7B,SAAU69B,EACVr/B,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCpD,GAAIqG,EAAQrG,MACRijC,GAAe,CAAEnzB,aAAczJ,EAAQ8G,SACvC21B,GAAa,CAAEiC,UAAWjC,MAI3BlT,eAAeoV,GAAf,GAQJ,IARqC,KACtC79B,EADsC,QAEtCd,EAFsC,YAGtCw8B,GAKC,QACKnO,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CAClDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCpD,GAAIqG,EAAQrG,GACZ8P,aAAc+yB,KAqEXjT,eAAeqV,GAAf,GAE2F,IAFjE,KAC/B99B,EAD+B,UACzB2F,EADyB,QACdo4B,EADc,UACLC,EADK,SACMvC,GAC2D,QAC1FlO,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CAC1DmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCpD,GAAI8M,KACAo4B,GAAW,CAAEE,OAAO,MACpBD,GAAa,CAAEE,WAAW,MAC1BzC,GAAY,CAAEle,QAAQ,MAIvBkL,eAAe0V,GAAf,GAA6D,IAA7B,KAAEn+B,GAA2B,QAC5DutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CACvDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAIhCwsB,eAAe2V,GAAf,GAIJ,IAJkC,KACnCp+B,EADmC,WAC7Bq+B,EAD6B,mBACjBC,GAGjB,EACD,MAAM3F,EAA2C,YAA/Bn4B,GAAkBR,EAAKnH,UAEpB00B,GACnBoL,EACI,IAAIxgC,EAAAA,IAAAA,SAAAA,eAA+B,CACnCo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCpD,GAAIwlC,IAEJ,IAAIlmC,EAAAA,IAAAA,SAAAA,eAA+B,CACnCU,GAAIwlC,KACAC,GAAsB,CAAEC,QAAQ,OAQ1C7W,GAAS,CACP,QAAS,iBACT8W,IAAKH,KACD1F,GAAa,CAAE/5B,OAAQoB,EAAKnH,MAI7B4vB,eAAegW,GAAf,GAIJ,IAJ2C,KAC5Cz+B,EAD4C,WACtCq+B,GAGL,QACoB9Q,GACnB,IAAIp1B,EAAAA,IAAAA,SAAAA,wBAAwC,CAC1CmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCpD,GAAIwlC,MAQR3W,GAAS,CACP,QAAS,0BACT8W,IAAKH,EACLz/B,OAAQoB,EAAKnH,KAIV4vB,eAAeiW,GAAf,GAIJ,IAJiC,KAClC1+B,EADkC,mBAC5Bs+B,EAD4B,MACRpkB,GAGzB,EACD,MAAMye,EAA2C,YAA/Bn4B,GAAkBR,EAAKnH,UACpB00B,GACnBoL,EACI,IAAIxgC,EAAAA,IAAAA,SAAAA,cAA8B,CAClCo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCie,MAAAA,IAEA,IAAI/hB,EAAAA,IAAAA,SAAAA,cAA8B,CAClCmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAC/BqiC,GAAsB,CAAEC,QAAQ,OAC/BD,GAAsB,CAAEK,YAAY,GACzCzkB,MAAAA,MAQNwN,GAAS,CACP,QAAS,gBACT9oB,OAAQoB,EAAKnH,KAIV4vB,eAAemW,GAAf,GAIJ,IAJkC,KACnCtgC,EADmC,WAC7B+/B,EAD6B,OACjBx5B,EADiB,YACTqR,GAGzB,EAQD,aAPqBqX,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,OAAuB,CAC5DmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnCpD,GAAIwlC,EACJx5B,OAAQD,GAAuBC,GAC/B3F,QAASgX,KAMNuS,eAAeoW,GAAf,GAIJ,IAJqC,KACtCvgC,EADsC,SAChCgc,EADgC,OACtB7a,GAGf,EACD,MAAMq/B,EfrRD,SAAgCr/B,GACrC,OAAQA,EAAOpG,MACb,IAAK,SACH,OAAO,IAAIlB,EAAAA,IAAAA,wBACb,IAAK,SACH,OAAO,IAAIA,EAAAA,IAAAA,wBACb,IAAK,cACH,OAAO,IAAIA,EAAAA,IAAAA,6BACb,IAAK,gBACH,OAAO,IAAIA,EAAAA,IAAAA,+BACb,IAAK,cACH,OAAO,IAAIA,EAAAA,IAAAA,2Be0QI4mC,CAAuBt/B,GAC1C,GAAKq/B,EAaL,aALqBvR,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,UAA0B,CAC/DmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnC+iC,SAAU1kB,EACV7a,OAAQq/B,KAKLrW,eAAewW,GAAf,GAIJ,IAJuC,KACxCj/B,EADwC,SAClCsa,EADkC,MACxBJ,EADwB,iBACjBW,GAGtB,EACD,MAAM8d,EAA2C,YAA/Bn4B,GAAkBR,EAAKnH,IAErC8/B,InBpQwB,ImBoQXre,QACTiT,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CAClDo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCie,MAAAA,KAEOye,QACHpL,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACrDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyJ,MAAO4U,EACPH,UAAWD,WAGPqT,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CAClDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCie,MAAAA,MnBlRwB,ImBsRxBI,EACG+Z,GAAkB,CAAEr0B,KAAAA,EAAM6a,iBAAAA,EAAkB0Z,eAAe,IAE3D2K,GAAwB,CAAEl/B,KAAAA,EAAMsa,SAAAA,IAIlCmO,eAAe0W,GAAf,GAIJ,IAJoC,KACrCn/B,EADqC,WAC/Bq+B,GAGL,EACD,MAAM1F,EAA2C,YAA/Bn4B,GAAkBR,EAAKnH,UAEnC00B,GACJoL,EACI,IAAIxgC,EAAAA,IAAAA,SAAAA,oBAAoC,CACxCo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCpD,GAAIwlC,IAEJ,IAAIlmC,EAAAA,IAAAA,SAAAA,oBAAoC,CACxCU,GAAIwlC,KAIV3W,GAAS,IACHiR,EAAY,CACd,QAAS,wBACT95B,UAAWmB,EAAKnH,IACd,CACF,QAAS,2BAEX2lC,IAAKH,EACLX,cAAe,CACbrrB,kBAAkB,EAClBf,eAAe,KAKdmX,eAAeyW,GAAf,GAIJ,IAJ2C,KAC5Cl/B,EAD4C,SACtCsa,GAGL,EACD,MAAO8kB,EAAkBC,SAAuB9T,QAAQsN,IAAI,CAC1DtL,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,qBAAqC,CACrDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyJ,MAAO4U,KAETiT,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAC3CmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyJ,MAAO4U,EACPglB,SAAU,EACVC,WAAY,EACZ7Q,MAAO,OAIX,IAAK0Q,IAAqBA,EAAiBzlC,SAASpC,OAClD,OAGF,MAAMioC,EAAmB1gC,EAAwBsgC,EAAiBzlC,SAAS,IAC3E,OAAK6lC,GAIL9X,GAAS,CACP,QAAS,mBACT9oB,OAAQ4gC,EACRllB,SAAAA,EACA7H,WAAY,CACV6H,SAAAA,EACAmlB,aAAcL,EAAiBzlC,SAASylC,EAAiBzlC,SAASpC,OAAS,GAAGsB,GAC9E6hB,uBAAwB0kB,EAAiB1hB,eACzClD,cAAgB6kB,aAAyBlnC,EAAAA,IAAAA,SAAAA,gBAAmCknC,EAAc5iC,WAAQjE,GAEpGknC,eAAgBL,GAAiB,aAAcA,GAAiBA,EAAc1lC,SAASpC,OACnF8nC,EAAc1lC,SAAS,GAAGd,QAC1BL,IAGQ4mC,EAAiB3lC,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SACtFO,SAASk4B,IACb5N,GAAS,CACP,QAAS,aACT7uB,GAAIy8B,EAAQz8B,GACZmH,KAAMs1B,EACNqK,mBAAmB,OAIhB,CACLH,iBAAAA,SA9BF,EAkCK/W,eAAemX,GAAf,GAYJ,IACGvnC,GAboC,KACxC2H,EADwC,KAClC3G,EADkC,MAC5B2W,EAD4B,aACrByvB,EADqB,QACPI,EADO,QACEC,KAAYjF,GAWrD,EAED,OAAQxhC,GACN,IAAK,QACHhB,EAAS,IAAIF,EAAAA,IAAAA,8BACb,MACF,IAAK,YACHE,EAAS,IAAIF,EAAAA,IAAAA,4BACb,MACF,IAAK,QACHE,EAAS,IAAIF,EAAAA,IAAAA,uBACb,MACF,IAAK,QACHE,EAAS,IAAIF,EAAAA,IAAAA,yBACb,MACF,IAAK,QACHE,EAAS,IAAIF,EAAAA,IAAAA,8BACb,MACF,IAAK,eACHE,EAAS,IAAIF,EAAAA,IAAAA,8BACb,MAEF,QACEE,EAAS,IAAIF,EAAAA,IAAAA,yBAIjB,MAAMpC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,OAAuB,CAC5DmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnC5D,OAAAA,EACAo7B,EAAGzjB,GAAS,GACZgvB,SAAUS,EACVI,QAAAA,EACAC,QAAAA,KACGjF,KAGL,IACG9kC,GACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,SAEX,OAGFs1B,GAAcl5B,GAEd,MAAM0D,EAAQ1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SAC5EnD,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACvDlD,EAAW5D,EAAO4D,SAAShB,IAAIkU,IAAiBxU,OAAmBwE,SAEzE,IACIkjC,EADAC,EAAarmC,EAASpC,OAU1B,OARIxB,aAAkBoC,EAAAA,IAAAA,SAAAA,eAAiCpC,aAAkBoC,EAAAA,IAAAA,SAAAA,mBACvE6nC,EAAajqC,EAAO0G,MAEhB9C,EAASpC,SACXwoC,EAAepmC,EAASA,EAASpC,OAAS,GAAGsB,KAI1C,CACLY,MAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAqmC,WAAAA,EACAD,aAAAA,GAIGtX,eAAewX,GAAf,GASJ,IACG5nC,GAVqC,MACzC2X,EADyC,WAClCkwB,EAAa,EADqB,MAClBxR,EADkB,KACXr1B,EAAO,OADI,QACIwmC,EADJ,QACaC,GAQrD,EAED,OAAQzmC,GACN,IAAK,QACHhB,EAAS,IAAIF,EAAAA,IAAAA,8BACb,MACF,IAAK,YACHE,EAAS,IAAIF,EAAAA,IAAAA,4BACb,MACF,IAAK,QACHE,EAAS,IAAIF,EAAAA,IAAAA,uBACb,MACF,IAAK,QACHE,EAAS,IAAIF,EAAAA,IAAAA,yBACb,MACF,IAAK,QACHE,EAAS,IAAIF,EAAAA,IAAAA,8BACb,MAEF,QACE,KAAK6X,GAAW8vB,GAAWD,GACzB,OAGFxnC,EAAS,IAAIF,EAAAA,IAAAA,yBAIjB,MAAMpC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,CAClEs7B,EAAGzjB,EACHkwB,WAAAA,EACApR,WAAY,IAAI32B,EAAAA,IAAAA,eAChBu2B,MAAAA,EACAr2B,OAAAA,EACA4kB,S5B5zByB,E4B6zBzB4iB,QAAAA,EACAC,QAAAA,KAGF,IACG/pC,GACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,SAEX,OAGFs1B,GAAc,CACZx1B,MAAO1D,EAAO0D,MACdC,MAAO3D,EAAO2D,MACdC,SAAU5D,EAAO4D,WAGnB,MAAMF,EAAQ1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SAC5EnD,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACvDlD,EAAW5D,EAAO4D,SAAShB,IAAIkU,IAAiBxU,OAAmBwE,SAEzE,IACIsjC,EADAH,EAAarmC,EAASpC,OAU1B,OARIxB,aAAkBoC,EAAAA,IAAAA,SAAAA,eAAiCpC,aAAkBoC,EAAAA,IAAAA,SAAAA,mBACvE6nC,EAAajqC,EAAO0G,MAEhB9C,EAASpC,SACX4oC,EAAWxmC,EAASA,EAASpC,OAAS,GAAGsB,KAItC,CACLc,SAAAA,EACAD,MAAAA,EACAD,MAAAA,EACAumC,WAAAA,EACAG,SAAU,aAAcpqC,GAAUA,EAAOoqC,SAAWpqC,EAAOoqC,SAAWA,GAInE1X,eAAe2X,GAAf,GAAqE,IAAlC,QAAElhC,GAAgC,EAC1E,MAAM6f,QAAgBwO,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACxE+G,QAAAA,KAGF,OAAO6f,GAAW9I,GAAa8I,GAG1B0J,eAAe4X,GAAf,GAMJ,IANgC,KACjCrgC,EADiC,UAC3B2F,EAD2B,QAChB80B,GAKhB,EACD,MAAM,GAAE5hC,EAAF,WAAMoD,GAAe+D,QAErButB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,SAAyB,CAC/CmG,KAAMsC,GAAe/H,EAAIoD,GACzByJ,MAAOC,EACP80B,QAASA,EAAQ9hC,IAAI0H,MAIlBooB,eAAe6X,GAAf,GAMJ,IAN6B,KAC9BtgC,EAD8B,UACxB2F,EADwB,KACbvE,GAKhB,EACD,MAAM,GAAEvI,EAAF,WAAMoD,GAAe+D,QAErButB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CAClDmG,KAAMsC,GAAe/H,EAAIoD,GACzBpD,GAAI8M,EACJvG,MAAO+B,GAA2BC,GAAM,MAIrCqnB,eAAe8X,GAAf,GASJ,IATyC,KAC1CvgC,EAD0C,UACpC2F,EADoC,OACzB/D,EADyB,OACjBkB,EADiB,MACT4rB,EADS,kBACF8R,GAQvC,EACD,MAAM,GAAE3nC,EAAF,WAAMoD,GAAe+D,EAErBjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,CAClEmG,KAAMsC,GAAe/H,EAAIoD,GACzBpD,GAAI8M,KACA/D,GAAU,CAAEA,OAAQvB,EAAiBuB,OACrCkB,GAAU,CAAEA,OAAAA,MACZ4rB,GAAS,CAAEA,MAAAA,MAGjB,IAAK34B,EACH,OAGFk5B,GAAc,CACZx1B,MAAO,GACPC,MAAO3D,EAAO2D,MACdC,SAAU,KAGZ,MAAMD,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACvD4jC,EAAQ1qC,EAAO0qC,MAAM9nC,KAAK+nC,IAAD,CAC7B/hC,OAAQ+hC,EAAK/hC,OACbqH,KAAM06B,EAAK16B,SAGb,MAAO,CACLvJ,MAAO1G,EAAO0G,MACdgkC,MAAAA,EACA/mC,MAAAA,EACAinC,WAAY5qC,EAAO4qC,WACnBH,kBAAAA,GAIG/X,eAAemY,GAAf,GAkBJ,IAlBmC,SACpCC,EADoC,OAEpCC,EAFoC,SAGpCnnC,EAHoC,iBAIpCkhB,EAJoC,SAKpC4gB,EALoC,YAMpCC,EANoC,OAOpCE,EAPoC,YAQpCmF,GAUC,EACD,MAAM1C,EAAa1kC,EAAShB,KAAI,QAAC,GAAEE,GAAH,SAAYA,KACtCmoC,EAAYrnC,EAAShB,IAAI8J,IAE/B9I,EAASyD,SAAQ,CAAC8B,EAAS+hC,KACzB,MAAMpF,EbeH,SACLiF,EACA5hC,EACA2b,EACA6gB,GAEA,MAAM1hB,EAAUrO,MACV,QACJwB,EACAvO,OAAQ+R,EACR9X,GAAI+X,EAHA,SAIJlD,EAJI,UAKJ6D,EALI,UAMJC,GACEtS,EAEEgiC,EAAU/zB,EAAQsE,MAClB0vB,EACJL,EAAOjoC,KAAOiT,KAAkB6E,IAAemwB,EAAOjoC,IAAMqG,EAAQqR,eAAiB2wB,EAGvF,MAAO,CACLroC,GAAImhB,EACJpb,OAAQkiC,EAAOjoC,GACfsU,QAAAA,EACAnH,KAAM01B,GAAeznC,KAAKC,MAAMsT,KAAKqE,MAAQ,KAAQgP,EACrD9N,YAAao0B,GAA4C,oBAAhBL,EAAOznC,KAChDqU,SAAU5B,GACVkwB,aAAc,6BACdzqB,UAAAA,EACAC,UAAAA,KAEI9D,IAAa5B,KAAkBo1B,GAAW,CAC5C3wB,YAAa,CACXvK,KAAM9G,EAAQ8G,KACd4H,eAAe,EACf+C,WAAAA,EACAC,cAAAA,EACAE,aAAcpD,OAGdguB,GAAe,CAAEI,aAAa,IaxDbsF,CAA2BN,EAAQ5hC,EAAS2b,EAAkB6gB,GACnF1hC,EAAAA,cAAsB1D,OAAO0qC,EAAUC,KAAWpF,EAElDnU,GAAS,CACP,QAASmU,EAAaC,YAAc,sBAAwB,aAC5DjjC,GAAIgjC,EAAahjC,GACjB+F,OAAQkiC,EAAOjoC,GACfqG,QAAS28B,aAIPtO,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACtDkpC,SAAUzgC,GAAeigC,EAAShoC,GAAIgoC,EAAS5kC,YAC/CqlC,OAAQ1gC,GAAekgC,EAAOjoC,GAAIioC,EAAO7kC,YACzCoQ,SAAU20B,EACVnoC,GAAIwlC,EACJ0C,YAAaA,QAAevoC,EAC5B+kB,OAAQke,QAAYjjC,KAChBkjC,GAAe,CAAE/yB,aAAc+yB,MAC/BE,GAAU,CAAEA,OAAQh7B,GAAeg7B,EAAO/iC,GAAI+iC,EAAO3/B,gBAItDwsB,eAAe8Y,GAAf,GAMJ,IAN+C,KAChDvhC,EADgD,UAEhDsY,GAIC,EACD,MAAMviB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAChEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnC0yB,WAAYrW,EACZinB,WAAY,EACZ7Q,MAAO,KAGT,GACG34B,KACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,UAAa5D,EAAO4D,SAASpC,OAK1C,OAAOxB,EAAO4D,SAAS,GAAGd,GAGrB4vB,eAAe+Y,GAAf,GAAkE,IAA7B,KAAExhC,GAA2B,EACvE,MAAM,GAAEnH,EAAF,WAAMoD,GAAe+D,EAErBjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CACzEmG,KAAMsC,GAAe/H,EAAIoD,MAG3B,GACGlG,KACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,SASb,OAJAs1B,GAAcl5B,GAIP,CACL4D,SAHe5D,EAAO4D,SAAShB,IAAIkU,IAAiBxU,OAAmBwE,UAOpE4rB,eAAegZ,GAAf,GAAsF,IAAjD,KAAEzhC,EAAF,IAAQw+B,GAAyC,EAC3F,MAAM,GAAE3lC,EAAF,WAAMoD,GAAe+D,QAErButB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,sBAAsC,CAC5DmG,KAAMsC,GAAe/H,EAAIoD,GACzBpD,GAAI2lC,KAIR,SAASvP,GAAcl5B,GAIrB8J,EAA+B9J,EAAO2D,OACtCmG,EAA+B9J,EAAO0D,OAEtC1D,EAAO4D,SAASyD,SAAS8B,KAClBA,aAAmB/G,EAAAA,IAAAA,SAAkByL,GAAmB1E,IACvDA,aAAmB/G,EAAAA,IAAAA,gBf94BtB,SAAmC+G,GACxC,MAAO,UAAWA,EAAQO,QAAUP,EAAQO,OAAO/G,iBAAiBP,EAAAA,IAAAA,Me64BhBupC,CAA0BxiC,KAE1ED,EAAoBC,MAKnBupB,eAAekZ,GAAf,GAAgE,IAA7B,KAAE3hC,GAA2B,EACrE,MAAMjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,OACrC,CACEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnC5D,OAAQ,IAAIF,EAAAA,IAAAA,0BACZs7B,EAAG,GACH/E,M5BnsC+B,M4BusCnC,IACG34B,GACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,SAEX,OAGFs1B,GAAcl5B,GAEd,MAAM0D,EAAQ1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SAC5EnD,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SAG7D,MAAO,CACLlD,SAHe5D,EAAO4D,SAAShB,IAAIkU,IAAiBxU,OAAmBwE,SAIvEnD,MAAAA,EACAD,MAAAA,GAIGgvB,eAAemZ,GAAf,GAAsF,IAA3D,KAAE5hC,EAAF,UAAQ2F,GAAmD,EAC3F,MAAM5P,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,2BAA2C,CAChFmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyJ,MAAOC,KAGT,OAAO5P,EAASA,EAAO4C,IAAIrC,aAAUkC,EAGhCiwB,eAAeoZ,GAAf,GAIJ,IAJ+B,KAChC7hC,GAGC,EACD,MAAMjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,UAA0B,CAC/DmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAGrC,GAAKlG,EAUL,OANA8J,EAA+B9J,EAAO2D,OACtCmG,EAA+B9J,EAAO0D,OAK/B,CACLC,MAJY3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SAK3DpD,MAJY1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SAKhF2hC,IAAKzoC,EAAOy+B,MAAM77B,IAAI+F,IAInB,SAASojC,GAAT,GAIJ,IAJ+B,OAChClG,EADgC,KACxB57B,GAGP,EACD,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACzDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnC2/B,OAAQh7B,GAAeg7B,EAAO/iC,GAAI+iC,EAAO3/B,eAItCwsB,eAAesZ,GAAf,GAAmE,IAA7B,KAAE/hC,GAA2B,EACxE,MAAMjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,qBAAqC,CAC1Eo2B,QAAS3tB,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAGxC,GAAKlG,GAAWA,EAAO4D,SAASpC,OAUhC,OANA03B,GAAcl5B,GAMP,CACL4D,SALe5D,EAAO4D,SAAShB,IAAIoT,IAA0B1T,OAA4BwE,SAMzFnD,MALY3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SAM3DpD,MALY1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,UAS7E4rB,eAAeuZ,GAAf,GAAyF,IAArD,KAAEhiC,EAAF,OAAQiiC,GAA6C,QACxF1U,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,qBAAqC,CAC3Do2B,QAAS3tB,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACtCoQ,SAAUhM,EAAiB4hC,MAIxB,SAASC,GAAT,GAIJ,IAJ6B,KAC9BliC,GAGC,EACD,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,CACpDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAIhC,SAASkmC,GAAT,GAIJ,IAJ8B,KAC/BniC,GAGC,EACD,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACrDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAIhCwsB,eAAe2Z,GAAf,GAQJ,IARuC,KACxCpiC,KAAS66B,GAOR,EACD,MAAM9kC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACvEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyyB,M5B9zCgC,O4B+zC7BmM,KAGL,GACG9kC,KACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,SAWb,OANAs1B,GAAcl5B,GAMP,CACL4D,SALe5D,EAAO4D,SAAShB,IAAIkU,IAAiBxU,OAAmBwE,SAMvEnD,MALY3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SAM3DpD,MALY1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,UAS7E4rB,eAAe4Z,GAAf,GAQJ,IARwC,KACzCriC,KAAS66B,GAOR,EACD,MAAM9kC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,mBAAmC,CACxEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyyB,M5Bn2CiC,O4Bo2C9BmM,KAGL,GACG9kC,KACEA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBACjBpC,EAAO4D,SAWb,OANAs1B,GAAcl5B,GAMP,CACL4D,SALe5D,EAAO4D,SAAShB,IAAIkU,IAAiBxU,OAAmBwE,SAMvEnD,MALY3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SAM3DpD,MALY1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,UAS7E4rB,eAAe6Z,GAAf,GAIJ,IAJmC,KACpCtiC,EADoC,UAC9B2F,GAGL,EACD,MAAM5P,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACrEuN,MAAOC,EACPrH,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAGrC,GAAKlG,EASL,OAPA2xB,GAAS,CACP,QAAS,yBACT6a,UAAWxsC,EAAOysC,QAClBC,gBAAiB1sC,EAAO0sC,gBAAgBl7B,WACxC5F,KAAM5L,EAAO4L,OAGR5L,EAAO0sC,gBAAgBl7B,WC77ChC,IAAImgB,GCXAA,GA2NAgb,GC7NAhb,GFmBGe,eAAeka,GAAf,GAMJ,IANiC,GAClC9pC,EADkC,WAElCoD,GAIC,EACD,MAAM2mC,EAAQ5hC,GAAiBnI,EAAIoD,GACnC,KAAM2mC,aAAiBzqC,EAAAA,IAAAA,WACrB,OAGF,MAAMurB,QAAiB6J,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,YAAyB,CAAEU,GAAI+pC,KAExE,IAAKlf,EACH,OAGEA,EAASN,SAASI,wBAAwBrrB,EAAAA,IAAAA,QAC5C6B,EAAAA,OAAe0pB,EAASN,SAASI,aAAa3qB,GAAG0O,YAAcmc,EAASN,SAASI,cAGnF,MAAM3C,EAAU6C,EAASN,SAASvC,SAC9BA,MAAAA,OAAA,EAAAA,EAAS6B,4BAA4BvqB,EAAAA,IAAAA,QACvC6B,EAAAA,OAAe6mB,EAAQ6B,iBAAiB7pB,GAAG0O,YAAcsZ,EAAQ6B,mBAE/D7B,MAAAA,OAAA,EAAAA,EAAS8B,+BAA+BxqB,EAAAA,IAAAA,WAC1C6B,EAAAA,UAAkB6mB,EAAQ8B,oBAAoB9pB,GAAG0O,YAAcsZ,EAAQ8B,qBAGzE,MAAMkgB,EAAmB3f,GAAqBQ,GAE9CgE,GAAS,CACP,QAAS,aACT7uB,GAAAA,EACA8G,KAAM,CACJ+jB,SAAUmf,EAAiBnf,YAK1B+E,eAAeqa,GAAiBjqC,EAAYoD,EAAqBie,GACtE,MAAM6oB,QAAoBxV,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACzEwG,OAAQqC,GAAiBnI,EAAIoD,GAC7Bie,MAAOA,EAAQrZ,GAAeqZ,EAAO1Z,GAAkB0Z,SAAU1hB,EACjEk2B,M7BR8B,O6BWhC,IAAKqU,EACH,OAGF9T,GAAc8T,GAEd,MAAMhT,EAAoB,GACpBt2B,EAAmB,GAWzB,OATAspC,EAAYtpC,MAAM2D,SAAS4lC,IACzB,MAAMhjC,EAAO8e,GAAwBkkB,GAEjChjC,IACFvG,EAAM6D,KAAK0C,GACX+vB,EAAQzyB,KAAK0C,EAAKnH,QAIf,CAAEY,MAAAA,EAAOs2B,QAAAA,EAASkT,cAAelT,EAAQx4B,O7B7BhB,K6BgC3BkxB,eAAeya,KACpB,MAAMC,QAAe5V,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,cAEvC,OAAOgrC,MAAAA,OAAP,EAAOA,EAAQzc,QAGV+B,eAAe2a,KACpB,MAAMC,QAAiB9V,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACnEmrC,gBAAgB,KAElB,KAAMD,aAAoBlrC,EAAAA,IAAAA,SAAAA,UACxB,OAGF,MAAMuB,EAAQ2pC,EAAS3pC,MAAMf,IAAI8qB,IAAcprB,QAAQsH,GAAS9C,QAAQ8C,KAAUA,EAAKmH,SAGvF,MAAO,CACL03B,IAHU9kC,EAAMf,KAAI,QAAC,GAAEE,GAAH,SAAYA,KAIhCa,MAAAA,GAIG+uB,eAAe8a,KACpB,MAAMxtC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CAAEwtB,KAAM7kB,GAAAA,CAAO,QAClF,IAAK/K,GAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,oBAC/B,OAGFpC,EAAO2D,MAAM0D,SAASuC,IAChBA,aAAgBxH,EAAAA,IAAAA,MAClBuH,EAAiBC,GAAM,MAI3B,MAAM,MAAEjG,EAAF,iBAASmrB,GAAqBF,GAAyB5uB,EAAO2D,OAEpE,MAAO,CACLA,MAAAA,EACAmrB,iBAAAA,EACAprB,MAAO1D,EAAO2D,MAAMf,KAAKgH,GAASmf,GAAwBnf,KAAOtH,OAAgBwE,UAI9E4rB,eAAe+a,GAAf,GAA2D,IAAjC,MAAE9pC,GAA+B,EAChE,MAAM3D,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,SAAsB,CAC3DU,GAAIa,EAAMf,KAAI,QAAC,GAAEE,EAAF,WAAMoD,GAAP,SAAwB2E,GAAe/H,EAAIoD,SAE3D,GAAKlG,GAAWA,EAAOwB,OAUvB,OANAxB,EAAOqH,SAASuC,IACVA,aAAgBxH,EAAAA,IAAAA,MAClBuH,EAAiBC,GAAM,MAIpBglB,GAAyB5uB,GAG3B0yB,eAAegb,GAAf,GAQJ,IARiC,MAClC3/B,EADkC,UAElCC,EAFkC,SAGlCC,GAKC,EACD,MAAMjO,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEy+B,SAAU,CAAC/yB,GAAkB,CAC3BC,MAAOA,GAAS,GAChBC,UAAWA,GAAa,GACxBC,SAAUA,GAAY,SAQ1B,OAJIjO,aAAkBoC,EAAAA,IAAAA,SAAAA,kBAAoCpC,EAAO2D,MAAMnC,QACrEmI,EAAiB3J,EAAO2D,MAAM,IAGzB3D,MAAAA,GAAAA,EAAQ2tC,SAASnsC,OAASkH,EAAe1I,EAAO2tC,SAAS,GAAG/kC,OAAQ,aAAUnG,EAGhF,SAASmrC,GAAT,GAcJ,IAd2B,GAC5B9qC,EAD4B,WAE5BoD,EAF4B,YAG5BuZ,EAAc,GAHc,UAI5BzR,EAAY,GAJgB,SAK5BC,EAAW,GALiB,uBAM5B4/B,GAAyB,GAQxB,EACD,OAAOrW,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAClDU,GAAImI,GAAiBnI,EAAIoD,GACzB8H,UAAAA,EACAC,SAAAA,EACAF,MAAO0R,KACHouB,GAA0B,CAAEC,yBAA0BD,MAIvDnb,eAAeqb,GAAf,GAMJ,IANiC,GAClCjrC,EADkC,WAElCoD,GAIC,EACD,MAAM2mC,EAAQ5hC,GAAiBnI,EAAIoD,GAC7B2mC,aAAiBzqC,EAAAA,IAAAA,iBAIFo1B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CAAEU,GAAI,CAAC+pC,OAM7Elb,GAAS,CACP,QAAS,gBACT7uB,GAAAA,IAIG4vB,eAAesb,GAAmBpkC,EAAgBK,GACvD,GAAIL,EAAM,CACR,MAAM,GAAE9G,EAAF,WAAMoD,GAAe0D,EAErB5J,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,OAAAA,cAA4B,CACjEwG,OAAQqC,GAAiBnI,EAAIoD,GAC7ByyB,M7B7K8B,G6B8K9B5rB,OAAQ,EACRoX,MAAOpZ,GAAAA,CAAO,QAGhB,IAAK/K,EACH,OAKF,OAFAk5B,GAAcl5B,GAEP,CACL+D,OAAQ/D,EAAO+D,OACZzB,QAAQK,GAAiCA,aAAiBP,EAAAA,IAAAA,QAC1DQ,IAAIF,IAIX,MAAM1C,QAAe6pC,GAAoB,CACvC5/B,KAAMA,EACN3G,KAAM,eACNq1B,M7BlMgC,K6BqMlC,IAAK34B,EACH,OAGF,MAAM,SAAE4D,EAAF,MAAYD,GAAU3D,EAE5B,MAAO,CACL+D,OAAQH,EAAShB,KAAKuG,GAAYA,EAAQiO,QAAQ1N,OAAQ/G,QAAOL,OAAiBwE,SAClFnD,MAAAA,GAIG,SAASq5B,GAAWiR,GACzB,MAAM,GAAEnrC,EAAF,WAAMoD,GAAe+nC,EAE3B,OAAOzW,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAClDmG,KAAMsC,GAAe/H,EAAIoD,MAI7B,SAASgzB,GAAcl5B,GACjB,UAAWA,GACb8J,EAA+B9J,EAAO0D,OAGpC,WAAY1D,GACdA,EAAO+D,OAAOsD,QAAQmC,GC7QnBkpB,eAAewb,GAAf,GAAmE,IAAnC,KAAEte,EAAO,KAA0B,EACxE,MAAMue,QAAoB3W,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CAAEwtB,KAAM7kB,GAAAA,CAAO6kB,MAE1F,GAAKue,KAAeA,aAAuB/rC,EAAAA,IAAAA,SAAAA,wBAU3C,OANA+rC,EAAYC,KAAK/mC,SAASJ,IAAe,MACvC,UAAIA,EAAWzB,cAAf,OAAI,EAAmBhE,SACrByC,EAAAA,YAAoB1D,OAAO0G,EAAWnE,KAAOmE,MAI1C,CACL2oB,KAAMrvB,OAAO4tC,EAAYve,MACzBwe,KAAMD,EAAYC,KAAKxrC,IAAIuD,IAIxBusB,eAAe2b,GAAf,GAAsE,IAAnC,KAAEze,EAAO,KAA0B,EAC3E,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CAAEwtB,KAAM7kB,GAAAA,CAAO6kB,MAExF,GAAK5vB,KAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,2BAIjC,MAAO,CACLwtB,KAAMrvB,OAAOP,EAAO4vB,MACpB0e,SAAUC,GAAqBvuC,EAAOsuC,SAASl/B,MAAM,E9BmGpB,M8B/F9BsjB,eAAe8b,GAAf,GAAwE,IAAnC,KAAE5e,EAAO,KAA0B,EAC7E,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CAAEwtB,KAAM7kB,GAAAA,CAAO6kB,MAEvF,GAAK5vB,KAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,0BAIjC,MAAO,CACLwtB,KAAMrvB,OAAOP,EAAO4vB,MACpB0e,SAAUC,GAAqBvuC,EAAOsuC,WAInC5b,eAAe+b,GAAf,GAAwE,IAAnC,KAAE7e,EAAO,KAA0B,EAC7E,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CAAEwtB,KAAM7kB,GAAAA,CAAO6kB,MAE1F,GAAK5vB,KAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,6BAIjC,MAAO,CACLwtB,KAAMrvB,OAAOP,EAAO4vB,MACpBpR,UAAW1X,QAAQ9G,EAAOqe,SAC1B+vB,KAAMpuC,EAAOouC,KAAKxrC,IAAImE,IAInB2rB,eAAegc,GAAf,GAMJ,IAN+B,QAChCn3B,EADgC,OAEhCo3B,GAIC,EACe,IAAIvsC,EAAAA,IAAAA,SAAAA,YAA4B,CAC9CU,GAAIqI,GAAmBoM,GACvBo3B,OAAAA,UAGmBnX,MAEnB7F,GAAS,CACP,QAAS,2BAKR,SAASid,GAAT,GAIJ,IAJiC,QAClCr3B,GAGC,EAMD,OAAOigB,GALS,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACpDU,GAAIqI,GAAmBoM,GACvBs3B,QAAQ,KAML,SAASC,KACd,OAAOtX,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,qBAGpBswB,eAAeqc,GAAf,GAGL,IAFA,oBAAEC,EAAF,aAAuBhpC,EAAvB,WAAqCE,GAErC,EACA,MAAMlG,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACnEgD,WAAYY,EACRkF,GAAqBlF,EAAcE,IjBmBGS,EiBlBRqoC,EjBmB7B,IAAI5sC,EAAAA,IAAAA,yBAAgC,CACzCuE,UAAAA,QAFG,IAAuCA,EiBuMZsoC,EAtNhC,GAAMjvC,aAAkBoC,EAAAA,IAAAA,SAAAA,WAIxB,MAAO,CACLgE,IAAKD,EAAgBnG,EAAOoG,KAC5BkoC,SAAUC,GAAqBvuC,EAAO6D,WACtCorC,OA+M8BA,EA/MEjvC,EAAOivC,MAgNlCA,EAAMvvC,QAAO,CAAC4xB,EAAD,KAAkC,IAA5B,SAAEsP,EAAF,UAAY/8B,GAAgB,EAIpD,OAHAytB,EAAIsP,GAAY/8B,EAAUjB,KAAKssC,GAAe3qC,EAC5CN,EAAAA,UAAkB1D,OAAO2uC,OACxB5sC,OAAmBwE,SACfwqB,IACN,MAjNEoB,eAAeyc,KACpB,MAAMnvC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACnEgD,WAAY,IAAIhD,EAAAA,IAAAA,gCAGlB,GAAMpC,aAAkBoC,EAAAA,IAAAA,SAAAA,WAIxB,MAAO,CACLgE,IAAKD,EAAgBnG,EAAOoG,KAC5BkoC,SAAUC,GAAqBvuC,EAAO6D,YAInC6uB,eAAe0c,KACpB,MAAMpvC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACnEgD,WAAY,IAAIhD,EAAAA,IAAAA,0CAGlB,GAAMpC,aAAkBoC,EAAAA,IAAAA,SAAAA,WAIxB,MAAO,CACLgE,IAAKD,EAAgBnG,EAAOoG,KAC5BkoC,SAAUC,GAAqBvuC,EAAO6D,YAInC6uB,eAAe2c,GAAf,GAAuF,IAAzD,MAAEp1B,EAAF,KAAS2V,EAAO,KAAyC,EAC5F,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACvEs7B,EAAGzjB,EACH2V,KAAM7kB,GAAAA,CAAO6kB,MAGf,GAAK5vB,KAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,6BAIjC,MAAO,CACLwtB,KAAMrvB,OAAOP,EAAO4vB,MACpBwe,KAAMpuC,EAAOouC,KAAKxrC,IAAImE,IAInB2rB,eAAe4c,GAAf,GAAiE,IAAnC,KAAE1f,EAAO,KAA0B,EACtE,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,CAAEwtB,KAAM7kB,GAAAA,CAAO6kB,MAEnF,GAAK5vB,KAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,sBAIjC,MAAO,CACLwtB,KAAMrvB,OAAOP,EAAO4vB,MACpB2f,KAAMC,GAAiBxvC,EAAOuvC,OAI3B,SAASE,GAAT,GAAmF,IAAlE,IAAE3iB,EAAF,aAAO4iB,GAA2D,EAMxF,OAAOlY,GALS,IAAIp1B,EAAAA,IAAAA,SAAAA,QAAwB,CAC1CU,GAAIqI,GAAmB2hB,GACvB+hB,OAAQa,KAMLhd,eAAeid,GAAf,GAA6G,IAA5E,aAAE3pC,EAAF,WAAgBE,GAA4D,QAC7FsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACvEgD,WAAY8F,GAAqBlF,EAAcE,OAI/CyrB,GAAS,CACP,QAAS,mBACT7uB,GAAIkD,EACJiB,WAAY,CAAEV,cAAekL,KAAKqE,SAKjC4c,eAAekd,GAAf,GAA+G,IAA5E,aAAE5pC,EAAF,WAAgBE,GAA4D,QAC/FsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CACzEgD,WAAY8F,GAAqBlF,EAAcE,OAI/CyrB,GAAS,CACP,QAAS,mBACT7uB,GAAIkD,EACJiB,WAAY,CAAEV,mBAAe9D,KAO5BiwB,eAAemd,GAAf,GAAsF,IAA5D,MAAE51B,EAAF,OAASlN,EAAS,IAA0C,EAC3F,IAAK4/B,GAAa,CAChB,MAAMmD,QAAetY,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,WACvC,IAAK0tC,EACH,OAGF,MAAMC,QAAqBvY,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CAC3EqS,SAAUq7B,EAAOE,qBAEnB,KAAKD,GAAkBA,EAAapsC,MAAM,aAAcvB,EAAAA,IAAAA,MACtD,OAGFuqC,GAAc,IAAIvqC,EAAAA,IAAAA,UAAiB,CACjCwG,OAASmnC,EAAaxnC,KAAyBK,OAC/C1C,WAAY6pC,EAAapsC,MAAM,GAAGuC,aAItC,MAAMlG,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CACzE6pB,IAAK0gB,GACLpkC,KAAM,IAAInG,EAAAA,IAAAA,eACV6X,MAAAA,EACAlN,OAAAA,KAEF,IAAK/M,EACH,OAGF,MAAM6D,EAAY7D,EAAOoM,QACtBxJ,KAAKqtC,IACJ,GAAIA,aAAoB7tC,EAAAA,IAAAA,qBACtB,OAAO6tC,EAASzrC,YAKnBlC,OAA4BwE,SAE/B,MAAO,CACL8jC,WAAY5qC,EAAO4qC,WACnB2E,KAAMC,GAAiB3rC,IAIpB6uB,eAAewd,GAAf,GAE8B,IAFO,MAC1C7qC,EAD0C,KACnCuqB,EAAO,KACqB,EACnC,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACjEw+B,SAAUv7B,EACVuqB,KAAM7kB,GAAAA,CAAO6kB,MAGf,GAAK5vB,KAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,qBAIjC,MAAO,CACLksC,SAAUC,GAAqBvuC,EAAOsuC,UACtC1e,KAAMrvB,OAAOP,EAAO4vB,OAIjB8C,eAAeyd,GAAf,GAGJ,IAHsC,SAAEnjC,EAAF,YAAYojC,GAGlD,EACD,MAAMpwC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,2BAA2C,CAChFiuC,SAAUrjC,EACVojC,YAAAA,KAGF,GAAKpwC,EAIL,MAAO,CACLgN,SAAUhN,EAAOqwC,SACjB59B,QAASzS,EAAOyS,QAChB69B,SAAUtwC,EAAOswC,SAAS5wC,QAAO,CAAC4xB,EAAKif,KACrCjf,EAAIif,EAAaC,SAAWD,EAAaE,UAElCnf,IACN,KAIP,SAASid,GAAqBD,GAC5B,OAAOA,EACJ1rC,KAAK4B,IACJ,GAAIA,aAAoBpC,EAAAA,IAAAA,SAAiB,CACvC,MAAMmV,EAAUhT,EAAyBC,GACzC,GAAI+S,EAGF,OAFAtT,EAAAA,UAAkB1D,OAAOiE,EAAS1B,KAAO0B,EAElC+S,MAMZjV,OAAmBwE,SAYxB,SAAS0oC,GAAiBD,GACxB,OAAOA,EACJ3sC,KAAK4B,IACJ,GAAIA,aAAoBpC,EAAAA,IAAAA,SAAiB,CACvC,MAAM0qB,EAAMhO,GAAuBta,GACnC,GAAIsoB,EAGF,OAFA7oB,EAAAA,UAAkB1D,OAAOiE,EAAS1B,KAAO0B,EAElCsoB,MAMZxqB,OAAiBwE,SCzVf,SAAS4pC,GAAT,GAA+D,IAApC,SAAEj8B,GAAkC,EACpE,OAAO+iB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACrDo2B,QAAS,IAAIp2B,EAAAA,IAAAA,kBACbqS,SAAAA,KAIGie,eAAeie,GAAf,GAEL,IADA,KAAE1mC,EAAF,SAAQwK,GACR,QACqB+iB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCuO,SAAAA,MAIAkd,GAAS,CACP,QAAS,aACT7uB,GAAImH,EAAKnH,GACTmH,KAAM,CAAEwK,SAAAA,KAKPie,eAAeke,GAAf,GAIJ,IAJqC,KACtC3mC,EADsC,WAChCyhB,EADgC,WACpBJ,GAGjB,EACD,MAAMtrB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CACtEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCwlB,WAAAA,EACAJ,WAAAA,KAIF,GAAMtrB,aAAkBoC,EAAAA,IAAAA,mBAUxB,OARAuvB,GAAS,CACP,QAAS,qBACT7uB,GAAImH,EAAKnH,GACT6qB,SAAU,CACRyN,WAAYp7B,EAAOurB,QAIhBvrB,EAAOurB,KAGTmH,eAAeme,GAAf,GAEmE,IAF3B,KAC7CtoC,EAD6C,MACvCuoC,EADuC,MAChCnY,EAAQ,EADwB,UACrB9M,GACgD,EACxE,MAAMklB,QAAwBvZ,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,uBAAuC,CACrFmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnCmN,QAASpI,GAAiB6lC,EAAMhuC,GAAIguC,EAAM5qC,YAC1CyyB,MAAAA,EACAtN,QAASQ,QAAappB,KAGxB,GAAKsuC,EAGL,OAFAjnC,EAA+BinC,EAAgBptC,OAEvCotC,EAAgBC,QACrB1uC,QAAQ69B,GAAMA,aAAa/9B,EAAAA,IAAAA,qBAC3BQ,IAAIuoB,IAGFuH,eAAeue,GAAf,GAUJ,IAV0C,KAC3C1oC,EAD2C,UACrCsjB,EADqC,KAC1BN,EAD0B,WACpBD,EADoB,WACRI,EADQ,gBACIK,EADJ,MACqBtlB,GAS/D,EAED,MAAM2kB,QAAeoM,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,uBAAuC,CAC5EmpB,KAAAA,EACAhjB,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnColB,WAAAA,EACAI,WAAaK,OAA+BtpB,EAAbipB,EAC/BE,cAAeG,EACftlB,MAAAA,EACA4kB,QAASQ,QAAappB,KAGxB,GAAK2oB,EAAL,CAGA,GADAthB,EAA+BshB,EAAOznB,OAClCynB,aAAkBhpB,EAAAA,IAAAA,SAAAA,oBAAsCgpB,EAAOA,kBAAkBhpB,EAAAA,IAAAA,mBAA2B,CAC9G,MAAM8uC,EAAgB/lB,GAAuBC,EAAOA,QACpD,MAAO,CACL+lB,UAAWD,EACXE,UAAWF,GAIf,GAAI9lB,aAAkBhpB,EAAAA,IAAAA,SAAAA,4BACjBgpB,EAAOA,kBAAkBhpB,EAAAA,IAAAA,oBACzBgpB,EAAOgmB,qBAAqBhvC,EAAAA,IAAAA,mBAG/B,MAAO,CACL+uC,UAHgBhmB,GAAuBC,EAAOA,QAI9CgmB,UAHgBjmB,GAAuBC,EAAOgmB,aAS7C1e,eAAe2e,GAAf,GAQJ,IARoC,KACrC9oC,EADqC,WAC/B+iB,EAD+B,WACnBI,EADmB,gBACPK,EADO,MACUtlB,GAO9C,EACD,MAAM2kB,QAAeoM,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iBAAiC,CACtEmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnColB,WAAAA,EACAI,WAAaK,OAA+BtpB,EAAbipB,EAC/BE,cAAeG,QAAmBtpB,EAClCgE,MAAAA,KAIF,GAAM2kB,aAAkBhpB,EAAAA,IAAAA,mBACxB,OAAO+oB,GAAuBC,GAGzBsH,eAAe4e,GAAf,GAIJ,IAJ4C,KAC7C/oC,EAD6C,KACvCgjB,GAGL,EAMD,aALqBiM,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,yBAAyC,CAC9EmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnCqlB,KAAAA,KAMGmH,eAAe6e,GAAf,GAIJ,IAJoD,KACrDhpC,EADqD,MAC/CuoC,GAGL,EAMD,aALqBtZ,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,iCAAiD,CACtFmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnCmN,QAASpI,GAAiB6lC,EAAMhuC,GAAIguC,EAAM5qC,eAMvCwsB,eAAe8e,GAAf,GAIJ,IAJ4C,KAC7CjpC,EAD6C,KACvCgjB,EADuC,WACjCqN,EAAa,EADoB,WACjB6Y,EADiB,MACL9Y,EAAQ,EADH,YACM+Y,GAGlD,EACD,MAAM1xC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,uBAAuC,CAC5EmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnCqlB,KAAAA,EACAqN,WAAAA,EACA6Y,WAAYA,EACRxmC,GAAiBwmC,EAAW3uC,GAAI2uC,EAAWvrC,YAAkC,IAAI9D,EAAAA,IAAAA,eACrFu2B,MAAAA,EACAhN,UAAW+lB,QAAejvC,KAG5B,IAAKzC,EAAQ,OACb,MAAM2D,EAAQ3D,EAAO2D,MAAMf,KAAKgH,GAAS8jB,GAAa9jB,KAAOtH,OAAOwE,SAEpE,OADAgD,EAA+B9J,EAAO2D,OAC/B,CACLguC,UAAW3xC,EAAO2xC,UAAU/uC,KAAKgvC,GdwP9B,SAAiCA,GACtC,MAAM,OACJhpC,EADI,KAEJqH,EAFI,MAGJD,EAHI,UAIJ2b,GACEimB,EACJ,MAAO,CACLhpC,OAAQF,EAAeE,EAAQ,QAC/BqH,KAAAA,EACAD,MAAAA,EACA0hC,YAAa/lB,GcnQiCkmB,CAAwBD,KACtEjuC,MAAOpE,EAAqBoE,EAAO,OAIhC,SAASmuC,GAAT,GAQJ,IARiC,KAClCvpC,EADkC,KAElCqB,EAFkC,WAGlCmoC,GAKC,EACD,OAAOva,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CAC3DmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnC0C,OAAQqC,GAAiBrB,EAAK9G,GAAI8G,EAAK1D,YACvC8rC,SAAUD,QAActvC,KAIrB,SAASwvC,GAAT,GAQJ,IARqC,KACtC1pC,EADsC,WAEtCwpC,EAFsC,KAGtCxmB,GAKC,EACD,OAAOiM,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,wBAAwC,CAC/DmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnC8rC,SAAUD,QAActvC,EACxB8oB,KAAAA,KAIG,SAAS2mB,GAAoBjoC,GAClC,MAAM,GAAEnH,EAAF,WAAMoD,GAAe+D,EAE3B,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CAC3DmG,KAAMsC,GAAe/H,EAAIoD,MCtO7B,MAAMisC,GAAqC,CACzCC,kBAAmB,oBACnBC,mBAAoB,qBACpBC,iBAAkB,0BAClBC,qBAAsB,wCACtBC,aAAc,eACdC,sBAAuB,oBAGnBC,GAGF,GAEJ,IAAI/gB,GCDAA,GDOGe,eAAeigB,KACpB,MAAM3yC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,aACvC,IAAKpC,EACH,OAGF,MAAM,KAAE4yC,EAAF,YAAQC,GAAgB7yC,EAE9B,MAAO,CAAE4yC,KAAAA,EAAMC,YAAAA,GAGjB,SAASC,GAAmBtxC,GAM1B,OALAmwB,GAAS,CACP,QAAS,2BACTnwB,OAAAA,IAGK,IAAIg0B,SAAgB,CAAC1D,EAASM,KACnCsgB,GAAoB5gB,QAAUA,EAC9B4gB,GAAoBtgB,OAASA,KAI1BM,eAAeqgB,GAAcC,GAClC,IAGE,aAFM9a,GAAoB,CAAE+a,iBAAiB,EAAMD,gBAAAA,KAE5C,EACP,MAAOjf,GAGP,OAFAmf,GAAQnf,IAED,GAIJrB,eAAeygB,GAAcH,GAClC,IAGE,aAFM9a,GAAoB,CAAE8a,gBAAAA,KAErB,EACP,MAAOjf,GAGP,OAFAmf,GAAQnf,IAED,GAIJrB,eAAe0gB,GAAeJ,EAAyBt+B,EAAkBk+B,EAAeS,GAC7F,IAUE,aATMnb,GAAoB,CACxB8a,gBAAAA,EACAM,YAAa5+B,EACbk+B,KAAAA,EACAS,MAAAA,EACAE,kBAAmBT,GACnBU,iBAAkBN,MAGb,EACP,MAAOnf,GAGP,OAFAmf,GAAQnf,IAED,GAIJrB,eAAe+gB,GAAoBT,EAAyBK,GACjE,IASE,aARMnb,GAAoB,CACxB8a,gBAAAA,EACAM,YAAaN,EACbK,MAAAA,EACAE,kBAAmBT,GACnBU,iBAAkBN,MAGb,EACP,MAAOnf,GAGP,OAFAmf,GAAQnf,IAED,GAIJ,SAAS2f,GAAyB9iB,GACvC8hB,GAAoB5gB,QAASlB,GAG/B,SAASsiB,GAAQnf,GACf,IAAI5qB,EAEJ,GAAI4qB,aAAe4f,EAAAA,OAAAA,eAAuB,CACxC,MAAMC,EAAQ11C,KAAK21C,KAAKp7B,OAAOsb,EAAIiI,SAAW,GAAK,IACnD7yB,EAAW,oCAAkCyqC,EAAQ,EAAK,GAAEA,UAAgB,gBAE5EzqC,EAAUgpC,GAAUpe,EAAI5qB,SAGrBA,IACHA,EAAU,oBAQZwoB,GAAS,CACP,QAAS,mBACTxoB,QAAAA,IC9GGupB,eAAeohB,GAAf,GAIJ,IAJwC,OACzCjrC,EADyC,WACjC3C,EADiC,UACrB0J,EADqB,KACVnI,EADU,OACJssC,GAGpC,EACD,MAAM/zC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,qBAAqC,CAC1EmG,KAAMsC,GAAehC,EAAQ3C,GAC7ByJ,MAAOC,EACPnI,KAAMA,EAAO6C,EAAiB7C,QAAQhF,EACtC8G,KAAMwqC,QAAUtxC,KAGlB,OAAOzC,EAASS,EAAuBT,QAAUyC,EAG5CiwB,eAAeshB,KACpB,MAAM1G,QAAiB9V,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACnE6xC,YAAY,KAGd,KAAM3G,aAAoBlrC,EAAAA,IAAAA,SAAAA,UACxB,OAGF,MAAMuB,EAAQ2pC,EAAS3pC,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SAG/D,MAAO,CACL2hC,IAHU9kC,EAAMf,KAAI,QAAC,GAAEE,GAAH,SAAYA,KAIhCa,MAAAA,GAIG+uB,eAAewhB,GAAf,GAAkE,IAApC,SAAEz/B,GAAkC,EACvE,MAAMs7B,QAAqBvY,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CAAEqS,SAAAA,KAE/E,GACGs7B,GAECA,EAAapsC,MAAM,aAAcvB,EAAAA,IAAAA,MAC9B2tC,EAAapsC,MAAM,GAAGsoB,KACtB8jB,EAAapsC,MAAM,GAAG6qB,qBAQ7B,OAFA7kB,EAAiBomC,EAAapsC,MAAM,IAE7B,CACLiG,KAAM8jB,GAAaqiB,EAAapsC,MAAM,IACtCsG,KAAM8e,GAAwBgnB,EAAapsC,MAAM,KAI9C+uB,eAAeyhB,GAAf,GAIJ,IAJyC,IAC1CloB,EAD0C,KACrChiB,EADqC,MAC/BgQ,EAD+B,OACxBlN,EAAS,IAG1B,EACD,MAAM/M,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CACzE6pB,IAAKphB,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YAChCqC,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnC+T,MAAAA,EACAlN,OAAAA,KA+RJ,IAAgCqnC,EAAiBhoC,Ef7ThBioC,EemVM5/B,EAAkBm2B,EAlTvD,GAAK5qC,EAML,OAFA8J,EAA+B9J,EAAO2D,OAE/B,CACL2wC,UAAWxtC,QAAQ9G,EAAOu0C,SAC1BC,KAAMvoB,EAAIwC,eACVmc,YAySmCn2B,EAzSOwX,EAAIxX,SAySOm2B,EAzSG5qC,EAAO4qC,WA0S7C,QAAbn2B,GAAqC,MAAfm2B,EAAqB,GAAKA,GAzSrDyJ,Uf3C6BA,Ee2CFr0C,EAAOq0C,Sf1C7BA,EAAWx0C,EAAKw0C,EAAU,CAAC,OAAQ,oBAAyC5xC,Ge2CjFkB,MAAO3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACtDsF,SAgR4BgoC,EAhRI7zC,OAAOP,EAAOo0C,SAgRDhoC,EAhRWpM,EAAOoM,QAiR1DA,EAAQxJ,KAAK5C,IAClB,OAAIA,aAAkBoC,EAAAA,IAAAA,sBAChBpC,EAAOwE,oBAAoBpC,EAAAA,IAAAA,WAuBPoC,EAtBDxE,EAAOwE,SAuBlCP,EAAAA,UAAkB1D,OAAOiE,EAAS1B,KAAO0B,GApBjCxE,EAAO2C,iBAAiBP,EAAAA,IAAAA,QAuBPO,EAtBD3C,EAAO2C,MAuB/BsB,EAAAA,OAAe1D,OAAOoC,EAAMG,KAAOH,GflX9B,SACL3C,EAAqCo0C,GAErC,MAAM,GACJtxC,EADI,KACAQ,EADA,MACMmD,EADN,YACa0Z,EADb,MAC0Bxd,EAD1B,SACiC6B,GACnCxE,EAEJ,MAAO,CACL8C,GAAAA,EACAsxC,QAAAA,EACA9wC,KAAMA,EACNmD,MAAAA,EACA0Z,YAAAA,KACa,YAAT7c,GAAsBkB,aAAoBpC,EAAAA,IAAAA,UAAmB,CAAEmV,QAAShT,EAAyBC,OACjG7B,aAAiBP,EAAAA,IAAAA,OAAgB,CAAEO,MAAOD,EAAcC,OAC/C,QAATW,GAAkBkB,aAAoBpC,EAAAA,IAAAA,UAAmB,CAAE0qB,IAAKhO,GAAuBta,OAC9E,UAATlB,GAAoBkB,aAAoBpC,EAAAA,IAAAA,UAAmB,CAC7DW,UAAWhB,EAA8ByC,EAASgB,Ue6U3CivC,CAA6Bz0C,EAAQo0C,KAG1Cp0C,EAAOiC,QAoBkByyC,EAnBH10C,EAAOiC,MAoBnCgC,EAAAA,aAAqBywC,EAAYjrC,KAAOirC,GftYnC,SAAiC10C,EAAgCo0C,GACtE,MAAM,GACJtxC,EADI,KACAQ,EADA,MACMmD,EADN,YACa0Z,EADb,IAC0B1W,EAD1B,MAC+BxH,GACjCjC,EAEJ,MAAO,CACL8C,GAAAA,EACAsxC,QAAAA,EACA9wC,KAAMA,EACNmD,MAAAA,EACA0Z,YAAAA,EACA1W,IAAAA,EACAkrC,aAAct0B,GAAoBpe,IeyW3B2yC,CAAwB50C,EAAQo0C,IAQ3C,IAA8B5vC,EAIH7B,EAIM+xC,OA9S1BhiB,eAAemiB,GAAf,GAUJ,IAVuC,KACxC5qC,EADwC,SAClC6qC,EADkC,QACxBV,EADwB,WACf5O,EADe,OACHK,EADG,SACKH,EADL,aACe9yB,GAStD,EACD,MAAM0D,EAAW5J,WAEX8qB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,oBAAoC,CAC1Dw8B,YAAY,EACZtoB,SAAAA,EACA89B,QAASrpC,GAAAA,CAAOqpC,GAChB7rC,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCpD,GAAIgyC,EACJliC,aAAAA,KACI8yB,GAAY,CAAEle,QAAQ,MACtBge,GAAc,CAAE3sB,aAAc2sB,MAC9BK,GAAU,CAAEA,OAAQh7B,GAAeg7B,EAAO/iC,GAAI+iC,EAAO3/B,gBAItDwsB,eAAeqiB,GAAf,GAKJ,IAL4B,IAC7B9oB,EAD6B,WACxB/V,GAIJ,EACD,MAAMI,EAAW5J,WAEX8qB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,SAAyB,CAC/C6pB,IAAKphB,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YAChCqC,KAAMsC,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YACjCoQ,SAAAA,EACAJ,WAAAA,KAIGwc,eAAesiB,GAAf,GAoBJ,IApBkC,SACnCtP,EADmC,KAEnCn9B,EAFmC,IAGnC0jB,EAHmC,IAInCxiB,EAJmC,WAKnCyM,EALmC,iBAMnCgG,EANmC,MAOnC+4B,EAPmC,OAQnCpP,EARmC,cASnCqP,GAWC,EACD,MAAMl1C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEolB,OAAQke,QAAYjjC,EACpB8F,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnC+lB,IAAKphB,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YAChC2S,aAAcqD,EACdzS,IAAAA,EACAyM,WAAAA,EACAi/B,YAAaF,EAAQlmC,GAAsBkmC,QAASxyC,EACpD2yC,YAAaF,QAAiBzyC,KAC1BojC,GAAU,CAAEA,OAAQh7B,GAAeg7B,EAAO/iC,GAAI+iC,EAAO3/B,gBAG3D,GAAIlG,aAAkBoC,EAAAA,IAAAA,iBACpB,MAAO,CACLqH,IAAKzJ,EAAOyJ,IACZ2qC,QAASp0C,EAAOo0C,QAAQ5iC,YAOvBkhB,eAAe2iB,GAAf,GAMJ,IANwC,IACzCppB,EADyC,IACpCxiB,EADoC,MAC/BwrC,GAKT,EACD,MAAMj1C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,qBAAqC,CAC1EqH,IAAAA,EACAwiB,IAAKphB,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YAChCivC,YAAaF,EAAQlmC,GAAsBkmC,QAASxyC,KAGtD,OAAOzC,MAAAA,OAAP,EAAOA,EAAQyJ,IAGV,SAAS6rC,GAAT,GAcJ,IAd4B,SAC7B5P,EAD6B,KAE7Bn9B,EAF6B,IAG7B0jB,EAH6B,QAI7BmoB,EAJ6B,iBAK7Bl4B,EAL6B,OAM7B2pB,GAQC,EACD,OAAOrO,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACtDolB,OAAQke,QAAYjjC,EACpB8F,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnC+lB,IAAKphB,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YAChCkuC,QAASrpC,GAAAA,CAAOqpC,GAChBv7B,aAAcqD,KACV2pB,GAAU,CAAEA,OAAQh7B,GAAeg7B,EAAO/iC,GAAI+iC,EAAO3/B,gBAItDwsB,eAAe6iB,GAAf,GAMJ,IANmC,IACpCtpB,EADoC,WAC/BupB,EAD+B,KACnB/tC,GAKhB,EACD,MAAM6O,EAAW5J,WACX8qB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACtD6pB,IAAKphB,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YAChCsvC,WAAAA,EACA/tC,KAAAA,EACA6O,SAAAA,KAIGoc,eAAe+iB,GAAf,GAIJ,IAJsC,KACvC7lB,GAGC,EACD,MAAM5vB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACvEwtB,KAAMA,EAAO7kB,GAAAA,CAAO6kB,QAAQntB,KAG9B,GAAIzC,aAAkBoC,EAAAA,IAAAA,eAEpB,OADA0H,EAA+B9J,EAAO2D,OAC/B,CACLisB,KAAM5vB,EAAO4vB,KAAKpe,WAClBwvB,KAAMzhC,EAAqBS,EAAOghC,KAAKp+B,IAAIopB,IAAwB,OAMlE,SAAS0pB,GAAT,GAMJ,IANmC,IACpCzpB,EADoC,UAEpC6V,GAIC,EACD,OAAOtK,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,sBAAsC,CAC7D6pB,IAAKphB,GAAeohB,EAAInpB,GAAImpB,EAAI/lB,YAChC67B,QAASD,KAINpP,eAAeijB,GAAf,GAMJ,IANqC,KACtC1rC,EADsC,SAChCmQ,EADgC,UACtBxK,GAKf,EACD,MAAM5P,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCkU,SAAAA,EACAzK,MAAOC,KAGT,IAAK5P,EAAQ,OAEb,MAAM41C,EAAapkB,GAAsBxxB,GAQzC,MAPyB,aAArB41C,MAAAA,OAAA,EAAAA,EAAYtyC,OACdquB,GAAS,CACP,QAAS,aACT7uB,GAAI8yC,EAAW3pB,IAAInpB,GACnB8G,KAAMgsC,EAAW3pB,MAGd2pB,EAGFljB,eAAemjB,GAAf,GAUJ,IAVoC,KACrC5rC,EADqC,UAErC2F,EAFqC,SAGrCwK,EAHqC,eAIrC07B,GAMC,EACD,MAAM91C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACnEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyJ,MAAOC,EACPwK,SAAAA,EACA27B,aAAcD,QAAkBrzC,KAGlC,IAAKzC,EAAQ,OAEb,MAAM41C,EAAapkB,GAAsBxxB,GAQzC,MAPyB,aAArB41C,MAAAA,OAAA,EAAAA,EAAYtyC,OACdquB,GAAS,CACP,QAAS,aACT7uB,GAAI8yC,EAAW3pB,IAAInpB,GACnB8G,KAAMgsC,EAAW3pB,MAGd2pB,EAGFljB,eAAesjB,GAAf,GAA4D,IAA1B,IAAEvsC,GAAwB,EACjE,MAAMzJ,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEqH,IAAAA,KAGF,IAAKzJ,EAAQ,OAEb,MAAM41C,EAAapkB,GAAsBxxB,GAQzC,MAPyB,aAArB41C,MAAAA,OAAA,EAAAA,EAAYtyC,OACdquB,GAAS,CACP,QAAS,aACT7uB,GAAI8yC,EAAW3pB,IAAInpB,GACnB8G,KAAMgsC,EAAW3pB,MAGd2pB,EAGFljB,eAAeujB,GAAf,GAAqG,IAApE,IAAExsC,EAAF,eAAOqsC,GAA6D,EAC1G,MAAM91C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,cAA8B,CACnEqH,IAAAA,EACAssC,aAAcD,QAAkBrzC,KAGlC,IAAKzC,EAAQ,OAEb,MAAM41C,EAAapkB,GAAsBxxB,GAQzC,MAPyB,aAArB41C,MAAAA,OAAA,EAAAA,EAAYtyC,OACdquB,GAAS,CACP,QAAS,aACT7uB,GAAI8yC,EAAW3pB,IAAInpB,GACnB8G,KAAMgsC,EAAW3pB,MAGd2pB,E,uBChWT,IAAIjkB,GCRAA,GDcGe,eAAewjB,GAAf,GAIJ,IAJgC,KACjC/iC,GAGC,EACD,MAAMnT,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,aAA0B,CAC/D+Q,KAAM9D,GAAoB8D,MAG5B,IAAKnT,EACH,OAGF8J,EAA+B9J,EAAO2D,OACtCmG,EAA+B9J,EAAO0D,OAEtC,MAAMC,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACvDpD,EAAQ1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SAElF,MAAO,CACLwI,UAAWgD,GAAkBtS,EAAOmT,MACpCxP,MAAAA,EACAD,MAAAA,GAIG,SAASyyC,GAAT,GAIJ,IAJ8B,KAC/BhjC,GAGC,EACD,OAAOqkB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,iBAA8B,CACrD+Q,KAAM9D,GAAoB8D,MAIvB,SAASijC,GAAT,GAMJ,IANsC,KACvCjjC,EADuC,YACjCrD,EADiC,MACpBQ,EADoB,mBACb+lC,EADa,aACOC,EADP,YACqBC,EADrB,OACkC9lC,EADlC,UAEvC+lC,GAIC,EACD,OAAOhf,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,yBAAsC,CAC7D+Q,KAAM9D,GAAoB8D,GAC1BrD,YAAajF,GAAeiF,EAAYhN,GAAIgN,EAAY5J,oBACnCzD,IAAjB6zC,GAA8B,CAAEA,aAAAA,WAChB7zC,IAAhB8zC,GAA6B,CAAEA,YAAAA,WACrB9zC,IAAV6N,GAAuB,CAAEA,MAAAA,WACF7N,IAAvB4zC,GAAoC,CAAEA,mBAAAA,WACxB5zC,IAAd+zC,GAA2B,CAAEA,UAAAA,WAClB/zC,IAAXgO,GAAwB,CAAEA,OAAAA,MAI3B,SAASgmC,GAAT,GAIJ,IAJgC,UACjCnnC,EADiC,MACtB7I,GAGV,EACD,OAAO+wB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,mBAAgC,CACvDqE,MAAAA,EACA0M,KAAM9D,GAAoBC,MAIvBojB,eAAegkB,GAAf,GAIJ,IAJyC,KAC1CvjC,EAD0C,cACpChD,GAGL,EACD,MAAMnQ,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,sBAAmC,CACxE+N,cAAeA,QAAiB1N,EAChC0Q,KAAM9D,GAAoB8D,MAG5B,GAAKnT,EAIL,OAAOA,EAAOurB,KAGTmH,eAAeikB,GAAf,GAIJ,IAJ8C,KAC/CxjC,EAD+C,OACzCpG,GAGL,EACD,MAAM/M,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,qBAAkC,CACvE+Q,KAAM9D,GAAoB8D,GAC1Bs1B,IAAK,GACLp2B,QAAS,GACTtF,OAAQA,GAAU,GAClB4rB,MlCtDyC,OkCyD3C,IAAK34B,EACH,OAGF8J,EAA+B9J,EAAO2D,OACtCmG,EAA+B9J,EAAO0D,OAEtC,MAAMC,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACvDpD,EAAQ1D,EAAO0D,MAAMd,KAAKoiC,GAAMjc,GAAwBic,KAAI1iC,OAAgBwE,SASlF,OAPA6qB,GAAS,CACP,QAAS,8BACT4K,YAAappB,EAAKrQ,GAClB4P,aAAc1S,EAAO0S,aAAa9P,IAAIiN,IACtC+6B,WAAY5qC,EAAO4qC,aAGd,CACLjnC,MAAAA,EAAOD,MAAAA,GAIJ,SAASkzC,GAAT,GAIJ,IAJ4B,KAC7BzjC,GAGC,EACD,OAAOqkB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,eAA4B,CACnD+Q,KAAM9D,GAAoB8D,MAIvBuf,eAAemkB,GAAf,GAIJ,IAJiC,KAClC1jC,EADkC,WAC5B2jC,EAD4B,OAChB9nC,GAGjB,EACD,MAAMhP,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,cAA2B,CAChE+Q,KAAM9D,GAAoB8D,GAC1B4jC,OAAQ,IAAI30C,EAAAA,IAAAA,cACZkO,OAAO,EACPgmC,cAAc,EACdtnC,OAAQ,IAAI5M,EAAAA,IAAAA,SAAgB,CAC1BqF,KAAMwH,KAAKC,UAAUF,KAEvB8nC,WAAAA,KAGF,GAAK92C,GAEDA,aAAkBoC,EAAAA,IAAAA,QAAgB,CACpC,MAAM40C,EAASh3C,EAAOgkC,QAAQ9hC,MAAMg8B,GAAMA,aAAa97B,EAAAA,IAAAA,kBACvD,KAAM40C,aAAkB50C,EAAAA,IAAAA,iBAAyB,OAEjD,OAAOkQ,GAAkB0kC,EAAO7jC,OAM7Buf,eAAeukB,GAAf,GAIJ,IAJmC,KACpC1uC,GAGC,EACD,MAAM+N,EAAWzJ,KACX7M,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,gBAA6B,CAClEmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnCoQ,SAAAA,KAGF,GAAKtW,GAEDA,aAAkBoC,EAAAA,IAAAA,QAAgB,CACpC,MAAM40C,EAASh3C,EAAOgkC,QAAQ,GAC9B,GAAIgT,aAAkB50C,EAAAA,IAAAA,gBACpB,OAAOkQ,GAAkB0kC,EAAO7jC,OAO/B,SAAS+jC,GAAT,GAIJ,IAJuC,KACxC/jC,EADwC,OAClCnE,GAGL,EACD,OAAOwoB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,0BAAuC,CAC9D+Q,KAAM9D,GAAoB8D,GAC1BnE,OAAQ,IAAI5M,EAAAA,IAAAA,SAAgB,CAC1BqF,KAAMwH,KAAKC,UAAUF,QAKpB,SAASmoC,GAAT,GAIJ,IAJ8C,KAC/ChkC,EAD+C,WACzCikC,GAGL,EACD,OAAO5f,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,iCAA8C,CACrE+Q,KAAM9D,GAAoB8D,GAC1BikC,WAAAA,KAIG,SAASC,GAAT,GAIJ,IAJwC,KACzClkC,GAGC,EACD,OAAOqkB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,2BAAwC,CAC/D+Q,KAAM9D,GAAoB8D,MAIvBuf,eAAe4kB,KACpB,MAAMC,QAAiB/f,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,KAErE,GAAKm1C,KAAYA,aAAoBn1C,EAAAA,IAAAA,SAAAA,qBAErC,MAAO,CACLo1C,EAAGD,EAASC,EACZC,EAAG5vC,MAAM2C,KAAK+sC,EAASE,GACvBvL,OAAQrkC,MAAM2C,KAAK+sC,EAASrL,SAIzB,SAASwL,GAAT,GAIJ,IAJyB,KAC1BvkC,EAD0B,OACpBwkC,GAGL,EACD,OAAOngB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,YAAyB,CAChDmG,KAAMgH,GAAoB4D,GAC1BrE,OAAQ6oC,EAAS,IAAIv1C,EAAAA,IAAAA,2BAAsC,IAAIA,EAAAA,IAAAA,gCAI5DswB,eAAeklB,GAAf,GAIJ,IAJ+B,KAChChuC,EADgC,OAC1B0K,EAD0B,QAClBpR,GAGb,EACD,MAAMlD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,YAAyB,CAC9DkU,SAAUzJ,KACVjE,OAAQiC,GAAejB,EAAK9G,GAAI8G,EAAK1D,YACrCoO,OAAQ/J,GAAOC,KAAK8J,MAChBpR,GAAW,CAAE0N,OAAO,GACxB2C,SAAUkC,QAGZ,IAAKzV,EACH,OAAO,EAGT,MAAMmT,EAAOD,GAAelT,EAAOoT,WAOnC,OALAue,GAAS,CACP,QAAS,kBACTxe,KAAAA,KAGK,EAGF,SAAS0kC,GAAT,GAIJ,IAJ2B,KAC5B1kC,EAD4B,OACtB2kC,EADsB,QACdC,GAGb,EACD,OAAOvgB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,cAA2B,CAClD01C,OAAAA,EACAvvC,KAAMgH,GAAoB4D,GAC1B4kC,QAAAA,KAIG,SAASC,GAAT,GAIJ,IAJ0B,KAC3B7kC,GAGC,EACD,OAAOqkB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,aAA0B,CACjDmG,KAAMgH,GAAoB4D,MAIvBuf,eAAeulB,GAAf,GAIJ,IAJ8B,KAC/B9kC,EAD+B,GACzBkB,GAGL,EACD,MAAMrU,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,WAAwB,CAC7DmG,KAAMgH,GAAoB4D,GAC1BkB,GAAI9J,GAAOC,KAAK6J,GAChBd,SAAUkC,QAGPzV,IAILmT,EAAOD,GAAelT,EAAOoT,WAE7Bue,GAAS,CACP,QAAS,kBACTxe,KAAAA,KAIGuf,eAAewlB,GAAf,GAIJ,IAJ+B,KAChC/kC,EADgC,GAC1BglC,EAD0B,eACtBxkC,GAGT,EACD,MAAM3T,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,YAAyB,CAC9DmG,KAAMgH,GAAoB4D,GAC1BglC,GAAI5tC,GAAOC,KAAK2tC,GAChBxkC,eAAgB5I,GAAAA,CAAO4I,GACvBJ,SAAUkC,QAGPzV,IAILmT,EAAOD,GAAelT,EAAOoT,WAE7Bue,GAAS,CACP,QAAS,kBACTxe,KAAAA,KAIG,SAASilC,GAAT,GAIJ,IAJ+B,KAChC3wC,EADgC,KAC1B0L,GAGL,EACD,OAAOqkB,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,kBAA+B,CACtDqF,KAAM8C,GAAOC,KAAK/C,GAClBc,KAAMgH,GAAoB4D,MExWvB,SAASklC,GAAqBC,GACnC,GAAKA,EAGL,OAAOn0C,OAAOijC,OAAOkR,GAAiB11C,KAAKiJ,IAClC,CACL/I,GAAI+I,EAAO/I,GACX2D,MAAOoF,EAAOpF,MACdqR,OAAQjM,EAAO0sC,OAAO74C,QAAO,CAAC84C,EAAIC,IAAQD,EAAKC,EAAI3gC,OAAOhL,cAAc,GACxEyrC,OAAQ1sC,EAAO0sC,OAAO31C,KAAI,IAAuB,IAAtB,MAAE81C,EAAF,OAAS5gC,GAAa,EAC/C,MAAO,CACL4gC,MAAAA,EACA5gC,OAAQA,EAAOhL,qBAiDlB,SAAS6rC,GAAiBC,GAC/B,MAAM,OACJC,EADI,mBAEJC,EAFI,gBAGJC,EAHI,WAIJC,EAJI,eAKJC,EALI,aAMJC,EANI,UAOJC,EAPI,QAQJ1pC,GACEmpC,GAEE,KACJx4B,EADI,cAEJg5B,EAFI,eAGJC,EAHI,eAIJC,EAJI,yBAKJC,EALI,SAMJC,EANI,gBAOJC,EAPI,gBAQJC,EARI,SASJ3hC,EATI,OAUJwgC,GACE9oC,EAEEkqC,EAAepB,EAAO31C,KAAI,QAAC,MAAE81C,EAAF,OAAS5gC,GAAV,QAAwB,CACtD4gC,MAAAA,EACA5gC,OAAQA,EAAOhL,kBAEX,gBAAE4B,GAAoByqC,GAAa,GACnCS,EAA+CT,EAAY14C,EAAuB04C,QAAa12C,EACjGm3C,GAAelrC,IACjBkrC,EAAYlrC,gBAAkBjO,EAAuBiO,IAGvD,MAAMmrC,EAAaX,EAAejqC,KAAK6qC,MAAMZ,EAAazxC,MAAQ,GAElE,MAAO,CACLqxC,mBAAAA,EACAC,gBAAAA,EACAF,OAAQt4C,OAAOs4C,GACfG,WAAYz4C,OAAOy4C,GACnBC,eAAAA,EACAE,UAAWS,EACXnqC,QAAS,CACP2Q,KAAAA,EACAg5B,cAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,yBAAAA,EACAC,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACA3hC,SAAAA,EACAwgC,OAAQoB,GAEVT,aAAc,CACZa,mBAAoBF,EAAWG,qBAC/BC,YAAaJ,EAAWK,aACxBC,QAASN,EAAWO,SACpBC,eAAgBR,EAAWS,gBAC3BC,YAAaV,MAAAA,OAAF,EAAEA,EAAYW,eAKxB,SAASC,GAAwB7B,GACtC,MAAM,QACJnpC,EAAS0Q,YAAavU,EADlB,MACwBnF,EADxB,MAC+B9D,GACjCi2C,GACE,KACJx4B,EADI,SACErI,EADF,OACYwgC,EADZ,UACoBmC,EADpB,kBAC+BC,GACjClrC,EAEEiJ,EAAc6/B,EAAO74C,QAAO,CAAC84C,EAAIC,IAAQD,EAAKC,EAAI3gC,OAAOhL,cAAc,GAE7E,MAAO,CACLlB,KAAAA,EACAnF,MAAAA,EACA9D,MAAO0d,GAAoB1d,GAC3BmV,OAAQY,EACRX,SAAAA,EACAuI,OAAQF,EACRw6B,YAAaF,EACbC,kBAAAA,GAIG,SAASE,GAAqBC,GACnC,MAAM,WACJC,EADI,eACQC,EADR,OACwBx0C,EADxB,cACgCy0C,EADhC,SAC+CljC,EAD/C,cACyDmjC,GAC3DJ,EAEJ,MAAO,CACLC,WAAAA,EACAC,eAAgBA,EAAep4C,KAAKu9B,GAAM1hB,GAAsB0hB,KAChE8a,cAAAA,EACAljC,SAAAA,EACAvR,OAAQA,EAAO5D,IAAI0b,IAAkBhc,OAAOwE,SAC5Co0C,cAAeA,EAAc1pC,YDnJ1BkhB,eAAeyoB,GAAf,GAWU,IAX2B,aAC1CC,EAD0C,YAE1CC,EAF0C,WAG1CC,GAQe,EACf,MAAMt7C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,sBAAsC,CAC3EqN,QAASD,GAAkB4rC,GAC3BlnB,KAAMonB,QAAc74C,EACpBgM,KAAMD,GAAkB6sC,MAE1B,IAAKr7C,EACH,OAGF,MAAM,GAAE8C,EAAF,gBAAMw1C,GAAoBt4C,EAChC,OAAK8C,EAIE,CACLA,GAAAA,EACAw1C,gBAAiBD,GAAqBC,SANxC,EAUK5lB,eAAe6oB,GAAf,GAYJ,IAZmC,aACpCH,EADoC,OAEpCvC,EAFoC,gBAGpC2C,EAHoC,iBAIpCC,EAJoC,YAKpCC,GAOC,EACD,MAAM17C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,gBAAgC,CACrEy2C,OAAQ9tC,GAAAA,CAAO8tC,GACfppC,QAASD,GAAkB4rC,GAC3BI,gBAAAA,EACAC,iBAAAA,EACAC,YAAa,IAAIt5C,EAAAA,IAAAA,wBAA+B,CAC9C8xB,KAAMwnB,EAAYxnB,KAClBzsB,KAAM,IAAIrF,EAAAA,IAAAA,SAAgB,CAAEqF,KAAMwH,KAAKC,UAAUwsC,EAAYj0C,aAIjE,KAAIzH,aAAkBoC,EAAAA,IAAAA,SAAAA,2BAStB,OAAO0E,QAAQ9G,GARb2xB,GAAS,CACP,QAAS,kCACTloB,IAAKzJ,EAAOyJ,MASXipB,eAAeipB,GAAeP,GACnC,MAAMp7C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,eAA+B,CACpEqN,QAASD,GAAkB4rC,MAG7B,GAAKp7C,EAQL,OAJIA,EAAO2C,QACTsB,EAAAA,aAAqBjE,EAAO2C,MAAM8G,KAAOzJ,EAAO2C,OAG3C,CACLi2C,KAAMD,GAAiB34C,GACvByP,QAASgrC,GAAwBz6C,IAI9B0yB,eAAekpB,GAAW3xC,EAAe0F,GAC9C,MAAM3P,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,kBAAkC,CACvEmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyJ,MAAAA,KAEF,GAAK3P,EAIL,OC1FK,SAAsB67C,GAC3B,MAAM,QACJpsC,EADI,KAEJhB,EAFI,SAGJqtC,EAHI,SAIJ/jC,EAJI,YAKJW,EALI,iBAMJqjC,GACEF,GAEE,gBAAEntC,EAAF,MAAmBX,EAAnB,KAA0B0e,GAAUhe,GAAQ,IAE5C,OAAE8pC,GAAW9oC,EACbusC,EAAczD,EAAO31C,KAAI,QAAC,MAAE81C,EAAF,OAAS5gC,GAAV,QAAwB,CACrD4gC,MAAAA,EACA5gC,OAAQA,EAAOhL,iBAGjB,IAAImvC,EACAC,EAYJ,OAVIJ,IACFG,EAAiBH,EAASvD,OAAO31C,KAAI,IAAuB,IAAtB,MAAE81C,EAAF,OAAS5gC,GAAa,EAC1D,MAAO,CACL4gC,MAAAA,EACA5gC,OAAQA,EAAOhL,iBAGnBovC,EAAiBJ,EAASr1C,OAGrB,CACLsR,SAAAA,EACAwgC,OAAQyD,EACRvtC,KAAM,CAAEC,gBAAAA,EAAiBX,MAAAA,EAAO0e,KAAAA,GAChC/T,YAAaA,EAAY5L,aACzBivC,iBAAAA,EACAE,eAAAA,EACAC,eAAAA,GDoDKC,CAAan8C,GAGf0yB,eAAe0pB,KACpB,MAAMp8C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,iBACvC,IAAKpC,EAAQ,OAEb8J,EAA+B9J,EAAO2D,OAEtC,MAAMA,EAAQ3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAOwE,SAOpD,OANA9G,EAAOwG,OAAOa,SAASuJ,IACjBA,aAAiBxO,EAAAA,IAAAA,WACnB6B,EAAAA,UAAkB2M,EAAM9N,GAAG0O,YAAcZ,MAItC,CACLkqC,MAAOD,GAAqB76C,GAC5B2D,MAAAA,GE9HG+uB,eAAe2pB,GAAf,GAMJ,IAN8B,KAC/B9zC,EAD+B,OAE/BuG,EAF+B,YAG/BqR,GAGC,EAOD,aANqBqX,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,WAA0B,CAC/DmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnC4I,OAAQD,GAAuBC,GAC/B3F,QAASgX,KAMNuS,eAAe4pB,GAAf,GAOJ,IAPsC,KACvC/zC,EADuC,MAEvC5F,EAFuC,OAGvCmM,EAHuC,YAIvCqR,GAGC,EACD,MAAMkJ,ExBuVD,SAAyB1mB,GAC9B,MAAM45C,EAAat4C,EAAAA,OAAetB,MAAAA,OAAf,EAAeA,EAAOG,IAEzC,GAAKy5C,EAIL,OAAO,IAAIn6C,EAAAA,IAAAA,WAAkBvC,EAAK08C,EAAY,CAC5C,KACA,aACA,mBwBjWcC,CAAgB75C,GAChC,GAAK0mB,EASL,aAPqBmO,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,mBAAkC,CACvEmG,KAAMsC,GAAetC,EAAKzF,GAAIyF,EAAKrC,YACnCmjB,QAAAA,EACAva,OAAQD,GAAuBC,GAC/B3F,QAASgX,KAMNuS,eAAe+pB,GAAf,GAIJ,IAJyC,KAC1C7sB,EAD0C,gBACpCC,EADoC,sBACnBE,GAGtB,EAOD,aANqByH,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,4BAA2C,CAChFwtB,KAAM7kB,GAAAA,CAAO6kB,WACWntB,IAApBotB,EAAgC,CAAEC,sBAAuBD,QAAoBptB,UACnDA,IAA1BstB,EAAsC,CAAEC,2BAA4BD,QAA0BttB,KAM/FiwB,eAAegqB,GAAf,GAIJ,IAJoC,KACrCC,GAGC,EAKD,aAJqBnlB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,oBAAmC,CACxEw6C,qBAAsBD,K,uBC5B1B,SAASE,GAAiBC,GACxB,MAAM,eAAEC,GAAmBD,EAC3B,OAAOC,EAAiB54C,OAAOpE,KAAKg9C,GAAgBr9C,QAAO,CAAC4xB,EAA6B7xB,KACvF,MAAM0gC,EAAI4c,EAAet9C,GAYzB,OAXAwE,EAAAA,UAAkBk8B,EAAEr9B,IAAM,IAAIV,EAAAA,IAAAA,SAAgB,CAC5CU,GAAIiI,GAAAA,CAAOo1B,EAAEr9B,IACboD,WAAY6E,GAAAA,CAAOo1B,EAAE6c,aACrBC,KAAM,EACN78C,SAAU,YACV6mC,cAAe18B,GAAOC,KAAK0yC,KAAK/c,EAAEgd,sBAC/B97C,QAAQ,KAAM,KACdA,QAAQ,KAAM,SAGnBiwB,EAAI7xB,GAAO0gC,EAAEr9B,GACNwuB,IACN,IAAM,GAGX,SAAS8rB,GAASN,EAA4Br9C,EAAY49C,GAGxD,MAAO,CAFcP,EAAW,GAAEr9C,cAAkBf,EAAe2+C,GAAa,GAC3DP,EAAW,GAAEr9C,cAAkBf,EAAe2+C,GAAa,ICrBlF,MACMC,GAAkB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAEhD,SAASC,GAAT,GAQJ,IAR2B,UAC5BvvC,EAD4B,SAE5BC,EAF4B,MAG5B+B,GAKC,EACD,OAAOwnB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,cAA6B,CACpD4L,UAAWA,GAAa,GACxBC,SAAUA,GAAY,GACtB+B,MAAOA,GAAS,MAIb,SAASwtC,GAAc/oC,GAC5B,OAAO+iB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,cAA6B,CAAEqS,SAAAA,KAGnD,SAASgpC,GAAehpC,GAC7B,OAAO+iB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,eAA8B,CAAEqS,SAAAA,KAGpDie,eAAegrB,GAAmBzlB,GACvC,MAAM0O,QAAkB3O,GAAWC,GACnC,OAAOT,GAAc,IAAIp1B,EAAAA,IAAAA,OAAAA,mBAAiC,CACxD61B,KAAM0O,KAIHjU,eAAeirB,GAAmB1lB,GACvC,MAAM0O,QAAkB3O,GAAWC,SAC7BT,GAAc,IAAIp1B,EAAAA,IAAAA,OAAAA,mBAAiC,CACvD61B,KAAM0O,KAIHjU,eAAekrB,KACpB,MAAM59C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,cAA6B,CAAEwtB,KAAM7kB,GAAAA,CAAO,QAEnF,IAAK/K,GAAUA,aAAkBoC,EAAAA,IAAAA,QAAAA,sBAC/B,OAGF,MAAMy7C,EAAqB79C,EAAO89C,WAAWx7C,QAAQ6sB,GAE/CA,aAAqB/sB,EAAAA,IAAAA,WAClB+sB,EAAU3qB,oBAAoBpC,EAAAA,IAAAA,WAK7B+sB,EAAU4uB,SAA2C,gCAAhC5uB,EAAU3qB,SAASpE,WAOlD,OAJAy9C,EAAmBx2C,SAAS8nB,IAC1BlrB,EAAAA,UAAkB1D,OAAO4uB,EAAU3qB,SAAS1B,KAAOqsB,EAAU3qB,YAGxD,CACLs5C,WAAYD,EAAmBj7C,IAAIssB,IAAmB5sB,OAAqBwE,UAIxE4rB,eAAesrB,GAAgB/lB,GACpC,MAAM0O,QAAkB3O,GAAWC,GAE7Bj4B,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,gBAA+B,CACpE61B,KAAM0O,EACNvmC,SAAU63B,EAAK30B,KACfk6B,SAAU,IAAIp7B,EAAAA,IAAAA,qBAGhB,KAAKpC,GAAYA,aAAkBoC,EAAAA,IAAAA,WACjC,OAGF,MAAM+sB,EAAYD,GAAkBlvB,GACpC,OAAKmvB,GAILlrB,EAAAA,UAAkB1D,OAAOP,EAAOwE,SAAS1B,KAAO9C,EAAOwE,SAEhD,CAAE2qB,UAAAA,SANT,EASKuD,eAAeurB,KACpB,MAAMj+C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAChEu2B,MvCnE8B,OuCqEhC,GAAK34B,EAML,OAFAk5B,GAAcl5B,GAEP,CACL2D,MAAO3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACtDpD,MAAO1D,EAAO0D,MAAMd,KAAKqH,GAAS8e,GAAwB9e,OAAMxH,GAAW,KAAOH,OAAgBwE,SAClGo3C,WAAYl+C,EAAOwtB,QAAQ5qB,KAAK4qB,GAAY7kB,EAAwB6kB,EAAQvkB,UAC5EghC,WAAYjqC,aAAkBoC,EAAAA,IAAAA,SAAAA,aAA+BpC,EAAO0G,MAAQ1G,EAAOwtB,QAAQhsB,QAIxF,SAAS07B,GAAaxyB,EAAsBxE,GACjD,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,MAAsB,CAC7CU,GAAI+H,GAAeH,EAAcxE,MAI9B,SAASi4C,GAAezzC,EAAsBxE,GACnD,OAAOsxB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,QAAwB,CAC/CU,GAAI+H,GAAeH,EAAcxE,MAI9BwsB,eAAe0rB,KACpB,MAAMp+C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,mBACvC,GAAKpC,EAIL,MAAO,CACLq+C,eAAgB9+C,EAAqBS,EAAOq+C,eAAez7C,IAAIwsB,IAAkB,QACjFkvB,QAASt+C,EAAO48C,sBAIb,SAAS2B,GAAuB3uB,GACrC,OAAO4H,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,mBAAkC,CAAEwtB,KAAM7kB,GAAAA,CAAO6kB,MAGrE,SAAS4uB,KACd,OAAOhnB,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,qBAGpBswB,eAAe+rB,KACpB,MAAMz+C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,sBACvC,GAAKpC,EAIL,OAAOT,EAAqBS,EAAOq+C,eAAez7C,IAAIqtB,IAAqB,QAGtE,SAASyuB,GAA0B9uB,GACxC,OAAO4H,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,sBAAqC,CAAEwtB,KAAM7kB,GAAAA,CAAO6kB,MAGxE,SAAS+uB,KACd,OAAOnnB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,wBAGpBswB,eAAeksB,GAAf,GAE0B,IAFiB,iBAChD95B,GAC+B,EAC/B,MAAM9kB,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,oBAAmC,CACxEy8C,cAAc,KAGhB,GAAM7+C,aAAkBoC,EAAAA,IAAAA,SAAkBpC,aAAkBoC,EAAAA,IAAAA,gBAM5D,OAFA82B,GAAcl5B,GAEPA,EAAOgkC,QAAQtkC,QAAO,CAAC4xB,EAAK0lB,IAC3BA,aAAkB50C,EAAAA,IAAAA,sBAA+B40C,EAAOzuC,gBAAgBnG,EAAAA,IAAAA,YAI9EkvB,EAAI/pB,KnB5FD,SACLggB,EAA+Chf,EAAuBuc,GAEtE,MAAM,OACJ0C,EADI,UACIC,EADJ,aACeq3B,EADf,WAC6BC,GAC/Bx3B,EAEEy3B,EAAWl4C,QAAQi4C,KAAgBA,aAAsB38C,EAAAA,IAAAA,wBAE/D,MAAO,CACLyG,OAAQF,EAAwBJ,GAChC2I,QAASsW,GAAgC,iBAAdC,GAA0B5C,GAAcC,GAAoB2C,MAClFu3B,GAAY,CAAEtZ,UAAU,WACRjjC,IAAjBq8C,GAA8B,CAAEG,mBAAoBn4C,QAAQg4C,KmB+EvDI,CAAwBlI,EAAOzvB,eAAgByvB,EAAOzuC,KAAKA,KAAMuc,IAEnEwM,GALEA,GAMR,IAGEoB,eAAeysB,GAAf,GAE0B,IAFe,iBAC9Cr6B,GAC+B,EAC/B,MACEs6B,EACAC,EACAC,EACAC,SACQ/pB,QAAQsN,IAAI,CACpBtL,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,8BAClBo1B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,kBAAiC,CACjDmG,KAAM,IAAInG,EAAAA,IAAAA,oBAEZo1B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,kBAAiC,CACjDmG,KAAM,IAAInG,EAAAA,IAAAA,oBAEZo1B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,kBAAiC,CACjDmG,KAAM,IAAInG,EAAAA,IAAAA,2BAId,IAAKi9C,IAAwCC,IAA+BC,EAC1E,OAAO,EAGT,MACE/3B,OAAQg4B,EAAe/3B,UAAWg4B,EAAkBX,aAAcY,GAChEL,GAEF73B,OAAQm4B,EAAal4B,UAAWm4B,EAAgBd,aAAce,GAC5DP,GAEF93B,OAAQs4B,EAAiBr4B,UAAWs4B,EAAoBjB,aAAckB,GACpET,EAEJ,MAAO,CACLU,+BAAgCb,EAChCc,+BACEV,GACgC,iBAArBC,GAAiC56B,GAAcC,GAAoB26B,GAEhFU,8BAA+BT,EAC/BU,wBACET,GAA0C,iBAAnBC,GAClB/6B,GAAcC,GAAoB86B,GAEzCS,uBAAwBR,EACxBS,4BACER,GAAkD,iBAAvBC,GACtBl7B,GAAcC,GAAoBi7B,GAEzCQ,2BAA4BP,GAIzB,SAASQ,GAAgC9a,GAC9C,OAAOlO,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,6BAA4C,CAAEolB,OAAQke,KAG1E,SAAS+a,GAA2Bl0B,EAApC,GAMJ,IACGhkB,GAPkF,SACtFm9B,EADsF,mBAEtFuZ,GAIC,EAGC12C,EADe,YAAbgkB,EACK,IAAInqB,EAAAA,IAAAA,iBACW,UAAbmqB,EACF,IAAInqB,EAAAA,IAAAA,iBAEJ,IAAIA,EAAAA,IAAAA,sBAGb,MAAMo7B,EAAW,CACfshB,aAAcG,EACdz3B,OAAQke,EACRje,UAAWie,EApQI,WAoQoB,GAGrC,OAAOlO,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,qBAAoC,CAC3DmG,KAAAA,EACAi1B,SAAU,IAAIp7B,EAAAA,IAAAA,wBAA+Bo7B,MAI1C9K,eAAeguB,KACpB,MAAM1gD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,CAClEu+C,SvCrG6B,auCuG/B,GAAK3gD,EAIL,OAAOA,EAAO4C,IAAInC,GAGbiyB,eAAekuB,GAAf,GAGJ,IAHiC,gBAAEC,EAAF,SAAmBxQ,GAGpD,EACD,MAOMyQ,SAPgBtrB,QAAQsN,IAAI+d,EAAgBj+C,KAAK+9C,GAC9CnpB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,YAA4B,CACnDu+C,SAAAA,EACAtQ,SAAUiN,GAAgBllC,SAASi4B,GAAa,GAAEA,QAAiBA,SAKpE/tC,OAAkCwE,SAClClE,KAAK5C,GACGT,EAAqBS,EAAO+gD,QAAQn+C,IAAmBnC,GAAyB,SAG3F,GAAKqgD,EAAYt/C,OAIjB,MAAO,CAAEm/C,SAAUx8C,OAAOC,OAAO,MAAO08C,EAAYE,YAG/CtuB,eAAeuuB,GAAf,GAEJ,IAFoC,SAAEN,EAAF,SAAYtQ,EAAZ,KAAsBtwC,GAE1D,EACD,MAAMC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,WAA2B,CAChEu+C,SAAAA,EACAtQ,SAAUiN,GAAgBllC,SAASi4B,GAAa,GAAEA,QAAiBA,EACnEtwC,KAAAA,KAGF,GAAKC,EAIL,OAAOA,EAAO4C,IAAInC,GAGbiyB,eAAewuB,GAAqBtyC,GACzC,MAAMnP,EAAMkP,GAAqBC,GAC3B5O,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,WAA0B,CAAE3C,IAAAA,KAEnE,GAAKO,EAML,OAFAk5B,GAAcl5B,GAEPkwB,GAAkBlwB,EAAOmwB,OAG3B,SAASgxB,GAAeC,GAC7B,MACMC,EdhOC1sB,GcgOetF,QAAQiyB,aAAaC,SAC3C,OAAO/pB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,eAA8B,CACrDo/C,UAAW,GACXH,OAAAA,EACAI,YAAY,EACZC,UAAW,GACXN,MAAAA,KAIG,SAASO,GAAiBP,GAC/B,OAAO5pB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,iBAAgC,CACvDo/C,UAAW,GACXE,UAAW,GACXN,MAAAA,KAIG1uB,eAAekvB,GACpBhzC,EAA2BuhB,GAE3B,MAAM1wB,EAAMkP,GAAqBC,GAC3BizC,EAA8C,GAsBpD,OApBI1xB,EAAM2xB,cACRD,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,4BAAmC,CACvDuB,MAAOwsB,EAAM2xB,aAAal/C,KAAI,QAAC,GAAEE,EAAF,WAAMoD,GAAP,SAAwB+E,GAAiBnI,EAAIoD,SAG3EiqB,EAAM4xB,cACRF,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,uCAA8C,CAClEsB,MAAOysB,EAAM4xB,aAAan/C,KAAI,QAAC,GAAEE,GAAH,SAAYmI,GAAiBnI,SAG3DqtB,EAAM6xB,cACRH,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,+BAAsC,CAC1DuB,MAAOwsB,EAAM6xB,aAAap/C,KAAI,QAAC,GAAEE,EAAF,WAAMoD,GAAP,SAAwB+E,GAAiBnI,EAAIoD,SAG3EiqB,EAAM8xB,cACRJ,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,0CAAiD,CACrEsB,MAAOysB,EAAM8xB,aAAar/C,KAAI,QAAC,GAAEE,GAAH,SAAYmI,GAAiBnI,SAGvDqtB,EAAMC,YACZ,IAAK,YACHyxB,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,2BACtB,MAEF,IAAK,WACHy/C,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,gCACtB,MAEF,IAAK,cACHy/C,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,mCACtB,MAEF,IAAK,SACHy/C,EAAat6C,KAAK,IAAInF,EAAAA,IAAAA,8BAI1B,MAAMpC,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,WAA0B,CAAE3C,IAAAA,EAAK0wB,MAAO0xB,KAE/E,GAAK7hD,EAML,OAFAk5B,GAAcl5B,GAEPkwB,GAAkBlwB,EAAOmwB,OAG3BuC,eAAewvB,GAAeC,SAC7B3qB,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,aAA4B,CAAEggD,SAAUD,KAG3DzvB,eAAe2vB,KACpB,MAAMriD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,oBACvC,GAAKpC,EAIL,MAAO,CACLsiD,mBAAoBx7C,QAAQ9G,EAAOuiD,kBACnCC,mBAAoB17C,QAAQ9G,EAAOyiD,qBAIhC,SAASC,GAAsB5gB,GACpC,OAAOtK,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,mBAAkC,CACzDmgD,iBAAkBzgB,QAAar/B,KAI5BiwB,eAAeiwB,KACpB,MAAM3iD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,cACvC,GAAKpC,EAEL,ODzZK,SAAwBqxB,GAC7B,MAAMyrB,EAAY1rB,GAAUC,GAE5B,MAAO,CACLuxB,YAAa/F,GAAiBC,GAC9B+F,gBAAiB/F,EAAUgG,kBAC3BC,qBAAsBjG,EAAUkG,8BAChCC,gBAAiBnG,EAAUoG,6BAC3BC,iBAAkBrG,EAAUsG,mBAAqB,GACjDC,eAAgBvG,EAAUwG,iBAAmB,GAC7CC,eAAgBzG,EAAU0G,kBAAoB,GAC9CC,mBAAoB3G,EAAU4G,qBAC9BC,mBAAoB7G,EAAU8G,qBAC9BC,yBAA0B/G,EAAUgH,yBACpCC,OAAQ,CACNplD,mBAAoBy+C,GAASN,EAAW,uBAAwB,sBAChEl+C,cAAew+C,GAASN,EAAW,uBAAwB,iBAC3Dj+C,UAAWu+C,GAASN,EAAW,mBAAoB,aACnDh+C,mBAAoBs+C,GAASN,EAAW,6BAA8B,sBACtE/9C,cAAeq+C,GAASN,EAAW,uBAAwB,iBAC3D99C,mBAAoBo+C,GAASN,EAAW,uBAAwB,sBAChE79C,cAAem+C,GAASN,EAAW,uBAAwB,iBAC3D59C,SAAUk+C,GAASN,EAAW,iBAAkB,YAChD39C,eAAgBi+C,GAASN,EAAW,wBAAyB,kBAC7D19C,YAAag+C,GAASN,EAAW,qBAAsB,iBCiYpDkH,CAAehkD,GAGxB,SAASk5B,GACPl5B,GAKA8J,EAA+B9J,EAAO2D,OACtCmG,EAA+B9J,EAAO0D,OAGjCgvB,eAAeuxB,GAAf,GAA8E,IAA9C,SAAE5T,EAAW,MAAiC,EACnF,MAAM6T,QAAoB1sB,GAAc,IAAIp1B,EAAAA,IAAAA,KAAAA,iBAA6B,CACvEiuC,SAAAA,KAGF,GAAM6T,aAAuB9hD,EAAAA,IAAAA,KAAAA,cAG7B,OnBjVK,SAA6B+hD,GAClC,MAAMC,EAAqBD,EAAU7hD,QAAO,QAAC,OAAEuuB,GAAH,SAAiBA,KAgB7D,MAAO,CACLwzB,WAhBiBD,EAChBxhD,KAAK+tB,GACJA,EAAQ2zB,aAAa1hD,KAAKguB,GAASF,GAAgBC,EAASC,OAE7D2zB,OACAC,MAAK,CAAC3iC,EAAe4iC,IACpB5iC,EAAE4K,KAAO5K,EAAE4K,KAAKi4B,cAAcD,EAAEh4B,MAAS5K,EAAEkP,YAAY2zB,cAAcD,EAAE1zB,eAWzE4zB,QARkBP,EACjBxhD,KAAK+tB,GAAYD,GAAgBC,EAASA,EAAQ2zB,aAAa,MAC/DE,MAAK,CAAC3iC,EAAG4iC,IACR5iC,EAAE4K,KAAO5K,EAAE4K,KAAKi4B,cAAcD,EAAEh4B,MAAS5K,EAAEkP,YAAY2zB,cAAcD,EAAE1zB,gBmBmUpE6zB,CAAoBV,EAAYC,WAGlCzxB,eAAemyB,KACpB,MAAM7kD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,0BAEvC,GAAKpC,EAIL,MAAO,CACL8kD,kCAAmCh+C,QAAQ9G,EAAO+kD,mCAI/CryB,eAAesyB,GAAf,GAEJ,IAF+C,kCAAEF,GAEjD,EACD,MAAM9kD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,QAAAA,yBAAwC,CAC7Eo7B,SAAU,IAAIp7B,EAAAA,IAAAA,sBAA6B,CACzC2iD,iCAAkCD,OAItC,GAAK9kD,EAIL,MAAO,CACL8kD,kCAAmCh+C,QAAQ9G,EAAO+kD,mCC/f/C,SAASE,GAAT,GAKJ,IAL0C,KAC3Ch7C,EAD2C,SAE3C22B,GAGC,EACD,OAAOpJ,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,UAA0B,CACjDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCwD,OAAQ,IAAItH,EAAAA,IAAAA,gCAAuC,CACjDw+B,SAAAA,OAKC,SAASskB,GAAT,GAOJ,IAPkC,KACnCj7C,EADmC,SAEnC22B,EAFmC,UAGnChxB,EAHmC,WAInCu1C,GAGC,EACD,OAAO3tB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,UAA0B,CACjDmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCwD,OAAQ,IAAItH,EAAAA,IAAAA,4BAAmC,CAC7Cw+B,SAAAA,EACAjxB,MAAOC,EACPw1C,YAAa,IAAIhjD,EAAAA,IAAAA,SAAgB,CAC/BqF,KAAMwH,KAAKC,UAAU,CACnBm2C,EAAG,EACHxjC,EAAGsjC,EAAWviD,KAAK0iD,IAAD,CAChBA,EAAAA,EACA7jD,EAAG,eAQRixB,eAAe6yB,KACpB,MAAMvlD,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,sBAAsC,KAE7E,GAAKpC,KAAUA,aAAkBoC,EAAAA,IAAAA,SAAAA,+BAmBjC,OAfApC,EAAOgc,UAAU3U,SAASgW,IACpBA,EAASU,sBAAsB3b,EAAAA,IAAAA,WACjC6B,EAAAA,UAAkB1D,OAAO8c,EAASU,WAAWjb,KAAOua,EAASU,YAE3DV,EAASS,2BAA2B1b,EAAAA,IAAAA,WACtC6B,EAAAA,UAAkB1D,OAAO8c,EAASS,gBAAgBhb,KAAOua,EAASS,iBAEhET,EAASY,2BAA2B7b,EAAAA,IAAAA,WACtC6B,EAAAA,UAAkB1D,OAAO8c,EAASY,gBAAgBnb,KAAOua,EAASY,iBAEhEZ,EAASa,sBAAsB9b,EAAAA,IAAAA,WACjC6B,EAAAA,UAAkB1D,OAAO8c,EAASa,WAAWpb,KAAOua,EAASa,eAI1Dle,EAAOgc,UAAUpZ,IAAIgb,IAGvB,SAAS4nC,GAAT,GAIJ,IAJ0B,KAC3Bv7C,EAD2B,UACrB2F,EADqB,SACVyN,GAGhB,EACD,OAAOma,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,aAA6B,IAChDib,GAAY,CAAEA,SAAAA,GAClB9U,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCyJ,MAAOC,KAIJ,SAAS61C,GAAT,GAIJ,IAJmC,IACpChd,EADoC,KAC/Bx+B,GAGJ,EACD,OAAOutB,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,qBAAqC,CAC5DU,GAAI2lC,EACJlgC,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,eAIhCwsB,eAAegzB,GAAf,GAIJ,IAJ6C,KAC9Cz7C,EAD8C,UACxC2F,EADwC,SAC7ByN,EAD6B,OACnBtQ,GAG1B,EACD,MAAM/M,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,wBAAwC,CAC7EmG,KAAMsC,GAAeZ,EAAKnH,GAAImH,EAAK/D,YACnCpD,GAAI8M,KACAyN,GAAY,CAAEA,SAAAA,GAClBsb,MxCvC+B,OwCwC3B5rB,GAAU,CAAEA,OAAAA,MAGlB,IAAK/M,EACH,OAGF8J,EAA+B9J,EAAO2D,OAEtC,MAAM,WAAEinC,EAAF,UAAc5uB,EAAd,MAAyBtV,GAAU1G,EAEzC,MAAO,CACL2D,MAAO3D,EAAO2D,MAAMf,IAAI8qB,IAAcprB,OAAgBwE,SACtD8jC,WAAAA,EACA5uB,UAAWA,EAAUpZ,IAAIsa,IACzBxW,MAAAA,GAIG,SAASi/C,GAAT,GAIJ,IAJgC,SACjCtoC,GAGC,EACD,OAAOma,GAAc,IAAIp1B,EAAAA,IAAAA,SAAAA,mBAAmC,CAC1Dib,SAAAA,KC1CG,SAASuoC,GACd5lD,EAA+B6lD,GAE/B,GAAK7lD,EAAkCmlC,MACrC,OAGF,MAAM19B,EAAOwH,KAAK6qC,MAAO95C,EAA6BqxB,KAAK5pB,OACpDq+C,KAAMC,GAAKt+C,EAAKu+C,QACjBC,EAAiBx+C,EAAKy+C,SAE5B,MAAO,CACL5iD,KAAMuiD,EAAe,OAASp+C,EAAK0+C,MAAMC,GACzCC,UAAYrmD,EAA6BqmD,UACzCC,eAAgB7+C,EAAK8+C,eACrBC,iBAAkB/+C,EAAKg/C,kBACvBC,OAAQZ,EAAE12C,MAAM,GAChBu3C,aAAcl/C,EAAKm/C,SAASC,KAC5BZ,eAAAA,EACAa,UAAWr/C,EAAKs/C,UAAYd,EAC5BJ,aAAAA,EACAmB,SAAUjB,EAAEnjD,KAAKqkD,IACf,MAAMxnD,EAAMwnD,EAAK,GAEjB,MAAO,CACLx6B,KAAMhlB,EAAKy/C,MAAMznD,GACjB0nD,OAQcA,EARM1/C,EAAK2/C,OAAO3nD,GAS/B0nD,EAAME,UAAUF,EAAMG,QAAQ,OAR/BlgB,OAAQ6f,EAAK73C,MAAM,IAO3B,IAAsB+3C,QAJfI,GAAsB9/C,EAAKm/C,SAASY,YAAa1B,EAAE12C,MAAM,KAQhE,SAASm4C,GAAsBE,EAAsBrgB,GACnD,MAAOr3B,EAAKyI,GAAOivC,EAEnB,IAAIC,EAAW,EACXC,EAAWvgB,EAAO5lC,OAAS,EAe/B,OAbA4lC,EAAO//B,SAAQ,CAAC4/C,EAAM/b,MACfwc,GAAYT,GAAQl3C,IACvB23C,EAAWxc,IAGRyc,GAAYV,GAAQzuC,IACvBmvC,EAAWzc,MAOR,CAAE0c,aAAc,CAAEC,MAHX3pD,KAAKsa,IAAI,EAAGkvC,GAAYtgB,EAAO5lC,OAAS,IAGtBwzB,IAFpB92B,KAAK6R,IAAI,EAAG43C,GAAYvgB,EAAO5lC,OAAS,KAEbsmD,eAAgBJ,EAAUK,aAAcJ,GAGjF,SAASK,GAAT,GAA6G,IAA5E,QAAEz4B,EAAF,SAAW04B,GAAiE,EAC3G,MAAMC,EAAS34B,EAAU04B,EAEzB,MAAO,CACL14B,QAAAA,EACA24B,OAAAA,KACID,GAAY,CAAEE,YAAaD,EAAWhqD,KAAKiR,IAAI+4C,GAAUD,EAAY,IAAO,GAAGG,QAAQ,KC/IxF11B,eAAe21B,GAAf,GAE0D,IAFpB,KAC3Cp+C,GAC+D,EAC/D,MAAMjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,kBAA+B,CACpEo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,cACL+D,EAAK0jB,SAAUgP,gBDL/C,IAAgC2rB,EAmJJ7gD,EC5IjC,GAAKzH,EAIL,MDVO,CAELuoD,YAAa3C,IAHsB0C,ECWPtoD,GDREuoD,aAC9BC,eAAgB5C,GAAW0C,EAAME,gBACjCC,UAAW7C,GAAW0C,EAAMG,WAC5BC,cAAe9C,GAAW0C,EAAMI,eAGhCC,eAAiBL,EAAMK,eAA0CvH,MACjEwH,mBAAqBN,EAAMM,mBAA8CxH,MACzEyH,0BAA4BP,EAAMO,0BAAqDzH,MACvF0H,kBAAoBR,EAAMQ,kBAA6C1H,MAGvE2H,UAAWf,GAAwBM,EAAMS,WACzCC,aAAchB,GAAwBM,EAAMU,cAC5CC,cAAejB,GAAwBM,EAAMW,eAC7CC,sBAiI+BzhD,EAjIiB6gD,EAAMY,qBAkIjD,CACLf,YAAc1gD,EAAK0hD,KAAO1hD,EAAK2hD,MAAS,KAAKhB,QAAQ,KAhIrDiB,kBAAmBf,EAAMgB,2BCPtB52B,eAAe62B,GAAf,GAEwD,IAFpB,KACzCt/C,GAC6D,EAC7D,MAAMjK,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,kBAA+B,CACpEo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,cACL+D,EAAK0jB,SAAUgP,gBDM/C,IAA8B2rB,EAgIV7gD,ECpIzB,GAAKzH,EAIL,MDCO,CAELuoD,YAAa3C,IAHoB0C,ECAPtoD,GDGIuoD,aAC9BiB,aAAc5D,GAAW0C,EAAMkB,cAC/Bd,cAAe9C,GAAW0C,EAAMI,eAGhCC,eAAiBL,EAAMK,eAA0CvH,MACjEqI,cAAgBnB,EAAMmB,cAAyCrI,MAC/DsI,aAAepB,EAAMoB,aAAwCtI,MAG7DjgC,QAmHuB1Z,EAnHG6gD,EAAMnnC,OAoH3B,CACL4oB,QAAStiC,EAAKsiC,QACdD,QAASriC,EAAKqiC,UArHdzO,QAAS2sB,GAAwBM,EAAMjtB,SACvCsuB,QAAS3B,GAAwBM,EAAMqB,SACvC/lD,SAAUokD,GAAwBM,EAAM1kD,UACxCgmD,QAAS5B,GAAwBM,EAAMsB,UCdpCl3B,eAAem3B,GAAf,GAMuC,IAND,KAC3C5/C,EAD2C,UAE3C2F,GAI4C,EAC5C,MAAM5P,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,gBAA6B,CAClEo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCyJ,MAAOC,IAC4B3F,EAAK0jB,SAAUgP,gBAEpD,GAAK38B,EAIL,MDGO,CACL8pD,WAAYlE,GCJgB5lD,EDIC8pD,aCD1Bp3B,eAAeq3B,GAAf,GAQ4C,IARF,KAC/C9/C,EAD+C,UAE/C2F,EAF+C,KAG/CqtC,GAKiD,EACjD,MAAMj9C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,yBAAsC,CAC3Eo2B,QAASvtB,GAAiBhB,EAAKnH,GAAImH,EAAK/D,YACxCyJ,MAAOC,EACPmpB,WAAY,IAAI32B,EAAAA,IAAAA,kBAGlB,GAAKpC,EAQL,MAJI,UAAWA,GACb8J,EAA+B9J,EAAO0D,ODfnC,SACL1D,GAEA,GAAKA,GAAY,aAAcA,EAI/B,OAAOA,EAAO4D,SAAShB,KAAKuG,IAC1B,MAAMF,EAASP,EAAgBS,EAAQF,OAA8BH,UAAW,WAC1E0vB,EAAUx4B,EAAO0D,MAAMxB,MAAMu1C,GAAM/uC,EAAe+uC,EAAE30C,GAAI,aAAemG,IAE7E,MAAO,CACL2G,UAAWzG,EAAQrG,GACnB8Y,MAAQzS,EAA2ByS,MACnCnV,MAAQ+xB,EAA2B/xB,MACnCwD,KAAM,CACJnH,GAAImG,EACJ3F,KAAM,kBACNmR,SAAW+jB,EAA2B/jB,SACtC2Q,WAAYC,GAAiBmT,EAA2B71B,YCDvDqnD,CAA2BhqD,GAG7B0yB,eAAeu3B,GAAf,GAUkC,IAVO,MAC9C7I,EAD8C,EAE9C0E,EAF8C,aAG9CD,EAH8C,KAI9C5I,GAMuC,EACvC,MAAMj9C,QAAew3B,GAAc,IAAIp1B,EAAAA,IAAAA,MAAAA,eAA4B,CACjEg/C,MAAAA,KACI0E,GAAK,CAAEA,EAAG/6C,GAAAA,CAAO+6C,OAGvB,GAAK9lD,EAIL,OAAO4lD,GAAW5lD,EAA6B6lD,G,qNC9FjD,IAAIqE,GCWAv4B,GDTJ,MAAMw4B,GAiBJ3lB,YACUxtB,GACR,KADQA,WAAAA,EACR,sCAhBY,GAgBZ,qJACA4tB,KAAKwlB,aAAe,IAAI50B,SAAe1D,IACrC8S,KAAKylB,aAAev4B,KAIP,kBAAC,GAA4B,IAA5B,EAAE2lB,EAAF,EAAKD,EAAL,OAAQtL,GAAoB,EAC5C,MAAMoe,EAAMC,IAAAA,qBAA6BhgD,GAAOC,KAAKitC,IAAI,GACnD+S,EAAWD,IAAAA,qBAA6BhgD,GAAOC,KAAK0hC,IAAS,GAE7DiM,EAAKoS,IAAAA,OAAex/C,GAAAA,CAAOysC,GAAIgT,EAAUF,GAE/C1lB,KAAKuT,GAAKA,EACVvT,KAAK6S,EAAI6S,EACT1lB,KAAKsH,OAASse,EAEd,MAAMl2C,QAAuBi2C,IAAAA,OAAeA,IAAAA,aAAqBpS,IACjE,OAAOtwC,MAAM2C,KAAK8J,GAGpB2jC,WAAW,GAA4B,IAA5B,EAAER,EAAF,EAAKD,EAAL,OAAQtL,GAAoB,EACrC,MAAMue,EAAQF,IAAAA,qBAA6B9S,GAAG,GACxCiT,EAAaH,IAAAA,qBAA6Bre,GAAQ,GAElD73B,EAAKk2C,IAAAA,OAAex/C,GAAAA,CAAOysC,GAAIkT,EAAYD,GAKjD,OAJA7lB,KAAKvwB,GAAKA,EACVuwB,KAAK6S,EAAIgT,EACT7lB,KAAKsH,OAASwe,EAEP7iD,MAAM2C,KAAK+/C,IAAAA,aAAqBl2C,IAGxB,kBAACX,EAAiBi3C,EAAwBC,GACrDhmB,KAAK5tB,WACP4tB,KAAKvwB,GAAKk2C,IAAAA,qBAA6BhgD,GAAOC,KAAKkJ,IAAQ,GAE3DkxB,KAAKuT,GAAKoS,IAAAA,qBAA6BhgD,GAAOC,KAAKkJ,IAAQ,GAE7D,MAAMm3C,EAAUN,IAAAA,OACb3lB,KAAK5tB,WAAuB4tB,KAAKvwB,GAAfuwB,KAAKuT,GACxBvT,KAAKsH,OACLtH,KAAK6S,GAEDqT,QAA4BP,IAAAA,KAAaA,IAAAA,aAAqBM,IAC9Dl3C,EAAiB42C,IAAAA,qBAA6BO,EAAY17C,OAAO,GAAG4xC,WAAW,GAE/E+J,QAmDHr4B,eACLm4B,EAAqB1S,EAAgBwS,EAAwBC,GAE7D,MAAMh7B,QAAa26B,IAAAA,OAAehgD,GAAO0gB,OAAO,CAAC,IAAI+/B,WAAWH,GAAU,IAAIG,WAAW7S,MACnFn4C,EAAS,GACTirD,EAAaL,EAAappD,OAAS,EAEzC,IAAK,IAAI0pD,EAAa,EAAGA,IAAet7B,EAAKu7B,WAAYD,GADvC,EACgE,CAChF,MACMhgB,GApBiBhrC,EAmBS0vB,EAAKsH,SAASg0B,EAAYA,EAF1C,GAhBTngD,GAAAA,CAAO7K,EAAM,IAAIkrD,IAAI,KAAOC,UAAU,IAC5CC,GAAIvgD,GAAAA,CAAO7K,EAAM,IAAImrD,UAAU,KAC/BC,GAAIvgD,GAAAA,CAAO7K,EAAM,IAAImrD,UAAU,KAC/BC,GAAIvgD,GAAAA,CAAO7K,EAAM,IAAImrD,UAAU,KAC/BC,GAAIvgD,GAAAA,CAAO7K,EAAM,IAAImrD,UAAU,KAC/BC,GAAIvgD,GAAAA,CAAO7K,EAAM,IAAImrD,UAAU,KAC/BC,GAAIvgD,GAAAA,CAAO7K,EAAM,IAAImrD,UAAU,IAC/BC,GAAIvgD,GAAAA,CAAO7K,EAAM,MAYEqrD,OAAO,EAAGN,GAAYn+C,aACpCC,EAAS69C,EAAa1f,GACtB7nC,EAAOunD,EAAa1f,EAAQ,GAAKn+B,EACvC/M,EAAOuH,KAAKhH,OAAOC,gBAAgBmqD,EAAUzzB,SAASnqB,EAAQA,EAAS1J,KAvB3E,IAA2BnD,EAyBzB,OAAOF,EAAOsY,KAAK,IAjEIkzC,CACnBjB,IAAAA,aAAqBM,GACrBN,IAAAA,aAAqB3lB,KAAKuT,IAC1BwS,EACAC,GAGInrD,EAAM,IAAIgsD,MAKhB,aAJMhsD,EAAIisD,OAAOnB,IAAAA,aAAqBM,IACtCjmB,KAAK9wB,MAAQ,IAAI63C,KAAJ,CAAiBlsD,EAAK,IAAImsD,OAAU,EAAMhnB,KAAK5tB,YAC5D4tB,KAAKylB,eAEE,CAAElS,GAAItwC,MAAM2C,KAAK+/C,IAAAA,aAAqB3lB,KAAKuT,KAAMxkC,eAAgBA,EAAenC,WAAYu5C,OAAAA,GAGzF,aAACtjD,GACX,IAAKm9B,KAAK9wB,MAAO,OAEjB,MAAM+3C,EAAW,IAAIC,YAAY,GACjCD,EAAS,GAAKjnB,KAAKmnB,MACnB,MAAMC,QAAoBpnB,KAAK9wB,MAAMm4C,mBACnC1hD,GAAO0gB,OAAO,CAACs/B,IAAAA,gBAAwBsB,GAAWthD,GAAOC,KAAK/C,MAEhE,OAAOI,MAAM2C,KAAKwhD,GAGR,aAACvkD,GACX,IAAKm9B,KAAK9wB,MACR,OAAO8wB,KAAKwlB,aAAa8B,MAAK,IACrBtnB,KAAKunB,OAAO1kD,KAIvB,MAAM0B,QAAgBy7B,KAAK9wB,MAAMs4C,mBAAmB7hD,GAAOC,KAAK/C,IAEhE,OAAOwH,KAAK6qC,MAAM3wC,EAAQqI,aAiCvB,SAAS66C,GAAqBr9C,GACnCk7C,GAAwB,IAAIC,MAAkBn7C,GAGzC,SAASs9C,KACdpC,QAAwBznD,EAYnB,SAAS8pD,GAAoBv9C,GAClC,OAAOk7C,GAAuBsC,UAAUx9C,GAGnC,SAASy9C,GAAoBz9C,GAClC,OAAOk7C,GAAuBiC,UAAUn9C,GAGnC,SAAS09C,GAAiB19C,GAC/B,OAAOk7C,GAAuBhS,eAAelpC,GAGxC,SAAS29C,GAAgB39C,GAC9B,OAAOk7C,GAAuBjS,cAAcjpC,GAGvC,SAAS49C,GAAiB59C,GAC/B,OAAOk7C,GAAuBtS,eAAe5oC,GClI/C,MAAM69C,G3C0BC,SAAmDC,EAAwBC,GAChF,IACIn1B,EADAo1B,GAAU,EAGd,OAAO,WAA6B,2BAAzBC,EAAyB,yBAAzBA,EAAyB,gBAClCr1B,EAAOq1B,EAEFD,IACHA,GAAU,EAEVF,GAAY,KACVE,GAAU,EACVD,KAAMn1B,QAfLs1B,EAwEF,SAAmBC,GAAiD,IAAnBC,EAAmB,wDACpE/tD,EAYM+tD,EACT9tD,EAA2BiI,KAAK4lD,GAEhC9tD,EAAmBkI,KAAK4lD,IAdxB9tD,EAAqB+tD,EAAY,GAAK,CAACD,GACvC7tD,EAA4B8tD,EAAY,CAACD,GAAY,GAErD33B,QAAQ1D,UAAUo6B,MAAK,KACrB,MAAMmB,EAAmBhuD,EACnBiuD,EAA0BhuD,EAChCD,OAAqBoD,EACrBnD,OAA4BmD,EAC5B6qD,EAAwBjmD,SAASkmD,GAAOA,MACxCF,EAAiBhmD,SAASkmD,GAAOA,a2CpFvC,SAAsBC,GACpB,IAAKC,IAAkBD,IAAeE,GACpC,OAGF,MAAMC,EAAiBF,GACvBA,QAAiBhrD,EACjBkrD,EAAetmD,QAAQsqB,OA3BzB,IAAIi8B,GACAF,GAEAD,GAEJ,SAASI,GAAa7W,GACfyW,GAGHA,GAAelmD,KAAKyvC,GAFpByW,GAAiB,CAACzW,GAKf4W,KAAyBxvD,EAA2BgkB,IAAI40B,EAAO,YAClE4W,G3CpCG,SACLb,EACAe,GAEA,IACIC,EACAvhB,EACA5U,EAJJo2B,IACA,yDAKA,OAAO,WACLxhB,GAAY,EADsB,2BAAzBygB,EAAyB,yBAAzBA,EAAyB,gBAElCr1B,EAAOq1B,EAEFc,IACCC,IACFxhB,GAAY,EACZugB,KAAMn1B,IAIRm2B,EAAWtoD,KAAKwoD,aAAY,KAC1B,IAAKzhB,EAIH,OAFA/mC,KAAKyoD,cAAcH,QACnBA,OAAWtrD,GAIb+pC,GAAY,EACZugB,KAAMn1B,KACLk2B,K2CMmBK,CAAStB,GAAuB9uD,GAAqB,GAC7E2vD,GAAoBxvD,KAAKguC,UAG3B0hB,GAAsBF,IC8BtBjoD,KAAK2oD,QAAWC,IAEdr6B,QAAQmR,MAAMkpB,GACdC,GAAa,CAAEhrD,KAAM,iBAAkB6hC,MAAO,CAAEh8B,QAASklD,EAAElpB,MAAMh8B,SAAW,mCAG9E1D,KAAK8oD,iBAAiB,sBAAuBF,IAE3Cr6B,QAAQmR,MAAMkpB,GACdC,GAAa,CAAEhrD,KAAM,iBAAkB6hC,MAAO,CAAEh8B,QAASklD,EAAEv/C,OAAO3F,SAAW,qCApGjF,MAAMqlD,GAAgB,IAAIC,IAwG1B,SAAS98B,GAASqlB,GAChBsX,GAAa,CACXhrD,KAAM,SACN0zC,OAAAA,IAIJ,SAASsX,GAAa7mD,EAAyBqsB,GACzCA,EACF46B,YAAYjnD,EAAM,CAACqsB,IAEnB46B,YAAYjnD,GA5GhBknD,UAAYj8B,MAAAA,IACV,MAAM,KAAEjrB,GAAS0B,EAEjB,OAAQ1B,EAAKnE,MACX,IAAK,gBDKFovB,eAAuBk8B,EAAwBC,GACpDl9B,GAAWi9B,EvBoCN,SAAcA,GACnBj9B,GAAWi9B,EuBpCXE,CAAYjB,ItBHP,SAAce,GACnBj9B,GAAWi9B,EsBGXG,CAASlB,IlB+BJ,SAAce,GACnBj9B,GAAWi9B,EkB/BXI,CAAUnB,IhByCL,SAAce,GACnBj9B,GAAWi9B,EgBzCXK,CAAapB,IfNR,SAAce,GACnBj9B,GAAWi9B,EeMXM,CAAUrB,IdlBL,SAAce,GACnBj9B,GAAWi9B,EckBXO,CAAatB,IbrBR,SAAce,GACnBj9B,GAAWi9B,EaqBXQ,CAAevB,IZXV,SAAce,GACnBj9B,GAAWi9B,EYWXS,CAAkBxB,IXbb,SAAce,GACnBj9B,GAAWi9B,EWaXU,CAASzB,IVZJ,SAAce,GACnBj9B,GAAWi9B,EUYXW,CAAU1B,ITrBL,SAAce,GACnBj9B,GAAWi9B,ESqBXY,CAAa3B,IChBH4B,CAAQ99B,GAAUlqB,EAAKmwB,KAAK,IAClC,MAEF,IAAK,aAAc,CACjB,MAAM,UAAEhoB,EAAF,KAAa6c,EAAb,KAAmBmL,GAASnwB,EAClC,IACE,GAAImI,EAAW,CACb,MAAMu9C,EAAW,WAA4B,2BAAxBuC,EAAwB,yBAAxBA,EAAwB,gBAC3C,MAAMC,EAAUD,EAAaA,EAAaluD,OAAS,GAEnD8sD,GAAa,CACXhrD,KAAM,iBACNsM,UAAAA,EACA8/C,aAAAA,GACCC,aAAmB97B,YAAc87B,OAAUltD,IAGhD+rD,GAAcpoD,IAAIwJ,EAAWu9C,GAE7Bv1B,EAAKrwB,KAAK4lD,GAGZ,MAAMj6B,QDDP,SAA0C08B,GAAsD,2BAAxCh4B,EAAwC,iCAAxCA,EAAwC,kBAErG,OAAOi4B,EAAQD,MAAWh4B,GCDGk4B,CAAQrjC,KAASmL,IAOlC,YAAE9D,GAAqC,iBAAbZ,GAAyB,gBAAiBA,GAAYA,GAAa,GAE/FtjB,GACF0+C,GAAa,CACXhrD,KAAM,iBACNsM,UAAAA,EACAsjB,SAAAA,GACCY,GAEL,MAAOqR,GAMHv1B,GACF0+C,GAAa,CACXhrD,KAAM,iBACNsM,UAAAA,EACAu1B,MAAO,CAAEh8B,QAASg8B,EAAMh8B,WAK1ByG,GACF4+C,GAAcj6B,OAAO3kB,GAGvB,MAEF,IAAK,iBAAkB,CACrB,MAAMu9C,EAAWqB,GAAcl7B,IAAI7rB,EAAKmI,WACpCu9C,IACgBA,EDnCPzmB,YAAa,GCsC1B,MAEF,IAAK,OACH4nB,GAAa,CACXhrD,KAAM,iBACNsM,UAAWnI,EAAKmI,gBC3FpBmgD,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBxtD,IAAjBytD,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CACjDntD,GAAImtD,EACJI,QAAQ,EACRF,QAAS,IAUV,OANAG,EAAoBL,GAAU98C,KAAKi9C,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG3EI,EAAOC,QAAS,EAGTD,EAAOD,QAIfH,EAAoBO,EAAID,EAGxBN,EAAoBlK,EAAI,KAGvB,IAAI0K,EAAsBR,EAAoBS,OAAEhuD,EAAW,CAAC,KAAK,KAAK,KAAK,OAAO,IAAOutD,EAAoB,SAE7G,OADsBA,EAAoBS,EAAED,IhDnCzC3yD,EAAW,GACfmyD,EAAoBS,EAAI,CAACzwD,EAAQ0wD,EAAU3D,EAAI4D,KAC9C,IAAGD,EAAH,CAMA,IAAIE,EAAeC,EAAAA,EACnB,IAASpvD,EAAI,EAAGA,EAAI5D,EAAS2D,OAAQC,IAAK,CAGzC,IAFA,IAAKivD,EAAU3D,EAAI4D,GAAY9yD,EAAS4D,GACpCqvD,GAAY,EACPC,EAAI,EAAGA,EAAIL,EAASlvD,OAAQuvD,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAaxsD,OAAOpE,KAAKiwD,EAAoBS,GAAGO,OAAOvxD,GAASuwD,EAAoBS,EAAEhxD,GAAKixD,EAASK,MAC9IL,EAASpwB,OAAOywB,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbjzD,EAASyiC,OAAO7+B,IAAK,GACrB,IAAIu8B,EAAI+uB,SACEtqD,IAANu7B,IAAiBh+B,EAASg+B,IAGhC,OAAOh+B,EAvBN2wD,EAAWA,GAAY,EACvB,IAAI,IAAIlvD,EAAI5D,EAAS2D,OAAQC,EAAI,GAAK5D,EAAS4D,EAAI,GAAG,GAAKkvD,EAAUlvD,IAAK5D,EAAS4D,GAAK5D,EAAS4D,EAAI,GACrG5D,EAAS4D,GAAK,CAACivD,EAAU3D,EAAI4D,IiDJ/BX,EAAoBiB,EAAKb,IACxB,IAAIc,EAASd,GAAUA,EAAOe,WAC7B,IAAOf,EAAiB,QACxB,IAAM,EAEP,OADAJ,EAAoBoB,EAAEF,EAAQ,CAAErvC,EAAGqvC,IAC5BA,GCLRlB,EAAoBoB,EAAI,CAACjB,EAASkB,KACjC,IAAI,IAAI5xD,KAAO4xD,EACXrB,EAAoB3jD,EAAEglD,EAAY5xD,KAASuwD,EAAoB3jD,EAAE8jD,EAAS1wD,IAC5E0E,OAAOmtD,eAAenB,EAAS1wD,EAAK,CAAE8xD,YAAY,EAAMj+B,IAAK+9B,EAAW5xD,MCJ3EuwD,EAAoBwB,EAAI,GAGxBxB,EAAoB3B,EAAKoD,GACjBj8B,QAAQsN,IAAI3+B,OAAOpE,KAAKiwD,EAAoBwB,GAAG9xD,QAAO,CAACgyD,EAAUjyD,KACvEuwD,EAAoBwB,EAAE/xD,GAAKgyD,EAASC,GAC7BA,IACL,KCNJ1B,EAAoB9xB,EAAKuzB,GAEZA,EAAU,IAAM,CAAC,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,wBAAwBA,GAAW,MCFlKzB,EAAoB2B,SAAYF,MCDhCzB,EAAoBxY,EAAI,WACvB,GAA0B,iBAAfoa,WAAyB,OAAOA,WAC3C,IACC,OAAOhtB,MAAQ,IAAIitB,SAAS,cAAb,GACd,MAAOxD,GACR,GAAsB,iBAAXrwD,OAAqB,OAAOA,QALjB,GCAxBgyD,EAAoB3jD,EAAI,CAACylD,EAAKC,IAAU5tD,OAAO6tD,UAAUxpD,eAAe2K,KAAK2+C,EAAKC,GCClF/B,EAAoBhyB,EAAKmyB,IACH,oBAAX8B,QAA0BA,OAAOC,aAC1C/tD,OAAOmtD,eAAenB,EAAS8B,OAAOC,YAAa,CAAE7nD,MAAO,WAE7DlG,OAAOmtD,eAAenB,EAAS,aAAc,CAAE9lD,OAAO,KCLvD2lD,EAAoBmC,IAAO/B,IAC1BA,EAAOgC,MAAQ,GACVhC,EAAOiC,WAAUjC,EAAOiC,SAAW,IACjCjC,G,MCHR,IAAIkC,EACAtC,EAAoBxY,EAAE+a,gBAAeD,EAAYtC,EAAoBxY,EAAE/2B,SAAW,IACtF,IAAIjc,EAAWwrD,EAAoBxY,EAAEhzC,SACrC,IAAK8tD,GAAa9tD,IACbA,EAASguD,gBACZF,EAAY9tD,EAASguD,cAAcC,MAC/BH,GAAW,CACf,IAAII,EAAUluD,EAASmuD,qBAAqB,UACzCD,EAAQlxD,SAAQ8wD,EAAYI,EAAQA,EAAQlxD,OAAS,GAAGixD,KAK7D,IAAKH,EAAW,MAAM,IAAIjgC,MAAM,yDAChCigC,EAAYA,EAAUjxD,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpF2uD,EAAoBvY,EAAI6a,G,SCXxB,IAAIM,EAAkB,CACrB,KAAM,GAgBP5C,EAAoBwB,EAAE/vD,EAAI,CAACgwD,EAASC,KAE/BkB,EAAgBnB,IAElBc,cAAcvC,EAAoBvY,EAAIuY,EAAoB9xB,EAAEuzB,KAK/D,IAAIoB,EAAqBptD,KAA6B,uBAAIA,KAA6B,wBAAK,GACxFqtD,EAA6BD,EAAmBtrD,KAAKwrD,KAAKF,GAC9DA,EAAmBtrD,KAvBCE,IACnB,IAAKipD,EAAUsC,EAAaC,GAAWxrD,EACvC,IAAI,IAAIwoD,KAAY+C,EAChBhD,EAAoB3jD,EAAE2mD,EAAa/C,KACrCD,EAAoBO,EAAEN,GAAY+C,EAAY/C,IAIhD,IADGgD,GAASA,EAAQjD,GACdU,EAASlvD,QACdoxD,EAAgBlC,EAASwC,OAAS,EACnCJ,EAA2BrrD,K,G1DnBxB3J,EAAOkyD,EAAoBlK,EAC/BkK,EAAoBlK,EAAI,IAChBtwB,QAAQsN,IAAI,CAAC,KAAK,KAAK,KAAK,MAAMlgC,IAAIotD,EAAoB3B,EAAG2B,IAAsB9D,KAAKpuD,G2DDtEkyD,EAAoBlK,K","sources":["webpack://telegram-t/webpack/runtime/chunk loaded","webpack://telegram-t/webpack/runtime/startup chunk dependencies","webpack://telegram-t/./src/config.ts","webpack://telegram-t/./src/util/schedulers.ts","webpack://telegram-t/./src/util/iteratees.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/pathBytesToSvg.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/common.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/symbols.ts","webpack://telegram-t/./src/util/waveform.ts","webpack://telegram-t/./src/api/types/messages.ts","webpack://telegram-t/./src/api/types/media.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/peers.ts","webpack://telegram-t/./src/api/gramjs/helpers.ts","webpack://telegram-t/./src/api/gramjs/gramjsBuilders/index.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/calls.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/util/serverTime.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/chats.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/bots.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/users.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/misc.ts","webpack://telegram-t/./src/api/gramjs/updater.ts","webpack://telegram-t/./src/api/gramjs/methods/auth.ts","webpack://telegram-t/./src/util/cacheApi.ts","webpack://telegram-t/./src/api/gramjs/methods/media.ts","webpack://telegram-t/./src/api/gramjs/methods/client.ts","webpack://telegram-t/./src/api/gramjs/methods/chats.ts","webpack://telegram-t/./src/util/files.ts","webpack://telegram-t/./src/api/gramjs/methods/messages.ts","webpack://telegram-t/./src/api/gramjs/methods/users.ts","webpack://telegram-t/./src/api/gramjs/methods/symbols.ts","webpack://telegram-t/./src/api/gramjs/methods/management.ts","webpack://telegram-t/./src/api/gramjs/methods/twoFaSettings.ts","webpack://telegram-t/./src/api/gramjs/methods/bots.ts","webpack://telegram-t/./src/api/gramjs/methods/calls.ts","webpack://telegram-t/./src/api/gramjs/methods/payments.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/payments.ts","webpack://telegram-t/./src/api/gramjs/methods/account.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/appConfig.ts","webpack://telegram-t/./src/api/gramjs/methods/settings.ts","webpack://telegram-t/./src/api/gramjs/methods/reactions.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/statistics.ts","webpack://telegram-t/./src/api/gramjs/methods/statistics.ts","webpack://telegram-t/./src/api/gramjs/methods/phoneCallState.ts","webpack://telegram-t/./src/api/gramjs/provider.ts","webpack://telegram-t/./src/api/gramjs/worker/worker.ts","webpack://telegram-t/webpack/bootstrap","webpack://telegram-t/webpack/runtime/compat get default export","webpack://telegram-t/webpack/runtime/define property getters","webpack://telegram-t/webpack/runtime/ensure chunk","webpack://telegram-t/webpack/runtime/get javascript chunk filename","webpack://telegram-t/webpack/runtime/get mini-css chunk filename","webpack://telegram-t/webpack/runtime/global","webpack://telegram-t/webpack/runtime/hasOwnProperty shorthand","webpack://telegram-t/webpack/runtime/make namespace object","webpack://telegram-t/webpack/runtime/node module decorator","webpack://telegram-t/webpack/runtime/publicPath","webpack://telegram-t/webpack/runtime/importScripts chunk loading","webpack://telegram-t/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([5802,3119,4503,3522].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","import type { ApiLimitType } from './global/types';\n\nexport const APP_NAME = process.env.APP_NAME || 'Telegram WebZ';\nexport const APP_VERSION = process.env.APP_VERSION!;\n\nexport const DEBUG = process.env.APP_ENV !== 'production';\nexport const DEBUG_MORE = false;\n\nexport const IS_MOCKED_CLIENT = process.env.APP_MOCKED_CLIENT === '1';\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\nexport const IS_BETA = process.env.APP_ENV === 'staging';\n\nexport const BETA_CHANGELOG_URL = 'https://telegra.ph/WebZ-Beta-04-01';\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const PAGE_TITLE = 'Telegram';\nexport const INACTIVE_MARKER = ' [Inactive]';\n\nexport const DEBUG_PAYMENT_SMART_GLOCAL = false;\n\nexport const SESSION_USER_KEY = 'user_auth';\nexport const LEGACY_SESSION_KEY = 'GramJs:sessionId';\nexport const PASSCODE_CACHE_NAME = 'tt-passcode';\n\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\nexport const GLOBAL_STATE_CACHE_KEY = 'tt-global-state';\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 500;\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 200;\nexport const GLOBAL_STATE_CACHE_CHATS_WITH_MESSAGES_LIMIT = 30;\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs-v10';\nexport const ASSET_CACHE_NAME = 'tt-assets';\nexport const AUTODOWNLOAD_FILESIZE_MB_LIMITS = [1, 5, 10, 50, 100, 500];\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const CHAT_HEIGHT_PX = 72;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_PHOTOS_LIMIT = 40;\nexport const PROFILE_SENSITIVE_AREA = 500;\nexport const COMMON_CHATS_LIMIT = 100;\nexport const GROUP_CALL_PARTICIPANTS_LIMIT = 100;\nexport const REACTION_LIST_LIMIT = 100;\nexport const REACTION_UNREAD_SLICE = 100;\nexport const MENTION_UNREAD_SLICE = 100;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\n\nexport const SPONSORED_MESSAGE_CACHE_MS = 300000; // 5 min\n\nexport const DEFAULT_VOLUME = 1;\nexport const DEFAULT_PLAYBACK_RATE = 1;\nexport const PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION = 20 * 60; // 20 min\n\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\nexport const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;\nexport const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\nexport const SEND_MESSAGE_ACTION_INTERVAL = 3000; // 3s\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\n// eslint-disable-next-line max-len\nexport const EDITABLE_INPUT_CSS_SELECTOR = `.messages-layout .Transition__slide--active #${EDITABLE_INPUT_ID}, .messages-layout .Transition > .to #${EDITABLE_INPUT_ID}`;\n\nexport const CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\n// Screen width where Pinned Message / Audio Player in the Middle Header can be safely displayed\nexport const SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1440; // px\n// Screen width where Pinned Message / Audio Player in the Middle Header shouldn't collapse with ChatInfo\nexport const SAFE_SCREEN_WIDTH_FOR_CHAT_INFO = 1150; // px\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES = 1340; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const LOCAL_MESSAGE_MIN_ID = 1e11; // `Date.now()` is always used as base\nexport const TMP_CHAT_ID = '0';\n\nexport const ANIMATION_END_DELAY = 100;\n\nexport const FAST_SMOOTH_MAX_DISTANCE = 1500;\nexport const FAST_SMOOTH_MIN_DURATION = 250;\nexport const FAST_SMOOTH_MAX_DURATION = 600;\nexport const FAST_SMOOTH_SHORT_TRANSITION_MAX_DISTANCE = 500; // px\n\n// Average duration of message sending animation\nexport const API_UPDATE_THROTTLE = Math.round((FAST_SMOOTH_MIN_DURATION + FAST_SMOOTH_MAX_DURATION) / 2);\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage1','newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory',\n]);\n\nexport const LOCK_SCREEN_ANIMATION_DURATION_MS = 200;\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 64;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 48;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_SIZE_SEARCH = 64;\nexport const STICKER_SIZE_MODAL = 64;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_PASSCODE = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 100;\nexport const STICKER_SIZE_INLINE_BOT_RESULT = 100;\nexport const STICKER_SIZE_JOIN_REQUESTS = 140;\nexport const STICKER_SIZE_INVITES = 140;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const NO_STICKER_SET_ID = 'NO_STICKER_SET';\nexport const RECENT_SYMBOL_SET_ID = 'recent';\nexport const FAVORITE_SYMBOL_SET_ID = 'favorite';\nexport const CHAT_STICKER_SET_ID = 'chatStickers';\nexport const PREMIUM_STICKER_SET_ID = 'premium';\n\nexport const BASE_EMOJI_KEYWORD_LANG = 'en';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\n\nexport const VIDEO_MOV_TYPE = 'video/quicktime';\nexport const VIDEO_WEBM_TYPE = 'video/webm';\n\nexport const SUPPORTED_IMAGE_CONTENT_TYPES = new Set([\n  'image/png', 'image/gif', 'image/jpeg',\n]);\n\nexport const SUPPORTED_VIDEO_CONTENT_TYPES = new Set([\n  'video/mp4', // video/quicktime added dynamically in environment.ts\n]);\n\nexport const SUPPORTED_AUDIO_CONTENT_TYPES = new Set([\n  'audio/mp3',\n  'audio/ogg',\n  'audio/wav',\n  'audio/mpeg',\n  'audio/flac',\n  'audio/aac',\n  'audio/m4a',\n  'audio/mp4',\n  'audio/x-m4a',\n]);\n\nexport const CONTENT_TYPES_WITH_PREVIEW = new Set([\n  ...SUPPORTED_IMAGE_CONTENT_TYPES,\n  ...SUPPORTED_VIDEO_CONTENT_TYPES,\n]);\n\nexport const CONTENT_NOT_SUPPORTED = 'The message is not supported on this version of Telegram.';\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,63})\\\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)';\nexport const RE_MENTION_TEMPLATE = '(@[\\\\w\\\\d_-]+)';\nexport const RE_TG_LINK = /^tg:(\\/\\/)?([?=&\\d\\w_-]+)?/gm;\nexport const RE_TME_LINK = /^(?:https?:\\/\\/)?(?:t\\.me\\/)/gm;\nexport const RE_TELEGRAM_LINK = /^(?:https?:\\/\\/)?(?:telegram\\.org\\/)/gm;\n\n// eslint-disable-next-line max-len\nexport const COUNTRIES_WITH_12H_TIME_FORMAT = new Set(['AU', 'BD', 'CA', 'CO', 'EG', 'HN', 'IE', 'IN', 'JO', 'MX', 'MY', 'NI', 'NZ', 'PH', 'PK', 'SA', 'SV', 'US']);\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = '777000';\nexport const REPLIES_USER_ID = '1271266957'; // TODO For Test connection ID must be equal to 708513\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const DELETED_COMMENTS_CHANNEL_ID = '-777';\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const DEFAULT_LANG_CODE = 'en';\nexport const DEFAULT_LANG_PACK = 'android';\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'] as const;\nexport const FEEDBACK_URL = 'https://bugs.telegram.org/?tag_ids=41&sort=time';\n\nexport const LIGHT_THEME_BG_COLOR = '#99BA92';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DEFAULT_PATTERN_COLOR = '#4A8E3A8C';\nexport const DARK_THEME_PATTERN_COLOR = '#0A0A0A8C';\nexport const FILEPART_SIZE = 524288;\n\n// Group calls\nexport const GROUP_CALL_VOLUME_MULTIPLIER = 100;\nexport const GROUP_CALL_DEFAULT_VOLUME = 100 * GROUP_CALL_VOLUME_MULTIPLIER;\nexport const ENABLE_THUMBNAIL_VIDEO = false;\n\nexport const DEFAULT_LIMITS: Record<ApiLimitType, readonly [number, number]> = {\n  uploadMaxFileparts: [4000, 8000],\n  stickersFaved: [5, 10],\n  savedGifs: [200, 400],\n  dialogFiltersChats: [100, 200],\n  dialogFilters: [10, 20],\n  dialogFolderPinned: [5, 10],\n  captionLength: [1024, 2048],\n  channels: [500, 1000],\n  channelsPublic: [10, 20],\n  aboutLength: [70, 140],\n};\n","type Scheduler =\n  typeof requestAnimationFrame\n  | typeof onTickEnd;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRaf, fn);\n}\n\nexport function throttleWithPrimaryRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRafPrimary, fn);\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function onIdle(cb: NoneToVoidFunction, timeout?: number) {\n  // eslint-disable-next-line no-restricted-globals\n  if (self.requestIdleCallback) {\n    // eslint-disable-next-line no-restricted-globals\n    self.requestIdleCallback(cb, { timeout });\n  } else {\n    onTickEnd(cb);\n  }\n}\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise<void>((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\nlet fastRafPrimaryCallbacks: NoneToVoidFunction[] | undefined;\n\n// May result in an immediate execution if called from another `requestAnimationFrame` callback\nexport function fastRaf(callback: NoneToVoidFunction, isPrimary = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = isPrimary ? [] : [callback];\n    fastRafPrimaryCallbacks = isPrimary ? [callback] : [];\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n      const currentPrimaryCallbacks = fastRafPrimaryCallbacks!;\n      fastRafCallbacks = undefined;\n      fastRafPrimaryCallbacks = undefined;\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    fastRafPrimaryCallbacks!.push(callback);\n  } else {\n    fastRafCallbacks.push(callback);\n  }\n}\n\nexport function fastRafPrimary(callback: NoneToVoidFunction) {\n  fastRaf(callback, true);\n}\n\nlet onTickEndCallbacks: NoneToVoidFunction[] | undefined;\nlet onTickEndPrimaryCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onTickEnd(callback: NoneToVoidFunction, isPrimary = false) {\n  if (!onTickEndCallbacks) {\n    onTickEndCallbacks = isPrimary ? [] : [callback];\n    onTickEndPrimaryCallbacks = isPrimary ? [callback] : [];\n\n    Promise.resolve().then(() => {\n      const currentCallbacks = onTickEndCallbacks!;\n      const currentPrimaryCallbacks = onTickEndPrimaryCallbacks!;\n      onTickEndCallbacks = undefined;\n      onTickEndPrimaryCallbacks = undefined;\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    onTickEndPrimaryCallbacks!.push(callback);\n  } else {\n    onTickEndCallbacks.push(callback);\n  }\n}\n\nexport function onTickEndPrimary(callback: NoneToVoidFunction) {\n  onTickEnd(callback, true);\n}\n\nlet beforeUnloadCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onBeforeUnload(callback: NoneToVoidFunction, isLast = false) {\n  if (!beforeUnloadCallbacks) {\n    beforeUnloadCallbacks = [];\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('beforeunload', () => {\n      beforeUnloadCallbacks!.forEach((cb) => cb());\n    });\n  }\n\n  if (isLast) {\n    beforeUnloadCallbacks.push(callback);\n  } else {\n    beforeUnloadCallbacks.unshift(callback);\n  }\n\n  return () => {\n    beforeUnloadCallbacks = beforeUnloadCallbacks!.filter((cb) => cb !== callback);\n  };\n}\n","type CollectionByKey<Member> = Record<number | string, Member>;\n\ntype OrderDirection =\n  'asc'\n  | 'desc';\n\ninterface OrderCallback<T> {\n  (member: T): any;\n}\n\nexport function buildCollectionByKey<T extends AnyLiteral>(collection: T[], key: keyof T) {\n  return collection.reduce((byKey: CollectionByKey<T>, member: T) => {\n    byKey[member[key]] = member;\n\n    return byKey;\n  }, {});\n}\n\nexport function mapValues<R extends any, M extends any>(\n  byKey: CollectionByKey<M>,\n  callback: (member: M, key: string, index: number, originalByKey: CollectionByKey<M>) => R,\n): CollectionByKey<R> {\n  return Object.keys(byKey).reduce((newByKey: CollectionByKey<R>, key, index) => {\n    newByKey[key] = callback(byKey[key], key, index, byKey);\n    return newByKey;\n  }, {});\n}\n\nexport function pick<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    result[key] = object[key];\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function pickTruthy<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    if (object[key]) {\n      result[key] = object[key];\n    }\n\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function omit<T, K extends keyof T>(object: T, keys: K[]) {\n  const stringKeys = new Set(keys.map(String));\n  const savedKeys = Object.keys(object)\n    .filter((key) => !stringKeys.has(key)) as Array<Exclude<keyof T, K>>;\n\n  return pick(object, savedKeys);\n}\n\nexport function orderBy<T>(\n  collection: T[],\n  orderRule: (keyof T) | OrderCallback<T> | ((keyof T) | OrderCallback<T>)[],\n  mode: OrderDirection | [OrderDirection, OrderDirection] = 'asc',\n): T[] {\n  function compareValues(a: T, b: T, currentOrderRule: (keyof T) | OrderCallback<T>, isAsc: boolean) {\n    const aValue = (typeof currentOrderRule === 'function' ? currentOrderRule(a) : a[currentOrderRule]) || 0;\n    const bValue = (typeof currentOrderRule === 'function' ? currentOrderRule(b) : b[currentOrderRule]) || 0;\n\n    return isAsc ? aValue - bValue : bValue - aValue;\n  }\n\n  if (Array.isArray(orderRule)) {\n    const [mode1, mode2] = Array.isArray(mode) ? mode : [mode, mode];\n    const [orderRule1, orderRule2] = orderRule;\n    const isAsc1 = mode1 === 'asc';\n    const isAsc2 = mode2 === 'asc';\n\n    return collection.sort((a, b) => {\n      return compareValues(a, b, orderRule1, isAsc1) || compareValues(a, b, orderRule2, isAsc2);\n    });\n  }\n\n  const isAsc = mode === 'asc';\n  return collection.sort((a, b) => {\n    return compareValues(a, b, orderRule, isAsc);\n  });\n}\n\nexport function unique<T extends any>(array: T[]): T[] {\n  return Array.from(new Set(array));\n}\n\nexport function compact<T extends any>(array: T[]) {\n  return array.filter(Boolean);\n}\n\nexport function areSortedArraysEqual(array1: any[], array2: any[]) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((item, i) => item === array2[i]);\n}\n\nexport function areSortedArraysIntersecting(array1: any[], array2: any[]) {\n  return array1[0] <= array2[array2.length - 1] && array1[array1.length - 1] >= array2[0];\n}\n\nexport function findIntersectionWithSet<T>(array: T[], set: Set<T>): T[] {\n  return array.filter((a) => set.has(a));\n}\n\nexport function split<T extends any>(array: T[], chunkSize: number) {\n  const result: T[][] = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n\nexport function cloneDeep<T>(value: T): T {\n  if (typeof value !== 'object') {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(cloneDeep) as typeof value;\n  }\n\n  return Object.keys(value).reduce((acc, key) => {\n    acc[key as keyof T] = cloneDeep(value[key as keyof T]);\n    return acc;\n  }, {} as T);\n}\n\nexport function findLast<T>(array: Array<T>, predicate: (value: T, index: number, obj: T[]) => boolean): T | undefined {\n  let cursor = array.length;\n\n  while (cursor--) {\n    if (predicate(array[cursor], cursor, array)) {\n      return array[cursor];\n    }\n  }\n\n  return undefined;\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","/* eslint-disable no-bitwise */\n\n// eslint-disable-next-line max-len\nconst TEMPLATE = '<?xml version=\"1.0\" encoding=\"utf-8\"?><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 {{width}} {{height}}\" xml:space=\"preserve\"><path fill-opacity=\"0.1\" d=\"{{path}}\" /></svg>';\nconst LOOKUP = 'AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,';\n\nexport function pathBytesToSvg(bytes: Buffer, width: number, height: number) {\n  return TEMPLATE\n    .replace('{{path}}', buildPath(bytes))\n    .replace('{{width}}', String(width))\n    .replace('{{height}}', String(height));\n}\n\nfunction buildPath(bytes: Buffer) {\n  let path = 'M';\n\n  const len = bytes.length;\n  for (let i = 0; i < len; i++) {\n    const num = bytes[i];\n    if (num >= 128 + 64) {\n      path += LOOKUP[num - 128 - 64];\n    } else {\n      if (num >= 128) {\n        path += ',';\n      } else if (num >= 64) {\n        path += '-';\n      }\n      path += String(num & 63);\n    }\n  }\n\n  path += 'z';\n\n  return path;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport { strippedPhotoToJpg } from '../../../lib/gramjs/Utils';\n\nimport type {\n  ApiPhoto, ApiPhotoSize, ApiThumbnail, ApiVideoSize,\n} from '../../types';\nimport { bytesToDataUri } from './helpers';\nimport { pathBytesToSvg } from './pathBytesToSvg';\n\nconst DEFAULT_THUMB_SIZE = { w: 100, h: 100 };\n\nexport function buildApiThumbnailFromStripped(\n  sizes?: GramJs.TypePhotoSize[], mimeType?: string,\n): ApiThumbnail | undefined {\n  if (!sizes || !sizes.length) {\n    return undefined;\n  }\n\n  const thumb = sizes.find((s: any): s is GramJs.PhotoStrippedSize => s instanceof GramJs.PhotoStrippedSize);\n  if (!thumb) {\n    return undefined;\n  }\n\n  const realSizes = sizes.filter((s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  const { w, h } = realSizes.length ? realSizes[realSizes.length - 1] : DEFAULT_THUMB_SIZE;\n  const { bytes } = thumb;\n  const dataUri = bytesToDataUri(\n    !mimeType || mimeType === 'image/jpeg' ? strippedPhotoToJpg(bytes) : bytes,\n    undefined,\n    mimeType,\n  );\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromCached(photoSize: GramJs.PhotoCachedSize): ApiThumbnail | undefined {\n  const { w, h, bytes } = photoSize;\n  const dataUri = bytesToDataUri(bytes, undefined, 'image/webp');\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromPath(\n  photoSize: GramJs.PhotoPathSize,\n  sizeAttribute: GramJs.DocumentAttributeImageSize | GramJs.DocumentAttributeVideo,\n): ApiThumbnail | undefined {\n  const { w, h } = sizeAttribute;\n  const dataUri = `data:image/svg+xml;utf8,${pathBytesToSvg(photoSize.bytes, w, h)}`;\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiPhoto(photo: GramJs.Photo): ApiPhoto {\n  const sizes = photo.sizes\n    .filter((s: any): s is GramJs.PhotoSize => {\n      return s instanceof GramJs.PhotoSize || s instanceof GramJs.PhotoSizeProgressive;\n    })\n    .map(buildApiPhotoSize);\n\n  return {\n    id: String(photo.id),\n    thumbnail: buildApiThumbnailFromStripped(photo.sizes),\n    sizes,\n    ...(photo.videoSizes && { videoSizes: photo.videoSizes.map(buildApiVideoSize), isVideo: true }),\n  };\n}\n\nexport function buildApiVideoSize(videoSize: GramJs.VideoSize): ApiVideoSize {\n  const {\n    videoStartTs, size, h, w, type,\n  } = videoSize;\n\n  return {\n    videoStartTs,\n    size,\n    height: h,\n    width: w,\n    type: type as ('u' | 'v'),\n  };\n}\n\nexport function buildApiPhotoSize(photoSize: GramJs.PhotoSize): ApiPhotoSize {\n  const { w, h, type } = photoSize;\n\n  return {\n    width: w,\n    height: h,\n    type: type as ('m' | 'x' | 'y'),\n  };\n}\n","import type { Api as GramJs } from '../../lib/gramjs';\nimport type { ApiMessage } from '../types';\n\ninterface LocalDb {\n  localMessages: Record<string, ApiMessage>;\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n}\n\nconst LOCAL_DB_INITIAL = {\n  localMessages: {},\n  chats: {},\n  users: {},\n  messages: {},\n  documents: {},\n  stickerSets: {},\n  photos: {},\n  webDocuments: {},\n};\n\nconst localDb: LocalDb = LOCAL_DB_INITIAL;\n\nexport default localDb;\n\nexport function clearLocalDb() {\n  Object.assign(localDb, LOCAL_DB_INITIAL);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiEmojiInteraction, ApiSticker, ApiStickerSet, GramJsEmojiInteraction,\n} from '../../types';\nimport { NO_STICKER_SET_ID } from '../../../config';\n\nimport { buildApiThumbnailFromCached, buildApiThumbnailFromPath } from './common';\nimport localDb from '../localDb';\n\nconst LOTTIE_STICKER_MIME_TYPE = 'application/x-tgsticker';\nconst VIDEO_STICKER_MIME_TYPE = 'video/webm';\n\nexport function buildStickerFromDocument(document: GramJs.TypeDocument, isNoPremium?: boolean): ApiSticker | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const { mimeType, videoThumbs } = document;\n  const stickerAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeSticker => (\n      attr instanceof GramJs.DocumentAttributeSticker\n    ));\n\n  const fileAttribute = (mimeType === LOTTIE_STICKER_MIME_TYPE || mimeType === VIDEO_STICKER_MIME_TYPE)\n    && document.attributes\n      .find((attr: any): attr is GramJs.DocumentAttributeFilename => (\n        attr instanceof GramJs.DocumentAttributeFilename\n      ));\n\n  if (!stickerAttribute && !fileAttribute) {\n    return undefined;\n  }\n\n  const isLottie = mimeType === LOTTIE_STICKER_MIME_TYPE;\n  const isVideo = mimeType === VIDEO_STICKER_MIME_TYPE;\n\n  const imageSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeImageSize => (\n      attr instanceof GramJs.DocumentAttributeImageSize\n    ));\n\n  const videoSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeVideo => (\n      attr instanceof GramJs.DocumentAttributeVideo\n    ));\n\n  const sizeAttribute = imageSizeAttribute || videoSizeAttribute;\n\n  const stickerSetInfo = stickerAttribute && stickerAttribute.stickerset instanceof GramJs.InputStickerSetID\n    ? stickerAttribute.stickerset\n    : undefined;\n  const emoji = stickerAttribute?.alt;\n\n  const cachedThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoCachedSize => s instanceof GramJs.PhotoCachedSize,\n  );\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_STICKER_MIME_TYPE && !(self as any).isWebmSupported && !cachedThumb) {\n    const staticThumb = document.thumbs && document.thumbs.find(\n      (s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize,\n    );\n\n    if (!staticThumb) {\n      return undefined;\n    }\n  }\n\n  const pathThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoPathSize => s instanceof GramJs.PhotoPathSize,\n  );\n\n  const thumbnail = cachedThumb ? (\n    buildApiThumbnailFromCached(cachedThumb)\n  ) : pathThumb && sizeAttribute ? (\n    buildApiThumbnailFromPath(pathThumb, sizeAttribute)\n  ) : undefined;\n\n  const { w: width, h: height } = cachedThumb as GramJs.PhotoCachedSize || sizeAttribute || {};\n\n  const hasEffect = !isNoPremium && videoThumbs?.some(({ type }) => type === 'f');\n\n  return {\n    id: String(document.id),\n    stickerSetId: stickerSetInfo ? String(stickerSetInfo.id) : NO_STICKER_SET_ID,\n    stickerSetAccessHash: stickerSetInfo && String(stickerSetInfo.accessHash),\n    emoji,\n    isLottie,\n    isVideo,\n    width,\n    height,\n    thumbnail,\n    hasEffect,\n  };\n}\n\nexport function buildStickerSet(set: GramJs.StickerSet): ApiStickerSet {\n  const {\n    archived,\n    animated,\n    installedDate,\n    videos,\n    id,\n    accessHash,\n    title,\n    thumbs,\n    count,\n    shortName,\n  } = set;\n\n  return {\n    archived,\n    isLottie: animated,\n    isVideos: videos,\n    installedDate,\n    id: String(id),\n    accessHash: String(accessHash),\n    title,\n    hasThumbnail: Boolean(thumbs?.length),\n    count,\n    shortName,\n  };\n}\n\nexport function buildStickerSetCovered(coveredStickerSet: GramJs.TypeStickerSetCovered): ApiStickerSet {\n  const stickerSet = buildStickerSet(coveredStickerSet.set);\n\n  const stickerSetCovers = (coveredStickerSet instanceof GramJs.StickerSetMultiCovered)\n    ? coveredStickerSet.covers\n    : [coveredStickerSet.cover];\n\n  stickerSet.covers = [];\n  stickerSetCovers.forEach((cover) => {\n    if (cover instanceof GramJs.Document) {\n      const coverSticker = buildStickerFromDocument(cover);\n      if (coverSticker) {\n        stickerSet.covers!.push(coverSticker);\n        localDb.documents[String(cover.id)] = cover;\n      }\n    }\n  });\n\n  return stickerSet;\n}\n\nexport function buildApiEmojiInteraction(json: GramJsEmojiInteraction): ApiEmojiInteraction {\n  return {\n    timestamps: json.a.map((l) => l.t),\n  };\n}\n","/* eslint-disable no-bitwise */\n\n// eslint-disable-next-line max-len\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import type { ApiWebDocument } from './bots';\nimport type { ApiGroupCall, PhoneCallAction } from './calls';\nimport type { ApiChat } from './chats';\n\nexport interface ApiDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface ApiPhotoSize extends ApiDimensions {\n  type: 's' | 'm' | 'x' | 'y' | 'z';\n}\n\nexport interface ApiVideoSize extends ApiDimensions {\n  type: 'u' | 'v';\n  videoStartTs: number;\n  size: number;\n}\n\nexport interface ApiThumbnail extends ApiDimensions {\n  dataUri: string;\n}\n\nexport interface ApiPhoto {\n  id: string;\n  thumbnail?: ApiThumbnail;\n  isVideo?: boolean;\n  sizes: ApiPhotoSize[];\n  videoSizes?: ApiVideoSize[];\n  blobUrl?: string;\n}\n\nexport interface ApiSticker {\n  id: string;\n  stickerSetId: string;\n  stickerSetAccessHash?: string;\n  emoji?: string;\n  isLottie: boolean;\n  isVideo: boolean;\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  isPreloadedGlobally?: boolean;\n  hasEffect?: boolean;\n}\n\nexport interface ApiStickerSet {\n  archived?: true;\n  isLottie?: true;\n  isVideos?: true;\n  installedDate?: number;\n  id: string;\n  accessHash: string;\n  title: string;\n  hasThumbnail?: boolean;\n  count: number;\n  stickers?: ApiSticker[];\n  packs?: Record<string, ApiSticker[]>;\n  covers?: ApiSticker[];\n  shortName: string;\n}\n\nexport interface ApiVideo {\n  id: string;\n  mimeType: string;\n  duration: number;\n  fileName: string;\n  width?: number;\n  height?: number;\n  supportsStreaming?: boolean;\n  isRound?: boolean;\n  isGif?: boolean;\n  thumbnail?: ApiThumbnail;\n  blobUrl?: string;\n  size: number;\n}\n\nexport interface ApiAudio {\n  id: string;\n  size: number;\n  mimeType: string;\n  fileName: string;\n  duration: number;\n  performer?: string;\n  title?: string;\n  thumbnailSizes?: ApiPhotoSize[];\n}\n\nexport interface ApiVoice {\n  id: string;\n  duration: number;\n  waveform?: number[];\n}\n\nexport interface ApiDocument {\n  id?: string;\n  fileName: string;\n  size: number;\n  timestamp?: number;\n  mimeType: string;\n  thumbnail?: ApiThumbnail;\n  previewBlobUrl?: string;\n  mediaType?: 'photo' | 'video';\n  mediaSize?: ApiDimensions;\n}\n\nexport interface ApiContact {\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  userId: string;\n}\n\nexport interface ApiPollAnswer {\n  text: string;\n  option: string;\n}\n\nexport interface ApiPollResult {\n  isChosen?: true;\n  isCorrect?: true;\n  option: string;\n  votersCount: number;\n}\n\nexport interface ApiPoll {\n  id: string;\n  summary: {\n    closed?: true;\n    isPublic?: true;\n    multipleChoice?: true;\n    quiz?: true;\n    question: string;\n    answers: ApiPollAnswer[];\n    closePeriod?: number;\n    closeDate?: number;\n  };\n  results: {\n    isMin?: true;\n    results?: ApiPollResult[];\n    totalVoters?: number;\n    recentVoterIds?: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n}\n\n// First type used for state, second - for API requests\nexport type ApiInputInvoice = {\n  chatId: string;\n  messageId: number;\n} | {\n  slug: string;\n};\n\nexport type ApiRequestInputInvoice = {\n  chat: ApiChat;\n  messageId: number;\n} | {\n  slug: string;\n};\n\nexport interface ApiInvoice {\n  text: string;\n  title: string;\n  photo?: ApiWebDocument;\n  amount: number;\n  currency: string;\n  receiptMsgId?: number;\n  isTest?: boolean;\n  isRecurring?: boolean;\n  recurringTermsUrl?: string;\n}\n\ninterface ApiGeoPoint {\n  long: number;\n  lat: number;\n  accessHash: string;\n  accuracyRadius?: number;\n}\n\ninterface ApiGeo {\n  type: 'geo';\n  geo: ApiGeoPoint;\n}\n\ninterface ApiVenue {\n  type: 'venue';\n  geo: ApiGeoPoint;\n  title: string;\n  address: string;\n  provider: string;\n  venueId: string;\n  venueType: string;\n}\n\ninterface ApiGeoLive {\n  type: 'geoLive';\n  geo: ApiGeoPoint;\n  heading?: number;\n  period: number;\n}\n\nexport type ApiLocation = ApiGeo | ApiVenue | ApiGeoLive;\n\nexport type ApiGame = {\n  title: string;\n  description: string;\n  photo?: ApiPhoto;\n  shortName: string;\n  id: string;\n  accessHash: string;\n  document?: ApiDocument;\n};\n\nexport type ApiNewPoll = {\n  summary: ApiPoll['summary'];\n  quiz?: {\n    correctAnswers: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n};\n\nexport interface ApiAction {\n  text: string;\n  targetUserIds?: string[];\n  targetChatId?: string;\n  type: 'historyClear' | 'contactSignUp' | 'chatCreate' | 'other';\n  photo?: ApiPhoto;\n  amount?: number;\n  currency?: string;\n  translationValues: string[];\n  call?: Partial<ApiGroupCall>;\n  phoneCall?: PhoneCallAction;\n  score?: number;\n}\n\nexport interface ApiWebPage {\n  id: number;\n  url: string;\n  displayUrl: string;\n  type?: string;\n  siteName?: string;\n  title?: string;\n  description?: string;\n  photo?: ApiPhoto;\n  duration?: number;\n  document?: ApiDocument;\n  video?: ApiVideo;\n}\n\nexport interface ApiMessageForwardInfo {\n  date: number;\n  isChannelPost: boolean;\n  channelPostId?: number;\n  isLinkedChannelPost?: boolean;\n  fromChatId?: string;\n  senderUserId?: string;\n  fromMessageId?: number;\n  hiddenUserName?: string;\n  adminTitle?: string;\n}\n\nexport interface ApiMessageEntity {\n  type: string;\n  offset: number;\n  length: number;\n  userId?: string;\n  url?: string;\n  language?: string;\n}\n\nexport enum ApiMessageEntityTypes {\n  Bold = 'MessageEntityBold',\n  Blockquote = 'MessageEntityBlockquote',\n  BotCommand = 'MessageEntityBotCommand',\n  Cashtag = 'MessageEntityCashtag',\n  Code = 'MessageEntityCode',\n  Email = 'MessageEntityEmail',\n  Hashtag = 'MessageEntityHashtag',\n  Italic = 'MessageEntityItalic',\n  MentionName = 'MessageEntityMentionName',\n  Mention = 'MessageEntityMention',\n  Phone = 'MessageEntityPhone',\n  Pre = 'MessageEntityPre',\n  Strike = 'MessageEntityStrike',\n  TextUrl = 'MessageEntityTextUrl',\n  Url = 'MessageEntityUrl',\n  Underline = 'MessageEntityUnderline',\n  Spoiler = 'MessageEntitySpoiler',\n  Unknown = 'MessageEntityUnknown',\n}\n\nexport interface ApiFormattedText {\n  text: string;\n  entities?: ApiMessageEntity[];\n}\n\nexport interface ApiMessage {\n  id: number;\n  chatId: string;\n  content: {\n    text?: ApiFormattedText;\n    photo?: ApiPhoto;\n    video?: ApiVideo;\n    document?: ApiDocument;\n    sticker?: ApiSticker;\n    contact?: ApiContact;\n    poll?: ApiPoll;\n    action?: ApiAction;\n    webPage?: ApiWebPage;\n    audio?: ApiAudio;\n    voice?: ApiVoice;\n    invoice?: ApiInvoice;\n    location?: ApiLocation;\n    game?: ApiGame;\n  };\n  date: number;\n  isOutgoing: boolean;\n  senderId?: string;\n  replyToChatId?: string;\n  replyToMessageId?: number;\n  replyToTopMessageId?: number;\n  sendingState?: 'messageSendingStatePending' | 'messageSendingStateFailed';\n  forwardInfo?: ApiMessageForwardInfo;\n  isDeleting?: boolean;\n  previousLocalId?: number;\n  views?: number;\n  forwards?: number;\n  isEdited?: boolean;\n  editDate?: number;\n  isMentioned?: boolean;\n  isMediaUnread?: boolean;\n  groupedId?: string;\n  isInAlbum?: boolean;\n  hasUnreadMention?: boolean;\n  inlineButtons?: ApiKeyboardButtons;\n  keyboardButtons?: ApiKeyboardButtons;\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  viaBotId?: string;\n  threadInfo?: ApiThreadInfo;\n  adminTitle?: string;\n  isScheduled?: boolean;\n  shouldHideKeyboardButtons?: boolean;\n  isFromScheduled?: boolean;\n  seenByUserIds?: string[];\n  isProtected?: boolean;\n  transcriptionId?: string;\n  isTranscriptionError?: boolean;\n  reactors?: {\n    nextOffset?: string;\n    count: number;\n    reactions: ApiUserReaction[];\n  };\n  reactions?: ApiReactions;\n}\n\nexport interface ApiReactions {\n  canSeeList?: boolean;\n  results: ApiReactionCount[];\n  recentReactions?: ApiUserReaction[];\n}\n\nexport interface ApiUserReaction {\n  userId: string;\n  reaction: string;\n  isBig?: boolean;\n  isUnread?: boolean;\n}\n\nexport interface ApiReactionCount {\n  isChosen?: boolean;\n  count: number;\n  reaction: string;\n}\n\nexport interface ApiAvailableReaction {\n  selectAnimation?: ApiDocument;\n  activateAnimation?: ApiDocument;\n  effectAnimation?: ApiDocument;\n  staticIcon?: ApiDocument;\n  centerIcon?: ApiDocument;\n  aroundAnimation?: ApiDocument;\n  reaction: string;\n  title: string;\n  isInactive?: boolean;\n  isPremium?: boolean;\n}\n\nexport interface ApiThreadInfo {\n  threadId: number;\n  chatId: string;\n  topMessageId?: number;\n  originChannelId?: string;\n  messagesCount: number;\n  lastMessageId?: number;\n  lastReadInboxMessageId?: number;\n  recentReplierIds?: string[];\n}\n\nexport type ApiMessageOutgoingStatus = 'read' | 'succeeded' | 'pending' | 'failed';\n\nexport type ApiSponsoredMessage = {\n  chatId?: string;\n  randomId: string;\n  isRecommended?: boolean;\n  isBot?: boolean;\n  channelPostId?: number;\n  startParam?: string;\n  chatInviteHash?: string;\n  chatInviteTitle?: string;\n  text: ApiFormattedText;\n  expiresAt: number;\n};\n\n// KeyboardButtons\n\ninterface ApiKeyboardButtonSimple {\n  type: 'unsupported' | 'buy' | 'command' | 'requestPhone' | 'game';\n  text: string;\n}\n\ninterface ApiKeyboardButtonReceipt {\n  type: 'receipt';\n  text: string;\n  receiptMessageId: number;\n}\n\ninterface ApiKeyboardButtonUrl {\n  type: 'url';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonSimpleWebView {\n  type: 'simpleWebView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonWebView {\n  type: 'webView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonCallback {\n  type: 'callback';\n  text: string;\n  data: string;\n}\n\ninterface ApiKeyboardButtonRequestPoll {\n  type: 'requestPoll';\n  text: string;\n  isQuiz?: boolean;\n}\n\ninterface ApiKeyboardButtonSwitchBotInline {\n  type: 'switchBotInline';\n  text: string;\n  query: string;\n  isSamePeer?: boolean;\n}\n\ninterface ApiKeyboardButtonUserProfile {\n  type: 'userProfile';\n  text: string;\n  userId: string;\n}\n\ninterface ApiKeyboardButtonUrlAuth {\n  type: 'urlAuth';\n  text: string;\n  url: string;\n  buttonId: number;\n}\n\nexport type ApiTranscription = {\n  text: string;\n  isPending?: boolean;\n  transcriptionId: string;\n};\n\nexport type ApiKeyboardButton = (\n  ApiKeyboardButtonSimple\n  | ApiKeyboardButtonReceipt\n  | ApiKeyboardButtonUrl\n  | ApiKeyboardButtonCallback\n  | ApiKeyboardButtonRequestPoll\n  | ApiKeyboardButtonSwitchBotInline\n  | ApiKeyboardButtonUserProfile\n  | ApiKeyboardButtonWebView\n  | ApiKeyboardButtonSimpleWebView\n  | ApiKeyboardButtonUrlAuth\n);\n\nexport type ApiKeyboardButtons = ApiKeyboardButton[][];\nexport type ApiReplyKeyboard = {\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n} & {\n  [K in 'inlineButtons' | 'keyboardButtons']?: ApiKeyboardButtons;\n};\n\nexport type ApiMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice' | 'profilePhoto';\nexport type ApiGlobalMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice';\n\nexport type ApiReportReason = 'spam' | 'violence' | 'pornography' | 'childAbuse'\n| 'copyright' | 'geoIrrelevant' | 'fake' | 'illegalDrugs' | 'personalDetails' | 'other';\n\nexport type ApiSendMessageAction = {\n  type: 'cancel' | 'typing' | 'recordAudio' | 'chooseSticker' | 'playingGame';\n};\n\nexport type ApiThemeParameters = {\n  bg_color: string;\n  text_color: string;\n  hint_color: string;\n  link_color: string;\n  button_color: string;\n  button_text_color: string;\n  secondary_bg_color: string;\n};\n\nexport const MAIN_THREAD_ID = -1;\n\n// `Symbol` can not be transferred from worker\nexport const MESSAGE_DELETED = 'MESSAGE_DELETED';\n","// We cache avatars as Data URI for faster initial load\n// and messages media as Blob for smaller size.\n\nexport enum ApiMediaFormat {\n  BlobUrl,\n  Progressive,\n  Stream,\n  Text,\n}\n\nexport type ApiParsedMedia = string | Blob | ArrayBuffer;\nexport type ApiPreparedMedia = string;\n","import type BigInt from 'big-integer';\n\nimport type { Api as GramJs } from '../../../lib/gramjs';\n\nexport function isPeerUser(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerUser {\n  return peer.hasOwnProperty('userId');\n}\n\nexport function isPeerChat(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChat {\n  return peer.hasOwnProperty('chatId');\n}\n\nexport function isPeerChannel(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChannel {\n  return peer.hasOwnProperty('channelId');\n}\n\nexport function buildApiPeerId(id: BigInt.BigInteger, type: 'user' | 'chat' | 'channel') {\n  return type === 'user' ? String(id) : `-${id}`;\n}\n\nexport function getApiChatIdFromMtpPeer(peer: GramJs.TypePeer | GramJs.TypeInputPeer) {\n  if (isPeerUser(peer)) {\n    return buildApiPeerId(peer.userId, 'user');\n  } else if (isPeerChat(peer)) {\n    return buildApiPeerId(peer.chatId, 'chat');\n  } else {\n    return buildApiPeerId((peer as GramJs.InputPeerChannel).channelId, 'channel');\n  }\n}\n","import { Api as GramJs } from '../../lib/gramjs';\nimport localDb from './localDb';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\n\nexport function resolveMessageApiChatId(mtpMessage: GramJs.TypeMessage) {\n  if (!(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return getApiChatIdFromMtpPeer(mtpMessage.peerId);\n}\n\nexport function addMessageToLocalDb(message: GramJs.Message | GramJs.MessageService) {\n  const messageFullId = `${resolveMessageApiChatId(message)}-${message.id}`;\n  localDb.messages[messageFullId] = message;\n\n  if (message instanceof GramJs.Message) {\n    if (message.media instanceof GramJs.MessageMediaDocument\n      && message.media.document instanceof GramJs.Document\n    ) {\n      localDb.documents[String(message.media.document.id)] = message.media.document;\n    }\n\n    if (message.media instanceof GramJs.MessageMediaWebPage\n      && message.media.webpage instanceof GramJs.WebPage\n      && message.media.webpage.document instanceof GramJs.Document\n    ) {\n      localDb.documents[String(message.media.webpage.document.id)] = message.media.webpage.document;\n    }\n\n    if (message.media instanceof GramJs.MessageMediaGame) {\n      if (message.media.game.document instanceof GramJs.Document) {\n        localDb.documents[String(message.media.game.document.id)] = message.media.game.document;\n      }\n      addPhotoToLocalDb(message.media.game.photo);\n    }\n\n    if (message.media instanceof GramJs.MessageMediaInvoice\n      && message.media.photo) {\n      localDb.webDocuments[String(message.media.photo.url)] = message.media.photo;\n    }\n  }\n\n  if (message instanceof GramJs.MessageService && 'photo' in message.action) {\n    addPhotoToLocalDb(message.action.photo);\n  }\n}\n\nexport function addPhotoToLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.Photo) {\n    localDb.photos[String(photo.id)] = photo;\n  }\n}\n\nfunction addChatToLocalDb(chat: GramJs.Chat | GramJs.Channel, noOverwrite = false) {\n  const id = buildApiPeerId(chat.id, chat instanceof GramJs.Chat ? 'chat' : 'channel');\n  if (!noOverwrite || !localDb.chats[id]) {\n    localDb.chats[id] = chat;\n  }\n}\n\nexport function addUserToLocalDb(user: GramJs.User, shouldOverwrite = false) {\n  const id = buildApiPeerId(user.id, 'user');\n  if (shouldOverwrite || !localDb.users[id]) {\n    localDb.users[id] = user;\n  }\n}\n\nexport function addEntitiesWithPhotosToLocalDb(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities.forEach((entity) => {\n    if (entity instanceof GramJs.User && entity.photo) {\n      addUserToLocalDb(entity);\n    } else if ((entity instanceof GramJs.Chat || entity instanceof GramJs.Channel) && entity.photo) {\n      addChatToLocalDb(entity);\n    }\n  });\n}\n\nexport function serializeBytes(value: Buffer) {\n  return String.fromCharCode(...value);\n}\n\nexport function deserializeBytes(value: string) {\n  return Buffer.from(value, 'binary');\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiPrivacyKey } from '../../../types';\n\nimport { generateRandomBytes, readBigIntFromBuffer } from '../../../lib/gramjs/Helpers';\nimport type {\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiGroupCall,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiPhoto,\n  ApiPhoneCall,\n  ApiReportReason,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiVideo,\n  ApiThemeParameters,\n  ApiPoll,\n  ApiRequestInputInvoice,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\nimport localDb from '../localDb';\nimport { pick } from '../../../util/iteratees';\nimport { deserializeBytes } from '../helpers';\n\nconst CHANNEL_ID_MIN_LENGTH = 11; // Example: -1000000000\n\nexport function getEntityTypeById(chatOrUserId: string) {\n  if (typeof chatOrUserId === 'number') {\n    return getEntityTypeByDeprecatedId(chatOrUserId);\n  }\n\n  if (!chatOrUserId.startsWith('-')) {\n    return 'user';\n  } else if (chatOrUserId.length >= CHANNEL_ID_MIN_LENGTH) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\n// Workaround for old-fashioned IDs stored locally\nexport function getEntityTypeByDeprecatedId(chatOrUserId: number) {\n  if (chatOrUserId > 0) {\n    return 'user';\n  } else if (chatOrUserId <= -1000000000) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\nexport function buildPeer(chatOrUserId: string): GramJs.TypePeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.PeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.PeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n    });\n  } else {\n    return new GramJs.PeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeer(chatOrUserId: string, accessHash?: string): GramJs.TypeInputPeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputPeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputPeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return new GramJs.InputPeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeerFromLocalDb(chatOrUserId: string): GramJs.TypeInputPeer | undefined {\n  const type = getEntityTypeById(chatOrUserId);\n  let accessHash: BigInt.BigInteger | undefined;\n\n  if (type === 'user') {\n    accessHash = localDb.users[chatOrUserId]?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  } else if (type === 'channel') {\n    accessHash = (localDb.chats[chatOrUserId] as GramJs.Channel)?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  }\n\n  return buildInputPeer(chatOrUserId, String(accessHash));\n}\n\nexport function buildInputEntity(chatOrUserId: string, accessHash?: string) {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return buildMtpPeerId(chatOrUserId, 'chat');\n  }\n}\n\nexport function buildInputStickerSet(id: string, accessHash: string) {\n  return new GramJs.InputStickerSetID({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash),\n  });\n}\n\nexport function buildInputStickerSetShortName(shortName: string) {\n  return new GramJs.InputStickerSetShortName({\n    shortName,\n  });\n}\n\nexport function buildInputDocument(media: ApiSticker | ApiVideo) {\n  const document = localDb.documents[media.id];\n\n  if (!document) {\n    return undefined;\n  }\n\n  return new GramJs.InputDocument(pick(document, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputMediaDocument(media: ApiSticker | ApiVideo) {\n  const inputDocument = buildInputDocument(media);\n\n  if (!inputDocument) {\n    return undefined;\n  }\n\n  return new GramJs.InputMediaDocument({ id: inputDocument });\n}\n\nexport function buildInputPoll(pollParams: ApiNewPoll, randomId: BigInt.BigInteger) {\n  const { summary, quiz } = pollParams;\n\n  const poll = new GramJs.Poll({\n    id: randomId,\n    publicVoters: summary.isPublic,\n    question: summary.question,\n    answers: summary.answers.map(({ text, option }) => {\n      return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n    }),\n    quiz: summary.quiz,\n    multipleChoice: summary.multipleChoice,\n  });\n\n  if (!quiz) {\n    return new GramJs.InputMediaPoll({ poll });\n  }\n\n  const correctAnswers = quiz.correctAnswers.map(deserializeBytes);\n  const { solution } = quiz;\n  const solutionEntities = quiz.solutionEntities ? quiz.solutionEntities.map(buildMtpMessageEntity) : [];\n\n  return new GramJs.InputMediaPoll({\n    poll,\n    correctAnswers,\n    ...(solution && {\n      solution,\n      solutionEntities,\n    }),\n  });\n}\n\nexport function buildInputPollFromExisting(poll: ApiPoll, shouldClose = false) {\n  return new GramJs.InputMediaPoll({\n    poll: new GramJs.Poll({\n      id: BigInt(poll.id),\n      publicVoters: poll.summary.isPublic,\n      question: poll.summary.question,\n      answers: poll.summary.answers.map(({ text, option }) => {\n        return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n      }),\n      quiz: poll.summary.quiz,\n      multipleChoice: poll.summary.multipleChoice,\n      closeDate: poll.summary.closeDate,\n      closePeriod: poll.summary.closePeriod,\n      closed: shouldClose ? true : poll.summary.closed,\n    }),\n    correctAnswers: poll.results.results?.filter((o) => o.isCorrect).map((o) => deserializeBytes(o.option)),\n    solution: poll.results.solution,\n    solutionEntities: poll.results.solutionEntities?.map(buildMtpMessageEntity),\n  });\n}\n\nexport function buildFilterFromApiFolder(folder: ApiChatFolder): GramJs.DialogFilter {\n  const {\n    emoticon,\n    contacts,\n    nonContacts,\n    groups,\n    channels,\n    bots,\n    excludeArchived,\n    excludeMuted,\n    excludeRead,\n    pinnedChatIds,\n    includedChatIds,\n    excludedChatIds,\n  } = folder;\n\n  const pinnedPeers = pinnedChatIds\n    ? pinnedChatIds.map(buildInputPeerFromLocalDb).filter<GramJs.TypeInputPeer>(Boolean as any)\n    : [];\n\n  const includePeers = includedChatIds\n    ? includedChatIds.map(buildInputPeerFromLocalDb).filter<GramJs.TypeInputPeer>(Boolean as any)\n    : [];\n\n  const excludePeers = excludedChatIds\n    ? excludedChatIds.map(buildInputPeerFromLocalDb).filter<GramJs.TypeInputPeer>(Boolean as any)\n    : [];\n\n  return new GramJs.DialogFilter({\n    id: folder.id,\n    title: folder.title,\n    emoticon: emoticon || undefined,\n    contacts: contacts || undefined,\n    nonContacts: nonContacts || undefined,\n    groups: groups || undefined,\n    bots: bots || undefined,\n    excludeArchived: excludeArchived || undefined,\n    excludeMuted: excludeMuted || undefined,\n    excludeRead: excludeRead || undefined,\n    broadcasts: channels || undefined,\n    pinnedPeers,\n    includePeers,\n    excludePeers,\n  });\n}\n\nexport function generateRandomBigInt() {\n  return readBigIntFromBuffer(generateRandomBytes(8), true, true);\n}\n\nexport function generateRandomInt() {\n  return readBigIntFromBuffer(generateRandomBytes(4), true, true).toJSNumber();\n}\n\nexport function buildMessageFromUpdate(\n  id: number,\n  chatId: string,\n  update: GramJs.UpdateShortSentMessage | GramJs.UpdateServiceNotification,\n) {\n  // This is not a proper message, but we only need these fields for downloading media through `localDb`.\n  return new GramJs.Message({\n    id,\n    peerId: buildPeer(chatId),\n    fromId: buildPeer(chatId),\n    media: update.media,\n  } as GramJs.Message);\n}\n\nexport function buildMtpMessageEntity(entity: ApiMessageEntity): GramJs.TypeMessageEntity {\n  const {\n    type, offset, length, url, userId, language,\n  } = entity;\n\n  const user = userId ? localDb.users[userId] : undefined;\n\n  switch (type) {\n    case ApiMessageEntityTypes.Bold:\n      return new GramJs.MessageEntityBold({ offset, length });\n    case ApiMessageEntityTypes.Italic:\n      return new GramJs.MessageEntityItalic({ offset, length });\n    case ApiMessageEntityTypes.Underline:\n      return new GramJs.MessageEntityUnderline({ offset, length });\n    case ApiMessageEntityTypes.Strike:\n      return new GramJs.MessageEntityStrike({ offset, length });\n    case ApiMessageEntityTypes.Code:\n      return new GramJs.MessageEntityCode({ offset, length });\n    case ApiMessageEntityTypes.Pre:\n      return new GramJs.MessageEntityPre({ offset, length, language: language || '' });\n    case ApiMessageEntityTypes.Blockquote:\n      return new GramJs.MessageEntityBlockquote({ offset, length });\n    case ApiMessageEntityTypes.TextUrl:\n      return new GramJs.MessageEntityTextUrl({ offset, length, url: url! });\n    case ApiMessageEntityTypes.Url:\n      return new GramJs.MessageEntityUrl({ offset, length });\n    case ApiMessageEntityTypes.Hashtag:\n      return new GramJs.MessageEntityHashtag({ offset, length });\n    case ApiMessageEntityTypes.MentionName:\n      return new GramJs.InputMessageEntityMentionName({\n        offset,\n        length,\n        userId: new GramJs.InputUser({ userId: BigInt(userId!), accessHash: user!.accessHash! }),\n      });\n    case ApiMessageEntityTypes.Spoiler:\n      return new GramJs.MessageEntitySpoiler({ offset, length });\n    default:\n      return new GramJs.MessageEntityUnknown({ offset, length });\n  }\n}\n\nexport function isMessageWithMedia(message: GramJs.Message | GramJs.UpdateServiceNotification) {\n  const { media } = message;\n  if (!media) {\n    return false;\n  }\n\n  return (\n    media instanceof GramJs.MessageMediaPhoto\n    || media instanceof GramJs.MessageMediaDocument\n    || (\n      media instanceof GramJs.MessageMediaWebPage\n      && media.webpage instanceof GramJs.WebPage\n      && (\n        media.webpage.photo instanceof GramJs.Photo || (\n          media.webpage.document instanceof GramJs.Document\n          && media.webpage.document.mimeType.startsWith('video')\n        )\n      )\n    ) || (\n      media instanceof GramJs.MessageMediaGame\n      && (media.game.document instanceof GramJs.Document || media.game.photo instanceof GramJs.Photo)\n    ) || (\n      media instanceof GramJs.MessageMediaInvoice && media.photo\n    )\n  );\n}\n\nexport function isServiceMessageWithMedia(message: GramJs.MessageService) {\n  return 'photo' in message.action && message.action.photo instanceof GramJs.Photo;\n}\n\nexport function buildChatPhotoForLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.PhotoEmpty) {\n    return new GramJs.ChatPhotoEmpty();\n  }\n\n  const { dcId, id: photoId } = photo;\n\n  return new GramJs.ChatPhoto({\n    dcId,\n    photoId,\n  });\n}\n\nexport function buildInputPhoto(photo: ApiPhoto) {\n  const localPhoto = localDb.photos[photo?.id];\n\n  if (!localPhoto) {\n    return undefined;\n  }\n\n  return new GramJs.InputPhoto(pick(localPhoto, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone: string;\n  firstName: string;\n  lastName: string;\n}) {\n  return new GramJs.InputPhoneContact({\n    clientId: BigInt(1),\n    phone,\n    firstName,\n    lastName,\n  });\n}\n\nexport function buildChatBannedRights(\n  bannedRights: ApiChatBannedRights,\n  untilDate = 0,\n) {\n  return new GramJs.ChatBannedRights({\n    ...bannedRights,\n    untilDate,\n  });\n}\n\nexport function buildChatAdminRights(\n  adminRights: ApiChatAdminRights,\n) {\n  return new GramJs.ChatAdminRights(adminRights);\n}\n\nexport function buildShippingInfo(info: GramJs.PaymentRequestedInfo) {\n  const { shippingAddress } = info;\n  return new GramJs.PaymentRequestedInfo({\n    ...info,\n    shippingAddress: shippingAddress\n      ? new GramJs.PostAddress(shippingAddress)\n      : undefined,\n  });\n}\n\nexport function buildInputPrivacyKey(privacyKey: ApiPrivacyKey) {\n  switch (privacyKey) {\n    case 'phoneNumber':\n      return new GramJs.InputPrivacyKeyPhoneNumber();\n\n    case 'lastSeen':\n      return new GramJs.InputPrivacyKeyStatusTimestamp();\n\n    case 'profilePhoto':\n      return new GramJs.InputPrivacyKeyProfilePhoto();\n\n    case 'forwards':\n      return new GramJs.InputPrivacyKeyForwards();\n\n    case 'chatInvite':\n      return new GramJs.InputPrivacyKeyChatInvite();\n\n    case 'phoneCall':\n      return new GramJs.InputPrivacyKeyPhoneCall();\n\n    case 'phoneP2P':\n      return new GramJs.InputPrivacyKeyPhoneP2P();\n  }\n\n  return undefined;\n}\n\nexport function buildInputReportReason(reason: ApiReportReason) {\n  switch (reason) {\n    case 'spam':\n      return new GramJs.InputReportReasonSpam();\n    case 'violence':\n      return new GramJs.InputReportReasonViolence();\n    case 'childAbuse':\n      return new GramJs.InputReportReasonChildAbuse();\n    case 'pornography':\n      return new GramJs.InputReportReasonPornography();\n    case 'copyright':\n      return new GramJs.InputReportReasonCopyright();\n    case 'fake':\n      return new GramJs.InputReportReasonFake();\n    case 'geoIrrelevant':\n      return new GramJs.InputReportReasonGeoIrrelevant();\n    case 'illegalDrugs':\n      return new GramJs.InputReportReasonIllegalDrugs();\n    case 'personalDetails':\n      return new GramJs.InputReportReasonPersonalDetails();\n    case 'other':\n      return new GramJs.InputReportReasonOther();\n  }\n\n  return undefined;\n}\n\nexport function buildSendMessageAction(action: ApiSendMessageAction) {\n  switch (action.type) {\n    case 'cancel':\n      return new GramJs.SendMessageCancelAction();\n    case 'typing':\n      return new GramJs.SendMessageTypingAction();\n    case 'recordAudio':\n      return new GramJs.SendMessageRecordAudioAction();\n    case 'chooseSticker':\n      return new GramJs.SendMessageChooseStickerAction();\n    case 'playingGame':\n      return new GramJs.SendMessageGamePlayAction();\n  }\n  return undefined;\n}\n\nexport function buildInputThemeParams(params: ApiThemeParameters) {\n  return new GramJs.DataJSON({\n    data: JSON.stringify(params),\n  });\n}\n\nexport function buildMtpPeerId(id: string, type: 'user' | 'chat' | 'channel') {\n  // Workaround for old-fashioned IDs stored locally\n  if (typeof id === 'number') {\n    return BigInt(Math.abs(id));\n  }\n\n  return type === 'user' ? BigInt(id) : BigInt(id.slice(1));\n}\n\nexport function buildInputGroupCall(groupCall: Partial<ApiGroupCall>) {\n  return new GramJs.InputGroupCall({\n    id: BigInt(groupCall.id!),\n    accessHash: BigInt(groupCall.accessHash!),\n  });\n}\n\nexport function buildInputPhoneCall({ id, accessHash }: ApiPhoneCall) {\n  return new GramJs.InputPhoneCall({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash!),\n  });\n}\n\nexport function buildInputInvoice(invoice: ApiRequestInputInvoice) {\n  if ('slug' in invoice) {\n    return new GramJs.InputInvoiceSlug({\n      slug: invoice.slug,\n    });\n  } else {\n    return new GramJs.InputInvoiceMessage({\n      peer: buildInputPeer(invoice.chat.id, invoice.chat.accessHash),\n      msgId: invoice.messageId,\n    });\n  }\n}\n","import type {\n  ApiCallProtocol,\n  ApiPhoneCallConnection,\n  GroupCallParticipant,\n  GroupCallParticipantVideo,\n  SsrcGroup,\n} from '../../../lib/secret-sauce';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiGroupCall, ApiPhoneCall } from '../../types';\nimport { getApiChatIdFromMtpPeer, isPeerUser } from './peers';\n\nexport function buildApiGroupCallParticipant(participant: GramJs.GroupCallParticipant): GroupCallParticipant {\n  const {\n    self, min, about, date, versioned, canSelfUnmute, justJoined, left, muted, mutedByYou, source, volume,\n    volumeByAdmin, videoJoined, peer, video, presentation, raiseHandRating,\n  } = participant;\n\n  return {\n    isSelf: self,\n    isMin: min,\n    canSelfUnmute,\n    isLeft: left,\n    isMuted: muted,\n    isMutedByMe: mutedByYou,\n    hasJustJoined: justJoined,\n    isVolumeByAdmin: volumeByAdmin,\n    isVersioned: versioned,\n    isVideoJoined: videoJoined,\n    about,\n    source,\n    raiseHandRating: raiseHandRating?.toString(),\n    volume,\n    date: new Date(date),\n    isUser: isPeerUser(peer),\n    id: getApiChatIdFromMtpPeer(peer),\n    video: video ? buildApiGroupCallParticipantVideo(video) : undefined,\n    presentation: presentation ? buildApiGroupCallParticipantVideo(presentation) : undefined,\n  };\n}\n\nfunction buildApiGroupCallParticipantVideo(\n  participantVideo: GramJs.GroupCallParticipantVideo,\n): GroupCallParticipantVideo {\n  const {\n    audioSource, endpoint, paused, sourceGroups,\n  } = participantVideo;\n  return {\n    audioSource,\n    endpoint,\n    isPaused: paused,\n    sourceGroups: sourceGroups.map(buildApiGroupCallParticipantVideoSourceGroup),\n  };\n}\n\nfunction buildApiGroupCallParticipantVideoSourceGroup(\n  participantVideoSourceGroup: GramJs.GroupCallParticipantVideoSourceGroup,\n): SsrcGroup {\n  return {\n    semantics: participantVideoSourceGroup.semantics,\n    sources: participantVideoSourceGroup.sources,\n  };\n}\n\nexport function buildApiGroupCall(groupCall: GramJs.TypeGroupCall): ApiGroupCall {\n  const {\n    id, accessHash,\n  } = groupCall;\n\n  if (groupCall instanceof GramJs.GroupCallDiscarded) {\n    return {\n      connectionState: 'discarded',\n      id: id.toString(),\n      accessHash: accessHash.toString(),\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    };\n  }\n\n  const {\n    version, participantsCount, streamDcId, scheduleDate, canChangeJoinMuted, joinMuted, canStartVideo,\n    scheduleStartSubscribed,\n  } = groupCall;\n\n  return {\n    connectionState: 'disconnected',\n    isLoaded: true,\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    version,\n    participantsCount,\n    streamDcId,\n    scheduleDate,\n    canChangeJoinMuted,\n    joinMuted,\n    canStartVideo,\n    scheduleStartSubscribed,\n    participants: {},\n  };\n}\n\nexport function getGroupCallId(groupCall: GramJs.TypeInputGroupCall) {\n  return groupCall.id.toString();\n}\n\nexport function buildPhoneCall(call: GramJs.TypePhoneCall): ApiPhoneCall {\n  const { id } = call;\n\n  let phoneCall: ApiPhoneCall = {\n    id: id.toString(),\n  };\n\n  if (call instanceof GramJs.PhoneCallAccepted\n    || call instanceof GramJs.PhoneCallWaiting\n    || call instanceof GramJs.PhoneCall\n    || call instanceof GramJs.PhoneCallRequested) {\n    const {\n      accessHash, adminId, date, video, participantId, protocol,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      accessHash: accessHash.toString(),\n      adminId: adminId.toString(),\n      participantId: participantId.toString(),\n      date,\n      isVideo: video,\n      protocol: buildApiCallProtocol(protocol),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCall) {\n    const {\n      p2pAllowed, gAOrB, keyFingerprint, connections, startDate,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      state: 'active',\n      gAOrB: Array.from(gAOrB),\n      keyFingerprint: keyFingerprint.toString(),\n      startDate,\n      p2pAllowed,\n      connections: connections.map(buildApiCallConnection).filter(Boolean) as ApiPhoneCallConnection[],\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallDiscarded) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'discarded',\n      duration: call.duration,\n      reason: buildApiCallDiscardReason(call.reason),\n      needRating: call.needRating,\n      needDebug: call.needDebug,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallWaiting) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'waiting',\n      receiveDate: call.receiveDate,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallAccepted) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'accepted',\n      gB: Array.from(call.gB),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallRequested) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'requested',\n      gAHash: Array.from(call.gAHash),\n    };\n  }\n\n  return phoneCall;\n}\n\nexport function buildApiCallDiscardReason(discardReason?: GramJs.TypePhoneCallDiscardReason) {\n  if (discardReason instanceof GramJs.PhoneCallDiscardReasonMissed) {\n    return 'missed';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonBusy) {\n    return 'busy';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonHangup) {\n    return 'hangup';\n  } else {\n    return 'disconnect';\n  }\n}\n\nfunction buildApiCallConnection(connection: GramJs.TypePhoneConnection): ApiPhoneCallConnection | undefined {\n  if (connection instanceof GramJs.PhoneConnectionWebrtc) {\n    const {\n      username, password, turn, stun, ip, ipv6, port,\n    } = connection;\n\n    return {\n      username,\n      password,\n      isTurn: turn,\n      isStun: stun,\n      ip,\n      ipv6,\n      port,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport function buildApiCallProtocol(protocol: GramJs.PhoneCallProtocol): ApiCallProtocol {\n  const {\n    libraryVersions, minLayer, maxLayer, udpP2p, udpReflector,\n  } = protocol;\n\n  return {\n    libraryVersions,\n    minLayer,\n    maxLayer,\n    isUdpP2p: udpP2p,\n    isUdpReflector: udpReflector,\n  };\n}\n\nexport function buildCallProtocol() {\n  return new GramJs.PhoneCallProtocol({\n    libraryVersions: ['4.0.0'],\n    minLayer: 92,\n    maxLayer: 92,\n    udpReflector: true,\n    udpP2p: true,\n  });\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiMessage,\n  ApiMessageForwardInfo,\n  ApiPhoto,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiAudio,\n  ApiDocument,\n  ApiAction,\n  ApiContact,\n  ApiAttachment,\n  ApiPoll,\n  ApiNewPoll,\n  ApiWebPage,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiReplyKeyboard,\n  ApiKeyboardButton,\n  ApiChat,\n  ApiThreadInfo,\n  ApiInvoice,\n  ApiGroupCall,\n  ApiReactions,\n  ApiReactionCount,\n  ApiUserReaction,\n  ApiAvailableReaction,\n  ApiSponsoredMessage,\n  ApiUser,\n  ApiLocation,\n  ApiGame,\n  PhoneCallAction,\n  ApiWebDocument,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  VIDEO_MOV_TYPE,\n  VIDEO_WEBM_TYPE,\n} from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { buildStickerFromDocument } from './symbols';\nimport { buildApiPhoto, buildApiPhotoSize, buildApiThumbnailFromStripped } from './common';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport { addPhotoToLocalDb, resolveMessageApiChatId, serializeBytes } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildApiCallDiscardReason } from './calls';\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\n\nlet localMessageCounter = 0;\nconst getNextLocalMessageId = () => parseFloat(`${Date.now()}.${localMessageCounter++}`);\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\ntype UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards'\n  )>\n);\n\nexport function buildApiMessageWithChatId(chatId: string, mtpMessage: UniversalMessage): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n\n  const { replyToMsgId, replyToTopId, replyToPeerId } = mtpMessage.replyTo || {};\n  const isEdited = mtpMessage.editDate && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse,\n  } = buildReplyButtons(mtpMessage) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { replies, mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n\n  return {\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    views: mtpMessage.views,\n    forwards: mtpMessage.forwards,\n    isFromScheduled: mtpMessage.fromScheduled,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    ...(replyToMsgId && { replyToMessageId: replyToMsgId }),\n    ...(replyToPeerId && { replyToChatId: getApiChatIdFromMtpPeer(replyToPeerId) }),\n    ...(replyToTopId && { replyToTopMessageId: replyToTopId }),\n    ...(forwardInfo && { forwardInfo }),\n    ...(isEdited && { isEdited }),\n    ...(mtpMessage.editDate && { editDate: mtpMessage.editDate }),\n    ...(isMediaUnread && { isMediaUnread }),\n    ...(mtpMessage.mentioned && isMediaUnread && { hasUnreadMention: true }),\n    ...(mtpMessage.mentioned && { isMentioned: true }),\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && { keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    ...(replies?.comments && { threadInfo: buildThreadInfo(replies, mtpMessage.id, chatId) }),\n    ...(postAuthor && { adminTitle: postAuthor }),\n    ...(mtpMessage.noforwards && { isProtected: true }),\n  };\n}\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList,\n  } = reactions;\n\n  return {\n    canSeeList,\n    results: results.map(buildReactionCount),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction),\n  };\n}\n\nfunction buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount {\n  const { chosen, count, reaction } = reactionCount;\n\n  return {\n    isChosen: chosen,\n    count,\n    reaction,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiUserReaction {\n  const {\n    peerId, reaction, big, unread,\n  } = userReaction;\n\n  return {\n    userId: getApiChatIdFromMtpPeer(peerId),\n    reaction,\n    isUnread: unread,\n    isBig: big,\n  };\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction,\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: ApiMessage['content'] = {};\n\n  if (mtpMessage.media) {\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n      && !content.sticker && !content.poll && !content.contact && !(content.video?.isRound)) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage) {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyToMsgId, date,\n  } = draft;\n\n  return {\n    formattedText: message ? buildMessageTextContent(message, entities) : undefined,\n    replyingToId: replyToMsgId,\n    date,\n  };\n}\n\nexport function buildMessageMediaContent(media: GramJs.TypeMessageMedia): ApiMessage['content'] | undefined {\n  if ('ttlSeconds' in media && media.ttlSeconds) {\n    return undefined;\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  if (video) return { video };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const voice = buildVoice(media);\n  if (voice) return { voice };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const poll = buildPollFromMedia(media);\n  if (poll) return { poll };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  return undefined;\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    fromChatId: savedFromPeerId || fromId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    senderUserId: fromId,\n    hiddenUserName: fwdFrom.fromName,\n    adminTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_MOV_TYPE && !(self as any).isMovSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n  } = videoAttr;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document);\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    id: String(media.document.id),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n\n  let mediaType: ApiDocument['mediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  const photoSize = thumbs && thumbs.find((s: any): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    mediaType,\n    mediaSize,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    firstName, lastName, phoneNumber, userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { type: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nfunction buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: answer.text,\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'question',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildInvoice(media: GramJs.MessageMediaInvoice): ApiInvoice {\n  const {\n    description: text, title, photo, test, totalAmount, currency, receiptMsgId,\n  } = media;\n\n  return {\n    text,\n    title,\n    photo: buildApiWebDocument(photo),\n    receiptMsgId,\n    amount: Number(totalAmount),\n    currency,\n    isTest: test,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults && rawResults.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((id) => buildApiPeerId(id, 'user')),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const { id, photo, document } = media.webpage;\n\n  let video;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n\n  return {\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && document ? buildApiDocument(document) : undefined,\n    video,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let text: string;\n  const translationValues = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    text = 'Chat.Service.BotPermissionAllowed';\n    translationValues.push(action.domain);\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  // TODO Move to the proper button inside preview\n  if (!replyMarkup) {\n    if (media instanceof GramJs.MessageMediaWebPage && media.webpage instanceof GramJs.WebPage) {\n      if (media.webpage.type === 'telegram_message') {\n        return {\n          inlineButtons: [[{\n            type: 'url',\n            text: 'Show Message',\n            url: media.webpage.url,\n          }]],\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  // TODO\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    });\n  });\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n    }),\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyingTo?: number,\n  replyingToTopId?: number,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiChat | ApiUser,\n  serverTimeOffset = 0,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  return {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + serverTimeOffset,\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    ...(replyingTo && { replyToMessageId: replyingTo }),\n    ...(replyingToTopId && { replyToTopMessageId: replyingToTopId }),\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nexport function buildLocalForwardedMessage(\n  toChat: ApiChat,\n  message: ApiMessage,\n  serverTimeOffset: number,\n  scheduledAt?: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content,\n    date: scheduledAt || Math.round(Date.now() / 1000) + serverTimeOffset,\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(senderId !== currentUserId && !isAudio && {\n      forwardInfo: {\n        date: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        senderUserId: senderId,\n      },\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildUploadingMedia(\n  attachment: ApiAttachment,\n): ApiMessage['content'] {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n  } = attachment;\n\n  if (attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      const { width, height } = attachment.quick;\n      return {\n        photo: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          sizes: [],\n          thumbnail: { width, height, dataUri: '' }, // Used only for dimensions\n          blobUrl,\n        },\n      };\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      const { width, height, duration } = attachment.quick;\n      return {\n        video: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          duration: duration || 0,\n          fileName,\n          width,\n          height,\n          blobUrl,\n          ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n          size,\n        },\n      };\n    }\n  }\n  if (attachment.voice) {\n    const { duration, waveform } = attachment.voice;\n    const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n    return {\n      voice: {\n        id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n        duration,\n        waveform: inputWaveform,\n      },\n    };\n  }\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const { duration, performer, title } = attachment.audio || {};\n    return {\n      audio: {\n        id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n        mimeType,\n        fileName,\n        size,\n        duration: duration || 0,\n        title,\n        performer,\n      },\n    };\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const { className: type, offset, length } = entity;\n  return {\n    type,\n    offset,\n    length,\n    ...(entity instanceof GramJs.MessageEntityMentionName && { userId: buildApiPeerId(entity.userId, 'user') }),\n    ...('url' in entity && { url: entity.url }),\n    ...('language' in entity && { language: entity.language }),\n  };\n}\n\nfunction buildThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers,\n  } = messageReplies;\n  if (!channelId) {\n    return undefined;\n  }\n\n  const apiChannelId = buildApiPeerId(channelId, 'channel');\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const isPostThread = chatId !== apiChannelId;\n\n  return {\n    threadId: messageId,\n    ...(isPostThread ? {\n      chatId: apiChannelId,\n      originChannelId: chatId,\n    } : {\n      chatId,\n    }),\n    messagesCount: replies,\n    lastMessageId: maxId,\n    lastReadInboxMessageId: readMaxId,\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n}\n","export const getServerTime = (serverTimeOffset: number) => {\n  return Math.floor(Date.now() / 1000) + serverTimeOffset;\n};\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiChat,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiBotCommand,\n  ApiChatFolder,\n  ApiChatMember,\n  ApiRestrictionReason,\n  ApiExportedInvite,\n  ApiChatInviteImporter,\n  ApiChatSettings,\n} from '../../types';\nimport { pick, pickTruthy } from '../../../util/iteratees';\nimport {\n  buildApiPeerId, getApiChatIdFromMtpPeer, isPeerChat, isPeerUser,\n} from './peers';\nimport { omitVirtualClassFields } from './helpers';\nimport { getServerTime } from '../../../util/serverTime';\n\ntype PeerEntityApiChatFields = Omit<ApiChat, (\n  'id' | 'type' | 'title' |\n  'lastReadOutboxMessageId' | 'lastReadInboxMessageId' |\n  'unreadCount' | 'unreadMentionsCount' | 'isMuted'\n)>;\n\nfunction buildApiChatFieldsFromPeerEntity(\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n  isSupport = false,\n): PeerEntityApiChatFields {\n  const isMin = Boolean('min' in peerEntity && peerEntity.min);\n  const accessHash = ('accessHash' in peerEntity) && String(peerEntity.accessHash);\n  const hasVideoAvatar = 'photo' in peerEntity && peerEntity.photo && 'hasVideo' in peerEntity.photo\n    && peerEntity.photo.hasVideo;\n  const avatarHash = ('photo' in peerEntity) && peerEntity.photo && buildAvatarHash(peerEntity.photo);\n  const isSignaturesShown = Boolean('signatures' in peerEntity && peerEntity.signatures);\n  const hasPrivateLink = Boolean('hasLink' in peerEntity && peerEntity.hasLink);\n  const isScam = Boolean('scam' in peerEntity && peerEntity.scam);\n  const isFake = Boolean('fake' in peerEntity && peerEntity.fake);\n  const isJoinToSend = Boolean('joinToSend' in peerEntity && peerEntity.joinToSend);\n  const isJoinRequest = Boolean('joinRequest' in peerEntity && peerEntity.joinRequest);\n\n  return {\n    isMin,\n    hasPrivateLink,\n    isSignaturesShown,\n    ...(accessHash && { accessHash }),\n    hasVideoAvatar,\n    ...(avatarHash && { avatarHash }),\n    ...(\n      (peerEntity instanceof GramJs.Channel || peerEntity instanceof GramJs.User)\n      && { username: peerEntity.username }\n    ),\n    ...(('verified' in peerEntity) && { isVerified: peerEntity.verified }),\n    ...(('callActive' in peerEntity) && { isCallActive: peerEntity.callActive }),\n    ...(('callNotEmpty' in peerEntity) && { isCallNotEmpty: peerEntity.callNotEmpty }),\n    ...((peerEntity instanceof GramJs.Chat || peerEntity instanceof GramJs.Channel) && {\n      ...(peerEntity.participantsCount && { membersCount: peerEntity.participantsCount }),\n      joinDate: peerEntity.date,\n    }),\n    ...((peerEntity instanceof GramJs.Chat || peerEntity instanceof GramJs.Channel) && {\n      isProtected: Boolean('noforwards' in peerEntity && peerEntity.noforwards),\n    }),\n    ...(isSupport && { isSupport: true }),\n    ...buildApiChatPermissions(peerEntity),\n    ...(('creator' in peerEntity) && { isCreator: peerEntity.creator }),\n    ...buildApiChatRestrictions(peerEntity),\n    ...buildApiChatMigrationInfo(peerEntity),\n    fakeType: isScam ? 'scam' : (isFake ? 'fake' : undefined),\n    isJoinToSend,\n    isJoinRequest,\n  };\n}\n\nexport function buildApiChatFromDialog(\n  dialog: GramJs.Dialog,\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n  serverTimeOffset: number,\n): ApiChat {\n  const {\n    peer, folderId, unreadMark, unreadCount, unreadMentionsCount, unreadReactionsCount,\n    notifySettings: { silent, muteUntil },\n    readOutboxMaxId, readInboxMaxId, draft,\n  } = dialog;\n  const isMuted = silent || (typeof muteUntil === 'number' && getServerTime(serverTimeOffset) < muteUntil);\n\n  return {\n    id: getApiChatIdFromMtpPeer(peer),\n    ...(folderId && { folderId }),\n    type: getApiChatTypeFromPeerEntity(peerEntity),\n    title: getApiChatTitleFromMtpPeer(peer, peerEntity),\n    lastReadOutboxMessageId: readOutboxMaxId,\n    lastReadInboxMessageId: readInboxMaxId,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    isMuted,\n    ...(unreadMark && { hasUnreadMark: true }),\n    ...(draft instanceof GramJs.DraftMessage && { draftDate: draft.date }),\n    ...buildApiChatFieldsFromPeerEntity(peerEntity),\n  };\n}\n\nfunction buildApiChatPermissions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  adminRights?: ApiChatAdminRights;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n} {\n  if (!(peerEntity instanceof GramJs.Chat || peerEntity instanceof GramJs.Channel)) {\n    return {};\n  }\n\n  return {\n    adminRights: peerEntity.adminRights ? omitVirtualClassFields(peerEntity.adminRights) : undefined,\n    currentUserBannedRights: peerEntity instanceof GramJs.Channel && peerEntity.bannedRights\n      ? omitVirtualClassFields(peerEntity.bannedRights)\n      : undefined,\n    defaultBannedRights: peerEntity.defaultBannedRights\n      ? omitVirtualClassFields(peerEntity.defaultBannedRights)\n      : undefined,\n  };\n}\n\nfunction buildApiChatRestrictions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  isNotJoined?: boolean;\n  isForbidden?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n} {\n  if (peerEntity instanceof GramJs.ChatForbidden) {\n    return {\n      isForbidden: true,\n    };\n  }\n\n  if (peerEntity instanceof GramJs.ChannelForbidden) {\n    return {\n      isRestricted: true,\n    };\n  }\n\n  const restrictions = {};\n\n  if ('restricted' in peerEntity) {\n    const restrictionReason = peerEntity.restricted\n      ? buildApiChatRestrictionReason(peerEntity.restrictionReason)\n      : undefined;\n\n    if (restrictionReason) {\n      Object.assign(restrictions, {\n        isRestricted: true,\n        restrictionReason,\n      });\n    }\n  }\n\n  if (peerEntity instanceof GramJs.Chat) {\n    Object.assign(restrictions, {\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  if (peerEntity instanceof GramJs.Channel) {\n    Object.assign(restrictions, {\n      // `left` is weirdly set to `true` on all channels never joined before\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  return restrictions;\n}\n\nfunction buildApiChatMigrationInfo(peerEntity: GramJs.TypeChat): {\n  migratedTo?: {\n    chatId: string;\n    accessHash?: string;\n  };\n} {\n  if (\n    peerEntity instanceof GramJs.Chat\n    && peerEntity.migratedTo\n    && !(peerEntity.migratedTo instanceof GramJs.InputChannelEmpty)\n  ) {\n    return {\n      migratedTo: {\n        chatId: getApiChatIdFromMtpPeer(peerEntity.migratedTo),\n        ...(peerEntity.migratedTo instanceof GramJs.InputChannel && {\n          accessHash: String(peerEntity.migratedTo.accessHash),\n        }),\n      },\n    };\n  }\n\n  return {};\n}\n\nfunction buildApiChatRestrictionReason(\n  restrictionReasons?: GramJs.RestrictionReason[],\n): ApiRestrictionReason | undefined {\n  if (!restrictionReasons) {\n    return undefined;\n  }\n\n  const targetReason = restrictionReasons.find(({ platform }) => platform === 'all');\n  return targetReason ? pick(targetReason, ['reason', 'text']) : undefined;\n}\n\nexport function buildApiChatFromPreview(\n  preview: GramJs.TypeChat | GramJs.TypeUser,\n  isSupport = false,\n  withForbidden = false,\n): ApiChat | undefined {\n  if (!(\n    preview instanceof GramJs.Chat\n    || preview instanceof GramJs.Channel\n    || preview instanceof GramJs.User\n    || (\n      withForbidden\n      && (\n        preview instanceof GramJs.ChatForbidden\n        || preview instanceof GramJs.ChannelForbidden\n      )\n    )\n  )) {\n    return undefined;\n  }\n\n  return {\n    id: buildApiPeerId(preview.id, preview instanceof GramJs.User ? 'user' : 'chat'),\n    type: getApiChatTypeFromPeerEntity(preview),\n    title: preview instanceof GramJs.User ? getUserName(preview) : preview.title,\n    ...buildApiChatFieldsFromPeerEntity(preview, isSupport),\n  };\n}\n\nexport function getApiChatTypeFromPeerEntity(peerEntity: GramJs.TypeChat | GramJs.TypeUser) {\n  if (peerEntity instanceof GramJs.User || peerEntity instanceof GramJs.UserEmpty) {\n    return 'chatTypePrivate';\n  } else if (\n    peerEntity instanceof GramJs.Chat\n    || peerEntity instanceof GramJs.ChatForbidden\n    || peerEntity instanceof GramJs.ChatEmpty\n  ) {\n    return 'chatTypeBasicGroup';\n  } else {\n    return peerEntity.megagroup ? 'chatTypeSuperGroup' : 'chatTypeChannel';\n  }\n}\n\nexport function getPeerKey(peer: GramJs.TypePeer) {\n  if (isPeerUser(peer)) {\n    return `user${peer.userId}`;\n  } else if (isPeerChat(peer)) {\n    return `chat${peer.chatId}`;\n  } else {\n    return `chat${peer.channelId}`;\n  }\n}\n\nexport function getApiChatTitleFromMtpPeer(peer: GramJs.TypePeer, peerEntity: GramJs.User | GramJs.Chat) {\n  if (isPeerUser(peer)) {\n    return getUserName(peerEntity as GramJs.User);\n  } else {\n    return (peerEntity as GramJs.Chat).title;\n  }\n}\n\nfunction getUserName(user: GramJs.User) {\n  return user.firstName\n    ? `${user.firstName}${user.lastName ? ` ${user.lastName}` : ''}`\n    : (user.lastName || undefined);\n}\n\nexport function buildAvatarHash(photo: GramJs.TypeUserProfilePhoto | GramJs.TypeChatPhoto) {\n  if ('photoId' in photo) {\n    return String(photo.photoId);\n  }\n\n  return undefined;\n}\n\nexport function buildChatMember(\n  member: GramJs.TypeChatParticipant | GramJs.TypeChannelParticipant,\n): ApiChatMember | undefined {\n  const userId = (member instanceof GramJs.ChannelParticipantBanned || member instanceof GramJs.ChannelParticipantLeft)\n    ? getApiChatIdFromMtpPeer(member.peer)\n    : buildApiPeerId(member.userId, 'user');\n\n  return {\n    userId,\n    inviterId: 'inviterId' in member ? buildApiPeerId(member.inviterId as BigInt.BigInteger, 'user') : undefined,\n    joinedDate: 'date' in member ? member.date : undefined,\n    kickedByUserId: 'kickedBy' in member ? buildApiPeerId(member.kickedBy, 'user') : undefined,\n    promotedByUserId: 'promotedBy' in member ? buildApiPeerId(member.promotedBy, 'user') : undefined,\n    bannedRights: 'bannedRights' in member ? omitVirtualClassFields(member.bannedRights) : undefined,\n    adminRights: 'adminRights' in member ? omitVirtualClassFields(member.adminRights) : undefined,\n    customTitle: 'rank' in member ? member.rank : undefined,\n    ...((member instanceof GramJs.ChannelParticipantAdmin || member instanceof GramJs.ChatParticipantAdmin) && {\n      isAdmin: true,\n    }),\n    ...((member instanceof GramJs.ChannelParticipantCreator || member instanceof GramJs.ChatParticipantCreator) && {\n      isOwner: true,\n    }),\n  };\n}\n\nexport function buildChatMembers(\n  participants: GramJs.TypeChatParticipants | GramJs.channels.ChannelParticipants,\n) {\n  // Duplicate code because of TS union-type shenanigans\n  if (participants instanceof GramJs.ChatParticipants) {\n    return participants.participants.map(buildChatMember).filter<ApiChatMember>(Boolean as any);\n  }\n  if (participants instanceof GramJs.channels.ChannelParticipants) {\n    return participants.participants.map(buildChatMember).filter<ApiChatMember>(Boolean as any);\n  }\n\n  return undefined;\n}\n\nexport function buildChatTypingStatus(\n  update: GramJs.UpdateUserTyping | GramJs.UpdateChatUserTyping | GramJs.UpdateChannelUserTyping,\n  serverTimeOffset: number,\n) {\n  let action: string = '';\n  let emoticon: string | undefined;\n  if (update.action instanceof GramJs.SendMessageCancelAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageTypingAction) {\n    action = 'lng_user_typing';\n  } else if (update.action instanceof GramJs.SendMessageRecordVideoAction) {\n    action = 'lng_send_action_record_video';\n  } else if (update.action instanceof GramJs.SendMessageUploadVideoAction) {\n    action = 'lng_send_action_upload_video';\n  } else if (update.action instanceof GramJs.SendMessageRecordAudioAction) {\n    action = 'lng_send_action_record_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadAudioAction) {\n    action = 'lng_send_action_upload_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadPhotoAction) {\n    action = 'lng_send_action_upload_photo';\n  } else if (update.action instanceof GramJs.SendMessageUploadDocumentAction) {\n    action = 'lng_send_action_upload_file';\n  } else if (update.action instanceof GramJs.SendMessageGeoLocationAction) {\n    action = 'selecting a location to share';\n  } else if (update.action instanceof GramJs.SendMessageChooseContactAction) {\n    action = 'selecting a contact to share';\n  } else if (update.action instanceof GramJs.SendMessageGamePlayAction) {\n    action = 'lng_playing_game';\n  } else if (update.action instanceof GramJs.SendMessageRecordRoundAction) {\n    action = 'lng_send_action_record_round';\n  } else if (update.action instanceof GramJs.SendMessageUploadRoundAction) {\n    action = 'lng_send_action_upload_round';\n  } else if (update.action instanceof GramJs.SendMessageChooseStickerAction) {\n    action = 'lng_send_action_choose_sticker';\n  } else if (update.action instanceof GramJs.SpeakingInGroupCallAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteractionSeen) {\n    action = 'lng_user_action_watching_animations';\n    emoticon = update.action.emoticon;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n    return undefined;\n  }\n\n  return {\n    action,\n    ...(emoticon && { emoji: emoticon }),\n    ...(!(update instanceof GramJs.UpdateUserTyping) && { userId: getApiChatIdFromMtpPeer(update.fromId) }),\n    timestamp: Date.now() + serverTimeOffset * 1000,\n  };\n}\n\nexport function buildApiChatFolder(filter: GramJs.DialogFilter): ApiChatFolder {\n  return {\n    ...pickTruthy(filter, [\n      'id', 'title', 'emoticon', 'contacts', 'nonContacts', 'groups', 'bots',\n      'excludeMuted', 'excludeRead', 'excludeArchived',\n    ]),\n    channels: filter.broadcasts,\n    pinnedChatIds: filter.pinnedPeers.map(getApiChatIdFromMtpPeer).filter<string>(Boolean as any),\n    includedChatIds: filter.includePeers.map(getApiChatIdFromMtpPeer).filter<string>(Boolean as any),\n    excludedChatIds: filter.excludePeers.map(getApiChatIdFromMtpPeer).filter<string>(Boolean as any),\n  };\n}\n\nexport function buildApiChatFolderFromSuggested({\n  filter, description,\n}: {\n  filter: GramJs.TypeDialogFilter;\n  description: string;\n}): ApiChatFolder | undefined {\n  if (!(filter instanceof GramJs.DialogFilter)) return undefined;\n  return {\n    ...buildApiChatFolder(filter),\n    description,\n  };\n}\n\nexport function buildApiChatBotCommands(botInfos: GramJs.BotInfo[]) {\n  return botInfos.reduce((botCommands, botInfo) => {\n    const botId = buildApiPeerId(botInfo.userId!, 'user');\n\n    if (botInfo.commands) {\n      botCommands = botCommands.concat(botInfo.commands.map((mtpCommand) => ({\n        botId,\n        ...omitVirtualClassFields(mtpCommand),\n      })));\n    }\n\n    return botCommands;\n  }, [] as ApiBotCommand[]);\n}\n\nexport function buildApiExportedInvite(invite: GramJs.ChatInviteExported): ApiExportedInvite {\n  const {\n    revoked,\n    date,\n    expireDate,\n    link,\n    permanent,\n    startDate,\n    usage,\n    usageLimit,\n    requested,\n    requestNeeded,\n    title,\n    adminId,\n  } = invite;\n  return {\n    isRevoked: revoked,\n    date,\n    expireDate,\n    link,\n    isPermanent: permanent,\n    startDate,\n    usage,\n    usageLimit,\n    isRequestNeeded: requestNeeded,\n    requested,\n    title,\n    adminId: buildApiPeerId(adminId, 'user'),\n  };\n}\n\nexport function buildChatInviteImporter(importer: GramJs.ChatInviteImporter): ApiChatInviteImporter {\n  const {\n    userId,\n    date,\n    about,\n    requested,\n  } = importer;\n  return {\n    userId: buildApiPeerId(userId, 'user'),\n    date,\n    about,\n    isRequested: requested,\n  };\n}\n\nexport function buildApiChatSettings({\n  autoarchived,\n  reportSpam,\n  addContact,\n  blockContact,\n}: GramJs.PeerSettings): ApiChatSettings {\n  return {\n    isAutoArchived: Boolean(autoarchived),\n    canReportSpam: Boolean(reportSpam),\n    canAddContact: Boolean(addContact),\n    canBlockContact: Boolean(blockContact),\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiAttachMenuBot,\n  ApiAttachMenuBotIcon,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInfo,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotInlineSwitchPm,\n  ApiBotMenuButton,\n  ApiInlineResultType,\n} from '../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { buildApiPhoto, buildApiThumbnailFromStripped } from './common';\nimport { buildApiDocument, buildApiWebDocument, buildVideoFromDocument } from './messages';\nimport { buildStickerFromDocument } from './symbols';\nimport localDb from '../localDb';\nimport { buildApiPeerId } from './peers';\nimport { omitVirtualClassFields } from './helpers';\n\nexport function buildApiBotInlineResult(result: GramJs.BotInlineResult, queryId: string): ApiBotInlineResult {\n  const {\n    id, type, title, description, url, thumb,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    url,\n    webThumbnail: buildApiWebDocument(thumb),\n  };\n}\n\nexport function buildApiBotInlineMediaResult(\n  result: GramJs.BotInlineMediaResult, queryId: string,\n): ApiBotInlineMediaResult {\n  const {\n    id, type, title, description, photo, document,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    ...(type === 'sticker' && document instanceof GramJs.Document && { sticker: buildStickerFromDocument(document) }),\n    ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n    ...(type === 'gif' && document instanceof GramJs.Document && { gif: buildVideoFromDocument(document) }),\n    ...(type === 'video' && document instanceof GramJs.Document && {\n      thumbnail: buildApiThumbnailFromStripped(document.thumbs),\n    }),\n  };\n}\n\nexport function buildBotSwitchPm(switchPm?: GramJs.InlineBotSwitchPM) {\n  return switchPm ? pick(switchPm, ['text', 'startParam']) as ApiBotInlineSwitchPm : undefined;\n}\n\nexport function buildApiAttachMenuBot(bot: GramJs.AttachMenuBot): ApiAttachMenuBot {\n  return {\n    id: bot.botId.toString(),\n    hasSettings: bot.hasSettings,\n    shortName: bot.shortName,\n    peerTypes: bot.peerTypes.map(buildApiAttachMenuPeerType),\n    icons: bot.icons.map(buildApiAttachMenuIcon).filter(Boolean),\n  };\n}\n\nfunction buildApiAttachMenuPeerType(peerType: GramJs.TypeAttachMenuPeerType): ApiAttachMenuPeerType {\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBotPM) return 'bot';\n  if (peerType instanceof GramJs.AttachMenuPeerTypePM) return 'private';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeChat) return 'chat';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBroadcast) return 'channel';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeSameBotPM) return 'self';\n  return undefined!; // Never reached\n}\n\nfunction buildApiAttachMenuIcon(icon: GramJs.AttachMenuBotIcon): ApiAttachMenuBotIcon | undefined {\n  if (!(icon.icon instanceof GramJs.Document)) return undefined;\n\n  const document = buildApiDocument(icon.icon);\n\n  if (!document) return undefined;\n\n  localDb.documents[String(icon.icon.id)] = icon.icon;\n\n  return {\n    name: icon.name,\n    document,\n  };\n}\n\nexport function buildApiBotInfo(botInfo: GramJs.BotInfo, chatId: string): ApiBotInfo {\n  const {\n    description, descriptionPhoto, descriptionDocument, userId, commands, menuButton,\n  } = botInfo;\n\n  const botId = userId && buildApiPeerId(userId, 'user');\n  const photo = descriptionPhoto instanceof GramJs.Photo ? buildApiPhoto(descriptionPhoto) : undefined;\n  const gif = descriptionDocument instanceof GramJs.Document ? buildVideoFromDocument(descriptionDocument) : undefined;\n\n  const commandsArray = commands?.map((command) => buildApiBotCommand(botId || chatId, command));\n\n  return {\n    botId: botId || chatId,\n    description,\n    gif,\n    photo,\n    menuButton: buildApiBotMenuButton(menuButton),\n    commands: commandsArray?.length ? commandsArray : undefined,\n  };\n}\n\nfunction buildApiBotCommand(botId: string, command: GramJs.BotCommand): ApiBotCommand {\n  return {\n    botId,\n    ...omitVirtualClassFields(command),\n  };\n}\n\nexport function buildApiBotMenuButton(menuButton?: GramJs.TypeBotMenuButton): ApiBotMenuButton {\n  if (menuButton instanceof GramJs.BotMenuButton) {\n    return {\n      type: 'webApp',\n      text: menuButton.text,\n      url: menuButton.url,\n    };\n  }\n\n  return {\n    type: 'commands',\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiUser, ApiUserStatus, ApiUserType,\n} from '../../types';\nimport { buildApiPeerId } from './peers';\nimport { buildApiBotInfo } from './bots';\nimport { buildApiPhoto } from './common';\n\nexport function buildApiUserFromFull(mtpUserFull: GramJs.users.UserFull): ApiUser {\n  const {\n    fullUser: {\n      about, commonChatsCount, pinnedMsgId, botInfo, blocked,\n      profilePhoto,\n    },\n    users,\n  } = mtpUserFull;\n\n  const user = buildApiUser(users[0])!;\n\n  return {\n    ...user,\n    fullInfo: {\n      ...(profilePhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(profilePhoto) }),\n      bio: about,\n      commonChatsCount,\n      pinnedMessageId: pinnedMsgId,\n      isBlocked: Boolean(blocked),\n      ...(botInfo && { botInfo: buildApiBotInfo(botInfo, user.id) }),\n    },\n  };\n}\n\nexport function buildApiUser(mtpUser: GramJs.TypeUser): ApiUser | undefined {\n  if (!(mtpUser instanceof GramJs.User)) {\n    return undefined;\n  }\n\n  const {\n    id, firstName, lastName, fake, scam,\n  } = mtpUser;\n  const hasVideoAvatar = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? Boolean(mtpUser.photo.hasVideo)\n    : undefined;\n  const avatarHash = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? String(mtpUser.photo.photoId)\n    : undefined;\n  const userType = buildApiUserType(mtpUser);\n\n  return {\n    id: buildApiPeerId(id, 'user'),\n    isMin: Boolean(mtpUser.min),\n    fakeType: scam ? 'scam' : (fake ? 'fake' : undefined),\n    ...(mtpUser.self && { isSelf: true }),\n    isPremium: Boolean(mtpUser.premium),\n    ...(mtpUser.verified && { isVerified: true }),\n    ...((mtpUser.contact || mtpUser.mutualContact) && { isContact: true }),\n    type: userType,\n    ...(firstName && { firstName }),\n    ...(userType === 'userTypeBot' && { canBeInvitedToGroup: !mtpUser.botNochats }),\n    ...(lastName && { lastName }),\n    username: mtpUser.username || '',\n    phoneNumber: mtpUser.phone || '',\n    noStatus: !mtpUser.status,\n    ...(mtpUser.accessHash && { accessHash: String(mtpUser.accessHash) }),\n    ...(avatarHash && { avatarHash }),\n    hasVideoAvatar,\n    ...(mtpUser.bot && mtpUser.botInlinePlaceholder && { botPlaceholder: mtpUser.botInlinePlaceholder }),\n    ...(mtpUser.bot && mtpUser.botAttachMenu && { isAttachMenuBot: mtpUser.botAttachMenu }),\n  };\n}\n\nfunction buildApiUserType(user: GramJs.User): ApiUserType {\n  if (user.bot) {\n    return 'userTypeBot';\n  }\n  if (user.deleted) {\n    return 'userTypeDeleted';\n  }\n\n  return 'userTypeRegular';\n}\n\nexport function buildApiUserStatus(mtpStatus?: GramJs.TypeUserStatus): ApiUserStatus {\n  if (!mtpStatus || mtpStatus instanceof GramJs.UserStatusEmpty) {\n    return { type: 'userStatusEmpty' };\n  } else if (mtpStatus instanceof GramJs.UserStatusOnline) {\n    return { type: 'userStatusOnline', expires: mtpStatus.expires };\n  } else if (mtpStatus instanceof GramJs.UserStatusOffline) {\n    return { type: 'userStatusOffline', wasOnline: mtpStatus.wasOnline };\n  } else if (mtpStatus instanceof GramJs.UserStatusRecently) {\n    return { type: 'userStatusRecently' };\n  } else if (mtpStatus instanceof GramJs.UserStatusLastWeek) {\n    return { type: 'userStatusLastWeek' };\n  } else {\n    return { type: 'userStatusLastMonth' };\n  }\n}\n\nexport function buildApiUsersAndStatuses(mtpUsers: GramJs.TypeUser[]) {\n  const userStatusesById: Record<string, ApiUserStatus> = {};\n  const users: ApiUser[] = [];\n\n  mtpUsers.forEach((mtpUser) => {\n    const user = buildApiUser(mtpUser);\n    if (!user) {\n      return;\n    }\n\n    users.push(user);\n\n    if ('status' in mtpUser) {\n      userStatusesById[user.id] = buildApiUserStatus(mtpUser.status);\n    }\n  });\n\n  return { users, userStatusesById };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiCountry, ApiSession, ApiUrlAuthResult, ApiWallpaper, ApiWebSession,\n} from '../../types';\nimport type { ApiPrivacySettings, ApiPrivacyKey, PrivacyVisibility } from '../../../types';\n\nimport { buildApiDocument } from './messages';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { pick } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { buildApiUser } from './users';\nimport { addUserToLocalDb } from '../helpers';\n\nexport function buildApiWallpaper(wallpaper: GramJs.TypeWallPaper): ApiWallpaper | undefined {\n  if (wallpaper instanceof GramJs.WallPaperNoFile) {\n    // TODO: Plain color wallpapers\n    return undefined;\n  }\n\n  const { slug } = wallpaper;\n\n  const document = buildApiDocument(wallpaper.document);\n\n  if (!document) {\n    return undefined;\n  }\n\n  return {\n    slug,\n    document,\n  };\n}\n\nexport function buildApiSession(session: GramJs.Authorization): ApiSession {\n  return {\n    isCurrent: Boolean(session.current),\n    isOfficialApp: Boolean(session.officialApp),\n    isPasswordPending: Boolean(session.passwordPending),\n    hash: String(session.hash),\n    areCallsEnabled: !session.callRequestsDisabled,\n    areSecretChatsEnabled: !session.encryptedRequestsDisabled,\n    ...pick(session, [\n      'deviceModel', 'platform', 'systemVersion', 'appName', 'appVersion', 'dateCreated', 'dateActive',\n      'ip', 'country', 'region',\n    ]),\n  };\n}\n\nexport function buildApiWebSession(session: GramJs.WebAuthorization): ApiWebSession {\n  return {\n    hash: String(session.hash),\n    botId: buildApiPeerId(session.botId, 'user'),\n    ...pick(session, [\n      'platform', 'browser', 'dateCreated', 'dateActive', 'ip', 'region', 'domain',\n    ]),\n  };\n}\n\nexport function buildPrivacyKey(key: GramJs.TypePrivacyKey): ApiPrivacyKey | undefined {\n  switch (key.className) {\n    case 'PrivacyKeyPhoneNumber':\n      return 'phoneNumber';\n    case 'PrivacyKeyStatusTimestamp':\n      return 'lastSeen';\n    case 'PrivacyKeyProfilePhoto':\n      return 'profilePhoto';\n    case 'PrivacyKeyPhoneCall':\n      return 'phoneCall';\n    case 'PrivacyKeyPhoneP2P':\n      return 'phoneP2P';\n    case 'PrivacyKeyForwards':\n      return 'forwards';\n    case 'PrivacyKeyChatInvite':\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n\nexport function buildPrivacyRules(rules: GramJs.TypePrivacyRule[]): ApiPrivacySettings {\n  let visibility: PrivacyVisibility | undefined;\n  let allowUserIds: string[] | undefined;\n  let allowChatIds: string[] | undefined;\n  let blockUserIds: string[] | undefined;\n  let blockChatIds: string[] | undefined;\n\n  rules.forEach((rule) => {\n    if (rule instanceof GramJs.PrivacyValueAllowAll) {\n      visibility = visibility || 'everybody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowContacts) {\n      visibility = visibility || 'contacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowContacts) {\n      visibility = visibility || 'nonContacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowAll) {\n      visibility = visibility || 'nobody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowUsers) {\n      allowUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowUsers) {\n      blockUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueAllowChatParticipants) {\n      allowChatIds = rule.chats.map((chatId) => buildApiPeerId(chatId, 'chat'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowChatParticipants) {\n      blockChatIds = rule.chats.map((chatId) => buildApiPeerId(chatId, 'chat'));\n    }\n  });\n\n  if (!visibility) {\n    // disallow by default.\n    visibility = 'nobody';\n  }\n\n  return {\n    visibility,\n    allowUserIds: allowUserIds || [],\n    allowChatIds: allowChatIds || [],\n    blockUserIds: blockUserIds || [],\n    blockChatIds: blockChatIds || [],\n  };\n}\n\nexport function buildApiNotifyException(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer, serverTimeOffset: number,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime(serverTimeOffset) < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n  };\n}\n\nfunction buildApiCountry(country: GramJs.help.Country, code: GramJs.help.CountryCode) {\n  const {\n    hidden, iso2, defaultName, name,\n  } = country;\n  const { countryCode, prefixes, patterns } = code || {};\n\n  return {\n    isHidden: hidden,\n    iso2,\n    defaultName,\n    name,\n    countryCode,\n    prefixes,\n    patterns,\n  };\n}\n\nexport function buildApiCountryList(countries: GramJs.help.Country[]) {\n  const nonHiddenCountries = countries.filter(({ hidden }) => !hidden);\n  const listByCode = nonHiddenCountries\n    .map((country) => (\n      country.countryCodes.map((code) => buildApiCountry(country, code))\n    ))\n    .flat()\n    .sort((a: ApiCountry, b: ApiCountry) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  const generalList = nonHiddenCountries\n    .map((country) => buildApiCountry(country, country.countryCodes[0]))\n    .sort((a, b) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  return {\n    phoneCodes: listByCode,\n    general: generalList,\n  };\n}\n\nexport function buildJson(json: GramJs.TypeJSONValue): any {\n  if (json instanceof GramJs.JsonNull) return undefined;\n  if (json instanceof GramJs.JsonString\n    || json instanceof GramJs.JsonBool\n    || json instanceof GramJs.JsonNumber) return json.value;\n  if (json instanceof GramJs.JsonArray) return json.value.map(buildJson);\n\n  return json.value.reduce((acc: Record<string, any>, el) => {\n    acc[el.key] = buildJson(el.value);\n    return acc;\n  }, {});\n}\n\nexport function buildApiUrlAuthResult(result: GramJs.TypeUrlAuthResult): ApiUrlAuthResult | undefined {\n  if (result instanceof GramJs.UrlAuthResultRequest) {\n    const { bot, domain, requestWriteAccess } = result;\n    const user = buildApiUser(bot);\n    if (!user) return undefined;\n\n    addUserToLocalDb(bot);\n\n    return {\n      type: 'request',\n      domain,\n      shouldRequestWriteAccess: requestWriteAccess,\n      bot: user,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultAccepted) {\n    return {\n      type: 'accepted',\n      url: result.url,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultDefault) {\n    return {\n      type: 'default',\n    };\n  }\n  return undefined;\n}\n","import type { GroupCallConnectionData } from '../../lib/secret-sauce';\nimport { Api as GramJs, connection } from '../../lib/gramjs';\nimport type { ApiMessage, ApiUpdateConnectionStateType, OnApiUpdate } from '../types';\n\nimport { pick } from '../../util/iteratees';\nimport {\n  buildApiMessage,\n  buildApiMessageFromShort,\n  buildApiMessageFromShortChat,\n  buildMessageMediaContent,\n  buildMessageTextContent,\n  buildPoll,\n  buildPollResults,\n  buildApiMessageFromNotification,\n  buildMessageDraft,\n  buildMessageReactions, buildApiMessageWithChatId,\n} from './apiBuilders/messages';\nimport {\n  buildChatMember,\n  buildChatMembers,\n  buildChatTypingStatus,\n  buildAvatarHash,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatSettings,\n} from './apiBuilders/chats';\nimport { buildApiUser, buildApiUserStatus } from './apiBuilders/users';\nimport {\n  buildMessageFromUpdate,\n  isMessageWithMedia,\n  buildChatPhotoForLocalDb,\n} from './gramjsBuilders';\nimport localDb from './localDb';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport { DEBUG } from '../../config';\nimport {\n  addMessageToLocalDb,\n  addEntitiesWithPhotosToLocalDb,\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from './helpers';\nimport { buildApiNotifyException, buildPrivacyKey, buildPrivacyRules } from './apiBuilders/misc';\nimport { buildApiPhoto } from './apiBuilders/common';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant,\n  buildPhoneCall,\n  getGroupCallId,\n} from './apiBuilders/calls';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\nimport { buildApiEmojiInteraction, buildStickerSet } from './apiBuilders/symbols';\nimport { buildApiBotMenuButton } from './apiBuilders/bots';\nimport {ApiUpdate} from \"../types\";\n\ntype Update = (\n  (GramJs.TypeUpdate | GramJs.TypeUpdates) & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] }\n) | typeof connection.UpdateConnectionState;\n\nconst DELETE_MISSING_CHANNEL_MESSAGE_DELAY = 1000;\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nconst sentMessageIds = new Set();\nlet serverTimeOffset = 0;\n// Workaround for a situation when an incorrect update comes with an undefined property `adminRights`\nlet shouldIgnoreNextChannelUpdate = false;\nconst IGNORE_NEXT_CHANNEL_UPDATE_TIMEOUT = 2000;\n\nfunction dispatchUserAndChatUpdates(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities\n    .filter((e) => e instanceof GramJs.User)\n    .map(buildApiUser)\n    .forEach((user) => {\n      if (!user) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateUser',\n        id: user.id,\n        user,\n      });\n    });\n\n  entities\n    .filter((e) => e instanceof GramJs.Chat || e instanceof GramJs.Channel)\n    .map((e) => buildApiChatFromPreview(e))\n    .forEach((chat) => {\n      if (!chat) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    });\n}\n\nexport function updater(update: Update, originRequest?: GramJs.AnyRequest) {\n  if (update instanceof connection.UpdateServerTimeOffset) {\n    serverTimeOffset = update.timeOffset;\n  } else if (update instanceof connection.UpdateConnectionState) {\n    let connectionState: ApiUpdateConnectionStateType;\n\n    switch (update.state) {\n      case connection.UpdateConnectionState.disconnected:\n        connectionState = 'connectionStateConnecting';\n        break;\n      case connection.UpdateConnectionState.broken:\n        connectionState = 'connectionStateBroken';\n        break;\n      case connection.UpdateConnectionState.connected:\n      default:\n        connectionState = 'connectionStateReady';\n        break;\n    }\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState,\n    });\n\n    // Messages\n  } else if (\n    update instanceof GramJs.UpdateNewMessage\n    || update instanceof GramJs.UpdateNewScheduledMessage\n    || update instanceof GramJs.UpdateNewChannelMessage\n    || update instanceof GramJs.UpdateShortChatMessage\n    || update instanceof GramJs.UpdateShortMessage\n  ) {\n    let message: ApiMessage | undefined;\n    let shouldForceReply: boolean | undefined;\n\n    if (update instanceof GramJs.UpdateShortChatMessage) {\n      message = buildApiMessageFromShortChat(update);\n    } else if (update instanceof GramJs.UpdateShortMessage) {\n      message = buildApiMessageFromShort(update);\n    } else {\n      // TODO Remove if proven not reproducing\n      if (update.message instanceof GramJs.MessageEmpty) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Unexpected update:', update.className, update);\n        }\n\n        return;\n      }\n\n      if (update.message instanceof GramJs.Message && isMessageWithMedia(update.message)) {\n        addMessageToLocalDb(update.message);\n      }\n\n      message = buildApiMessage(update.message)!;\n      shouldForceReply = 'replyMarkup' in update.message\n        && update.message?.replyMarkup instanceof GramJs.ReplyKeyboardForceReply\n        && (!update.message.replyMarkup.selective || message.isMentioned);\n    }\n\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    if (update instanceof GramJs.UpdateNewScheduledMessage) {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateScheduledMessage' : 'newScheduledMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n      });\n    } else {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateMessage' : 'newMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        shouldForceReply,\n      });\n    }\n\n    // Some updates to a Chat/Channel don't have a dedicated update class.\n    // We can get info on some updates from Service Messages.\n    if (update.message instanceof GramJs.MessageService) {\n      const { action } = update.message;\n\n      if (action instanceof GramJs.MessageActionPaymentSent) {\n        onUpdate({\n          '@type': 'updatePaymentStateCompleted',\n          slug: action.invoiceSlug,\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: {\n            title: action.title,\n          },\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n        const photo = buildChatPhotoForLocalDb(action.photo);\n        const avatarHash = buildAvatarHash(photo);\n\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = photo;\n        }\n        addPhotoToLocalDb(action.photo);\n\n        if (avatarHash) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              avatarHash,\n            },\n            ...(action.photo instanceof GramJs.Photo && { newProfilePhoto: buildApiPhoto(action.photo) }),\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = new GramJs.ChatPhotoEmpty();\n        }\n\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: { avatarHash: undefined },\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && e.id === action.userId\n        ))) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              isForbidden: true,\n              isNotJoined: true,\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatAddUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && action.users.includes(e.id)\n        ))) {\n          onUpdate({\n            '@type': 'updateChatJoin',\n            id: message.chatId,\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionGroupCall) {\n        if (!action.duration && action.call) {\n          onUpdate({\n            '@type': 'updateGroupCallChatId',\n            chatId: message.chatId,\n            call: {\n              id: action.call.id.toString(),\n              accessHash: action.call.accessHash.toString(),\n            },\n          });\n        }\n      }\n    }\n  } else if (\n    update instanceof GramJs.UpdateEditMessage\n    || update instanceof GramJs.UpdateEditChannelMessage\n  ) {\n    // TODO Remove if proven not reproducing\n    if (update.message instanceof GramJs.MessageEmpty) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected update:', update.className, update);\n      }\n\n      return;\n    }\n\n    if (update.message instanceof GramJs.Message && isMessageWithMedia(update.message)) {\n      addMessageToLocalDb(update.message);\n    }\n\n    const message = buildApiMessage(update.message)!;\n\n    onUpdate({\n      '@type': 'updateMessage',\n      id: message.id,\n      chatId: message.chatId,\n      message,\n    });\n  } else if (update instanceof GramJs.UpdateMessageReactions) {\n    onUpdate({\n      '@type': 'updateMessageReactions',\n      id: update.msgId,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      reactions: buildMessageReactions(update.reactions),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteMessages) {\n    onUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteScheduledMessages) {\n    onUpdate({\n      '@type': 'deleteScheduledMessages',\n      ids: update.messages,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteChannelMessages) {\n    const chatId = buildApiPeerId(update.channelId, 'channel');\n    const ids = update.messages;\n    const existingIds = ids.filter((id) => localDb.messages[`${chatId}-${id}`]);\n    const missingIds = ids.filter((id) => !localDb.messages[`${chatId}-${id}`]);\n    const profilePhotoIds = ids.map((id) => {\n      const message = localDb.messages[`${chatId}-${id}`];\n\n      return message && message instanceof GramJs.MessageService && 'photo' in message.action\n        ? String(message.action.photo.id)\n        : undefined;\n    }).filter<string>(Boolean as any);\n\n    if (existingIds.length) {\n      onUpdate({\n        '@type': 'deleteMessages',\n        ids: existingIds,\n        chatId,\n      });\n    }\n\n    if (profilePhotoIds.length) {\n      onUpdate({\n        '@type': 'deleteProfilePhotos',\n        ids: profilePhotoIds,\n        chatId,\n      });\n    }\n\n    // For some reason delete message update sometimes comes before new message update\n    if (missingIds.length) {\n      setTimeout(() => {\n        onUpdate({\n          '@type': 'deleteMessages',\n          ids: missingIds,\n          chatId,\n        });\n      }, DELETE_MISSING_CHANNEL_MESSAGE_DELAY);\n    }\n  } else if (update instanceof GramJs.UpdateServiceNotification) {\n    if (update.popup) {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message: update.message,\n        },\n      });\n    } else {\n      const currentDate = Date.now() / 1000 + serverTimeOffset;\n      const message = buildApiMessageFromNotification(update, currentDate);\n\n      if (isMessageWithMedia(update)) {\n        addMessageToLocalDb(buildMessageFromUpdate(message.id, message.chatId, update));\n      }\n\n      onUpdate({\n        '@type': 'updateServiceNotification',\n        message,\n      });\n    }\n  } else if ((\n    originRequest instanceof GramJs.messages.SendMessage\n    || originRequest instanceof GramJs.messages.SendMedia\n    || originRequest instanceof GramJs.messages.SendMultiMedia\n    || originRequest instanceof GramJs.messages.ForwardMessages\n  ) && (\n    update instanceof GramJs.UpdateMessageID || update instanceof GramJs.UpdateShortSentMessage\n  )) {\n    let randomId;\n    if ('randomId' in update) {\n      randomId = update.randomId;\n    } else if ('randomId' in originRequest) {\n      randomId = originRequest.randomId;\n    }\n\n    const localMessage = randomId && localDb.localMessages[String(randomId)];\n    if (!localMessage) {\n      throw new Error('Local message not found');\n    }\n\n    let newContent: ApiMessage['content'] | undefined;\n    if (update instanceof GramJs.UpdateShortSentMessage) {\n      if (localMessage.content.text && update.entities) {\n        newContent = {\n          text: buildMessageTextContent(localMessage.content.text.text, update.entities),\n        };\n      }\n      if (update.media) {\n        newContent = {\n          ...newContent,\n          ...buildMessageMediaContent(update.media),\n        };\n      }\n\n      const mtpMessage = buildMessageFromUpdate(update.id, localMessage.chatId, update);\n      if (isMessageWithMedia(mtpMessage)) {\n        addMessageToLocalDb(mtpMessage);\n      }\n    }\n\n    sentMessageIds.add(update.id);\n\n    // Edge case for \"Send When Online\"\n    const isAlreadySent = 'date' in update && update.date * 1000 < Date.now() + serverTimeOffset * 1000;\n\n    onUpdate({\n      '@type': localMessage.isScheduled && !isAlreadySent\n        ? 'updateScheduledMessageSendSucceeded'\n        : 'updateMessageSendSucceeded',\n      chatId: localMessage.chatId,\n      localId: localMessage.id,\n      message: {\n        ...localMessage,\n        ...(newContent && {\n          content: {\n            ...localMessage.content,\n            ...newContent,\n          },\n        }),\n        id: update.id,\n        sendingState: undefined,\n        ...('date' in update && { date: update.date }),\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateCommonBoxMessages',\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChannelReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateChannelMessages',\n      channelId: buildApiPeerId(update.channelId, 'channel'),\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateMessagePoll) {\n    const { pollId, poll, results } = update;\n    if (poll) {\n      const apiPoll = buildPoll(poll, results);\n\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: apiPoll,\n      });\n    } else {\n      const pollResults = buildPollResults(results);\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: { results: pollResults },\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessagePollVote) {\n    onUpdate({\n      '@type': 'updateMessagePollVote',\n      pollId: String(update.pollId),\n      userId: buildApiPeerId(update.userId, 'user'),\n      options: update.options.map(serializeBytes),\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageViews) {\n    onUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { views: update.views },\n    });\n\n    // Chats\n  } else if (update instanceof GramJs.UpdateReadHistoryInbox) {\n    onUpdate({\n      '@type': 'updateChatInbox',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadHistoryOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelInbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (\n    update instanceof GramJs.UpdateDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    onUpdate({\n      '@type': 'updatePinnedChatIds',\n      ids,\n      folderId: update.folderId || undefined,\n    });\n  } else if (update instanceof GramJs.UpdateFolderPeers) {\n    update.folderPeers.forEach((folderPeer) => {\n      const { folderId, peer } = folderPeer;\n\n      onUpdate({\n        '@type': 'updateChatListType',\n        id: getApiChatIdFromMtpPeer(peer),\n        folderId,\n      });\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilter) {\n    const { id, filter } = update;\n    const folder = filter instanceof GramJs.DialogFilter ? buildApiChatFolder(filter) : undefined;\n\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder,\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilterOrder) {\n    onUpdate({\n      '@type': 'updateChatFoldersOrder',\n      orderedIds: update.order,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipants) {\n    const replacedMembers = buildChatMembers(update.participants);\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.participants.chatId, 'chat'),\n      replacedMembers,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantAdd) {\n    const addedMember = buildChatMember(\n      pick(update, ['userId', 'inviterId', 'date']) as GramJs.ChatParticipant,\n    );\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      addedMember,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantDelete) {\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      deletedMemberId: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (\n    update instanceof GramJs.UpdatePinnedMessages\n    || update instanceof GramJs.UpdatePinnedChannelMessages\n  ) {\n    const chatId = update instanceof GramJs.UpdatePinnedMessages\n      ? getApiChatIdFromMtpPeer(update.peer)\n      : buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updatePinnedIds',\n      chatId,\n      messageIds: update.messages,\n      isPinned: update.pinned,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyPeer\n  ) {\n    onUpdate({\n      '@type': 'updateNotifyExceptions',\n      ...buildApiNotifyException(update.notifySettings, update.peer.peer, serverTimeOffset),\n    });\n  } else if (\n    update instanceof GramJs.UpdateUserTyping\n    || update instanceof GramJs.UpdateChatUserTyping\n  ) {\n    const id = update instanceof GramJs.UpdateUserTyping\n      ? buildApiPeerId(update.userId, 'user')\n      : buildApiPeerId(update.chatId, 'chat');\n\n    if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n      onUpdate({\n        '@type': 'updateStartEmojiInteraction',\n        id,\n        emoji: update.action.emoticon,\n        messageId: update.action.msgId,\n        interaction: buildApiEmojiInteraction(JSON.parse(update.action.interaction.data)),\n      });\n    } else {\n      onUpdate({\n        '@type': 'updateChatTypingStatus',\n        id,\n        typingStatus: buildChatTypingStatus(update, serverTimeOffset),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateChannelUserTyping) {\n    const id = buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updateChatTypingStatus',\n      id,\n      typingStatus: buildChatTypingStatus(update, serverTimeOffset),\n    });\n  } else if (update instanceof GramJs.UpdateChannel) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities } = update;\n    if (!_entities) {\n      return;\n    }\n\n    const channel = _entities.find((e): e is GramJs.Channel | GramJs.ChannelForbidden => (\n      e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ));\n\n    if (channel instanceof GramJs.Channel) {\n      if (shouldIgnoreNextChannelUpdate) {\n        shouldIgnoreNextChannelUpdate = false;\n        return;\n      }\n\n      if (originRequest instanceof GramJs.messages.ToggleNoForwards) {\n        shouldIgnoreNextChannelUpdate = true;\n        setTimeout(() => { shouldIgnoreNextChannelUpdate = false; }, IGNORE_NEXT_CHANNEL_UPDATE_TIMEOUT);\n      }\n\n      const chat = buildApiChatFromPreview(channel);\n      if (chat) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: chat.id,\n          chat,\n        });\n\n        onUpdate({\n          '@type': chat.isNotJoined ? 'updateChatLeave' : 'updateChatJoin',\n          id: buildApiPeerId(update.channelId, 'channel'),\n        });\n      }\n    } else if (channel instanceof GramJs.ChannelForbidden) {\n      const chatId = buildApiPeerId(update.channelId, 'channel');\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chatId,\n        chat: {\n          isRestricted: true,\n        },\n      });\n\n      onUpdate({\n        '@type': 'updateChatLeave',\n        id: chatId,\n      });\n    } else if (_entities.length === 0) {\n      // The link to the discussion group may have been changed.\n      // No corresponding update available at this moment https://core.telegram.org/type/Updates\n      onUpdate({\n        '@type': 'resetMessages',\n        id: buildApiPeerId(update.channelId, 'channel'),\n      });\n    }\n  } else if (\n    update instanceof GramJs.UpdateDialogUnreadMark\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      chat: {\n        hasUnreadMark: update.unread,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChatDefaultBannedRights) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        defaultBannedRights: omitVirtualClassFields(update.defaultBannedRights),\n      },\n    });\n\n    // Users\n  } else if (update instanceof GramJs.UpdateUserStatus) {\n    onUpdate({\n      '@type': 'updateUserStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      status: buildApiUserStatus(update.status),\n    });\n  } else if (update instanceof GramJs.UpdateUserName) {\n    const apiUserId = buildApiPeerId(update.userId, 'user');\n    const updatedUser = localDb.users[apiUserId];\n    const user = updatedUser?.mutualContact && !updatedUser.self\n      ? pick(update, ['username'])\n      : pick(update, ['firstName', 'lastName', 'username']);\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user,\n    });\n  } else if (update instanceof GramJs.UpdateUserPhoto) {\n    const { userId, photo } = update;\n    const apiUserId = buildApiPeerId(userId, 'user');\n    const avatarHash = buildAvatarHash(photo);\n\n    if (localDb.users[apiUserId]) {\n      localDb.users[apiUserId].photo = photo;\n    }\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user: { avatarHash },\n    });\n  } else if (update instanceof GramJs.UpdateUserPhone) {\n    const { userId, phone } = update;\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: buildApiPeerId(userId, 'user'),\n      user: { phoneNumber: phone },\n    });\n  } else if (update instanceof GramJs.UpdatePeerSettings) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities, settings } = update;\n    if (!_entities) {\n      return;\n    }\n\n    if (_entities?.length) {\n      _entities\n        .filter((e) => e instanceof GramJs.User && !e.contact)\n        .forEach((user) => {\n          onUpdate({\n            '@type': 'deleteContact',\n            id: buildApiPeerId(user.id, 'user'),\n          });\n        });\n\n      _entities\n        .filter((e) => e instanceof GramJs.User && e.contact)\n        .map(buildApiUser)\n        .forEach((user) => {\n          if (!user) {\n            return;\n          }\n\n          onUpdate({\n            '@type': 'updateUser',\n            id: user.id,\n            user: {\n              ...user,\n              ...(settings && { settings: buildApiChatSettings(settings) }),\n            },\n          });\n        });\n    }\n\n    // Settings\n  } else if (update instanceof GramJs.UpdateNotifySettings) {\n    const {\n      notifySettings: {\n        showPreviews, silent, muteUntil,\n      },\n      peer: { className },\n    } = update;\n\n    const peerType = className === 'NotifyUsers'\n      ? 'contact'\n      : (className === 'NotifyChats'\n        ? 'group'\n        : (className === 'NotifyBroadcasts'\n          ? 'broadcast'\n          : undefined\n        )\n      );\n\n    if (!peerType) {\n      return;\n    }\n\n    onUpdate({\n      '@type': 'updateNotifySettings',\n      peerType,\n      isSilent: Boolean(silent\n        || (typeof muteUntil === 'number' && Date.now() + serverTimeOffset * 1000 < muteUntil * 1000)),\n      shouldShowPreviews: Boolean(showPreviews),\n    });\n  } else if (update instanceof GramJs.UpdatePeerBlocked) {\n    onUpdate({\n      '@type': 'updatePeerBlocked',\n      id: getApiChatIdFromMtpPeer(update.peerId),\n      isBlocked: update.blocked,\n    });\n  } else if (update instanceof GramJs.UpdatePrivacy) {\n    const key = buildPrivacyKey(update.key);\n    if (key) {\n      onUpdate({\n        '@type': 'updatePrivacy',\n        key,\n        rules: buildPrivacyRules(update.rules),\n      });\n    }\n\n    // Misc\n  } else if (update instanceof GramJs.UpdateDraftMessage) {\n    onUpdate({\n      '@type': 'draftMessage',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      ...buildMessageDraft(update.draft),\n    });\n  } else if (update instanceof GramJs.UpdateContactsReset) {\n    onUpdate({ '@type': 'updateResetContactList' });\n  } else if (update instanceof GramJs.UpdateFavedStickers) {\n    onUpdate({ '@type': 'updateFavoriteStickers' });\n  } else if (update instanceof GramJs.UpdateRecentStickers) {\n    onUpdate({ '@type': 'updateRecentStickers' });\n  } else if (update instanceof GramJs.UpdateStickerSets) {\n    onUpdate({ '@type': 'updateStickerSets' });\n  } else if (update instanceof GramJs.UpdateStickerSetsOrder) {\n    onUpdate({ '@type': 'updateStickerSetsOrder', order: update.order.map((n) => n.toString()) });\n  } else if (update instanceof GramJs.UpdateNewStickerSet) {\n    if (update.stickerset instanceof GramJs.messages.StickerSet) {\n      const stickerSet = buildStickerSet(update.stickerset.set);\n      onUpdate({\n        '@type': 'updateStickerSet',\n        id: stickerSet.id,\n        stickerSet,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateSavedGifs) {\n    onUpdate({ '@type': 'updateSavedGifs' });\n  } else if (update instanceof GramJs.UpdateGroupCall) {\n    onUpdate({\n      '@type': 'updateGroupCall',\n      call: buildApiGroupCall(update.call),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallConnection) {\n    onUpdate({\n      '@type': 'updateGroupCallConnection',\n      data: JSON.parse(update.params.data) as GroupCallConnectionData,\n      presentation: Boolean(update.presentation),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallParticipants) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCallParticipants',\n      groupCallId: getGroupCallId(update.call),\n      participants: update.participants.map(buildApiGroupCallParticipant),\n    });\n  } else if (update instanceof GramJs.UpdatePendingJoinRequests) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePendingJoinRequests',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      recentRequesterIds: update.recentRequesters.map((id) => buildApiPeerId(id, 'user')),\n      requestsPending: update.requestsPending,\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePhoneCall',\n      call: buildPhoneCall(update.phoneCall),\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCallSignalingData) {\n    onUpdate({\n      '@type': 'updatePhoneCallSignalingData',\n      callId: update.phoneCallId.toString(),\n      data: Array.from(update.data),\n    });\n  } else if (update instanceof GramJs.UpdateWebViewResultSent) {\n    const { queryId } = update;\n\n    onUpdate({\n      '@type': 'updateWebViewResultSent',\n      queryId: queryId.toString(),\n    });\n  } else if (update instanceof GramJs.UpdateBotMenuButton) {\n    const {\n      botId,\n      button,\n    } = update;\n\n    const id = buildApiPeerId(botId, 'user');\n\n    onUpdate({\n      '@type': 'updateBotMenuButton',\n      botId: id,\n      button: buildApiBotMenuButton(button),\n    });\n  } else if (update instanceof GramJs.UpdateTranscribedAudio) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateTranscribedAudio',\n      transcriptionId: update.transcriptionId.toString(),\n      text: update.text,\n      isPending: update.pending,\n    });\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n  } else if (DEBUG) {\n    const params = typeof update === 'object' && 'className' in update ? update.className : update;\n    // eslint-disable-next-line no-console\n    console.warn('[GramJs/updater] Unexpected update:', params);\n  }\n}\n\n","import { errors } from '../../../lib/gramjs';\nimport type {\n  ApiUpdateAuthorizationState,\n  ApiUpdateAuthorizationStateType,\n  OnApiUpdate,\n  ApiUser,\n} from '../../types';\n\nimport { DEBUG } from '../../../config';\n\nconst ApiErrors: { [k: string]: string } = {\n  PHONE_NUMBER_INVALID: 'Invalid phone number.',\n  PHONE_CODE_INVALID: 'Invalid code.',\n  PASSWORD_HASH_INVALID: 'Incorrect password.',\n  PHONE_PASSWORD_FLOOD: 'Limit exceeded. Please try again later.',\n  PHONE_NUMBER_BANNED: 'This phone number is banned.',\n};\n\nconst authController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport function onRequestPhoneNumber() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitPhoneNumber'));\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestCode(isCodeViaApp = false) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitCode'),\n    isCodeViaApp,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestPassword(hint?: string) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitPassword'),\n    hint,\n  });\n\n  return new Promise<string>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestRegistration() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitRegistration'));\n\n  return new Promise<[string, string?]>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestQrCode(qrCode: { token: Buffer; expires: number }) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitQrCode'),\n    qrCode: {\n      token: btoa(String.fromCharCode(...qrCode.token)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, ''),\n      expires: qrCode.expires,\n    },\n  });\n\n  return new Promise<void>((resolve, reject) => {\n    authController.reject = reject;\n  });\n}\n\nexport function onAuthError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateAuthorizationError',\n    message,\n  });\n}\n\nexport function onAuthReady() {\n  onUpdate(buildAuthStateUpdate('authorizationStateReady'));\n}\n\nexport function onCurrentUserUpdate(currentUser: ApiUser) {\n  onUpdate({\n    '@type': 'updateCurrentUser',\n    currentUser,\n  });\n}\n\nexport function buildAuthStateUpdate(authorizationState: ApiUpdateAuthorizationStateType): ApiUpdateAuthorizationState {\n  return {\n    '@type': 'updateAuthorizationState',\n    authorizationState,\n  };\n}\n\nexport function provideAuthPhoneNumber(phoneNumber: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(phoneNumber);\n}\n\nexport function provideAuthCode(code: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(code);\n}\n\nexport function provideAuthPassword(password: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(password);\n}\n\nexport function provideAuthRegistration(registration: { firstName: string; lastName: string }) {\n  const { firstName, lastName } = registration;\n\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve([firstName, lastName]);\n}\n\nexport function restartAuth() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH'));\n}\n\nexport function restartAuthWithQr() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH_WITH_QR'));\n}\n","// eslint-disable-next-line no-restricted-globals\nconst cacheApi = self.caches;\n\nexport enum Type {\n  Text,\n  Blob,\n  Json,\n  ArrayBuffer,\n}\n\nexport async function fetch(\n  cacheName: string, key: string, type: Type, isHtmlAllowed = false,\n) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = new Request(key.replace(/:/g, '_'));\n    const cache = await cacheApi.open(cacheName);\n    const response = await cache.match(request);\n    if (!response) {\n      return undefined;\n    }\n\n    const contentType = response.headers.get('Content-Type');\n\n    switch (type) {\n      case Type.Text:\n        return await response.text();\n      case Type.Blob: {\n        // Ignore deprecated data-uri avatars\n        if (key.startsWith('avatar') && contentType && contentType.startsWith('text')) {\n          return undefined;\n        }\n\n        const blob = await response.blob();\n        const shouldRecreate = !blob.type || (!isHtmlAllowed && blob.type.includes('html'));\n        // iOS Safari fails to preserve `type` in cache\n        let resolvedType = blob.type || contentType;\n\n        if (!(shouldRecreate && resolvedType)) {\n          return blob;\n        }\n\n        // Prevent HTML-in-video attacks (for files that were cached before fix)\n        if (!isHtmlAllowed) {\n          resolvedType = resolvedType.replace(/html/gi, '');\n        }\n\n        return new Blob([blob], { type: resolvedType });\n      }\n      case Type.Json:\n        return await response.json();\n      case Type.ArrayBuffer:\n        return await response.arrayBuffer();\n      default:\n        return undefined;\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function save(cacheName: string, key: string, data: AnyLiteral | Blob | ArrayBuffer | string) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    const cacheData = typeof data === 'string' || data instanceof Blob || data instanceof ArrayBuffer\n      ? data\n      : JSON.stringify(data);\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = new Request(key.replace(/:/g, '_'));\n    const response = new Response(cacheData);\n    const cache = await cacheApi.open(cacheName);\n    return await cache.put(request, response);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function remove(cacheName: string, key: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    const cache = await cacheApi.open(cacheName);\n    return await cache.delete(key);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function clear(cacheName: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    return await cacheApi.delete(cacheName);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n","import type { TelegramClient } from '../../../lib/gramjs';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiOnProgress, ApiParsedMedia, ApiPreparedMedia } from '../../types';\nimport {\n  ApiMediaFormat,\n} from '../../types';\n\nimport {\n  DOWNLOAD_WORKERS,\n  MEDIA_CACHE_DISABLED,\n  MEDIA_CACHE_MAX_BYTES,\n  MEDIA_CACHE_NAME,\n  MEDIA_CACHE_NAME_AVATARS,\n} from '../../../config';\nimport localDb from '../localDb';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { getEntityTypeById } from '../gramjsBuilders';\n\nconst MEDIA_ENTITY_TYPES = new Set([\n  'msg', 'sticker', 'gif', 'wallpaper', 'photo', 'webDocument', 'document', 'videoAvatar',\n]);\n\nexport default async function downloadMedia(\n  {\n    url, mediaFormat, start, end, isHtmlAllowed,\n  }: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n) {\n  const {\n    data, mimeType, fullSize,\n  } = await download(url, client, isConnected, onProgress, start, end, mediaFormat, isHtmlAllowed) || {};\n\n  if (!data) {\n    return undefined;\n  }\n\n  const parsed = await parseMedia(data, mediaFormat, mimeType);\n  if (!parsed) {\n    return undefined;\n  }\n\n  const canCache = mediaFormat !== ApiMediaFormat.Progressive && (\n    mediaFormat !== ApiMediaFormat.BlobUrl || (parsed as Blob).size <= MEDIA_CACHE_MAX_BYTES\n  );\n\n  if (!MEDIA_CACHE_DISABLED && cacheApi && canCache) {\n    const cacheName = url.startsWith('avatar') ? MEDIA_CACHE_NAME_AVATARS : MEDIA_CACHE_NAME;\n    void cacheApi.save(cacheName, url, parsed);\n  }\n\n  const prepared = mediaFormat === ApiMediaFormat.Progressive ? '' : prepareMedia(parsed as string | Blob);\n  const arrayBuffer = mediaFormat === ApiMediaFormat.Progressive ? parsed as ArrayBuffer : undefined;\n\n  return {\n    prepared,\n    arrayBuffer,\n    mimeType,\n    fullSize,\n  };\n}\n\nexport type EntityType = (\n  'msg' | 'sticker' | 'wallpaper' | 'gif' | 'channel' | 'chat' | 'user' | 'photo' | 'stickerSet' | 'webDocument' |\n  'document' | 'staticMap' | 'videoAvatar'\n);\n\nasync function download(\n  url: string,\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n  start?: number,\n  end?: number,\n  mediaFormat?: ApiMediaFormat,\n  isHtmlAllowed?: boolean,\n) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, sizeType, params, mediaMatchType,\n  } = parsed;\n\n  if (!isConnected) {\n    return Promise.reject(new Error('ERROR: Client is not connected'));\n  }\n\n  if (entityType === 'staticMap') {\n    const accessHash = entityId;\n    const parsedParams = new URLSearchParams(params);\n    const long = parsedParams.get('long');\n    const lat = parsedParams.get('lat');\n    const w = parsedParams.get('w');\n    const h = parsedParams.get('h');\n    const zoom = parsedParams.get('zoom');\n    const scale = parsedParams.get('scale');\n    const accuracyRadius = parsedParams.get('accuracy_radius');\n\n    const data = await client.downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius);\n    return {\n      mimeType: 'image/png',\n      data,\n    };\n  }\n\n  let entity: (\n    GramJs.User | GramJs.Chat | GramJs.Channel | GramJs.Photo |\n    GramJs.Message | GramJs.MessageService |\n    GramJs.Document | GramJs.StickerSet | GramJs.TypeWebDocument | undefined\n  );\n\n  switch (entityType) {\n    case 'channel':\n    case 'chat':\n      entity = localDb.chats[entityId];\n      break;\n    case 'user':\n      entity = localDb.users[entityId];\n      break;\n    case 'msg':\n      entity = localDb.messages[entityId];\n      break;\n    case 'sticker':\n    case 'gif':\n    case 'wallpaper':\n      entity = localDb.documents[entityId];\n      break;\n    case 'videoAvatar':\n    case 'photo':\n      entity = localDb.photos[entityId];\n      break;\n    case 'stickerSet':\n      entity = localDb.stickerSets[entityId];\n      break;\n    case 'webDocument':\n      entity = localDb.webDocuments[entityId];\n      break;\n    case 'document':\n      entity = localDb.documents[entityId];\n      break;\n  }\n\n  if (!entity) {\n    return undefined;\n  }\n\n  if (MEDIA_ENTITY_TYPES.has(entityType)) {\n    if (mediaFormat === ApiMediaFormat.Stream) {\n      onProgress!.acceptsBuffer = true;\n    }\n\n    const data = await client.downloadMedia(entity, {\n      sizeType, start, end, progressCallback: onProgress, workers: DOWNLOAD_WORKERS,\n    });\n    let mimeType;\n    let fullSize;\n\n    if (entity instanceof GramJs.Message) {\n      mimeType = getMessageMediaMimeType(entity, sizeType);\n      if (entity.media instanceof GramJs.MessageMediaDocument && entity.media.document instanceof GramJs.Document) {\n        fullSize = entity.media.document.size.toJSNumber();\n      }\n      if (entity.media instanceof GramJs.MessageMediaWebPage\n        && entity.media.webpage instanceof GramJs.WebPage\n        && entity.media.webpage.document instanceof GramJs.Document) {\n        fullSize = entity.media.webpage.document.size.toJSNumber();\n      }\n    } else if (entity instanceof GramJs.Photo) {\n      if (entityType === 'videoAvatar') {\n        mimeType = 'video/mp4';\n      } else {\n        mimeType = 'image/jpeg';\n      }\n    } else if (entityType === 'sticker' && sizeType) {\n      mimeType = 'image/webp';\n    } else if (entityType === 'webDocument') {\n      mimeType = (entity as GramJs.TypeWebDocument).mimeType;\n      fullSize = (entity as GramJs.TypeWebDocument).size;\n    } else {\n      mimeType = (entity as GramJs.Document).mimeType;\n      fullSize = (entity as GramJs.Document).size.toJSNumber();\n    }\n\n    // Prevent HTML-in-video attacks\n    if (!isHtmlAllowed && mimeType) {\n      mimeType = mimeType.replace(/html/gi, '');\n    }\n\n    return { mimeType, data, fullSize };\n  } else if (entityType === 'stickerSet') {\n    const data = await client.downloadStickerSetThumb(entity);\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  } else {\n    const data = await client.downloadProfilePhoto(entity, mediaMatchType === 'profile');\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  }\n}\n\nfunction getMessageMediaMimeType(message: GramJs.Message, sizeType?: string) {\n  if (!message || !message.media) {\n    return undefined;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaPhoto) {\n    return 'image/jpeg';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaGeo\n    || message.media instanceof GramJs.MessageMediaVenue\n    || message.media instanceof GramJs.MessageMediaGeoLive) {\n    return 'image/png';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaDocument && message.media.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return message.media.document!.attributes.some((a) => a instanceof GramJs.DocumentAttributeSticker)\n        ? 'image/webp'\n        : 'image/jpeg';\n    }\n\n    return message.media.document!.mimeType;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaWebPage\n    && message.media.webpage instanceof GramJs.WebPage\n    && message.media.webpage.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return 'image/jpeg';\n    }\n\n    return message.media.webpage.document.mimeType;\n  }\n\n  return undefined;\n}\n\n// eslint-disable-next-line no-async-without-await/no-async-without-await\nasync function parseMedia(\n  data: Buffer, mediaFormat: ApiMediaFormat, mimeType?: string,\n): Promise<ApiParsedMedia | undefined> {\n  switch (mediaFormat) {\n    case ApiMediaFormat.BlobUrl:\n      return new Blob([data], { type: mimeType });\n    case ApiMediaFormat.Text:\n      return data.toString();\n    case ApiMediaFormat.Progressive:\n      return data.buffer;\n  }\n\n  return undefined;\n}\n\nfunction prepareMedia(mediaData: Exclude<ApiParsedMedia, ArrayBuffer>): ApiPreparedMedia {\n  if (mediaData instanceof Blob) {\n    return URL.createObjectURL(mediaData);\n  }\n\n  return mediaData;\n}\n\nfunction getMimeType(data: Uint8Array, fallbackMimeType = 'image/jpeg') {\n  if (data.length < 4) {\n    return fallbackMimeType;\n  }\n\n  let type = fallbackMimeType;\n  const signature = data.subarray(0, 4).reduce((result, byte) => result + byte.toString(16), '');\n\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\n  switch (signature) {\n    case '89504e47':\n      type = 'image/png';\n      break;\n    case '47494638':\n      type = 'image/gif';\n      break;\n    case 'ffd8ffe0':\n    case 'ffd8ffe1':\n    case 'ffd8ffe2':\n    case 'ffd8ffe3':\n    case 'ffd8ffe8':\n      type = 'image/jpeg';\n      break;\n    case '52494646':\n      // In our case only webp is expected\n      type = 'image/webp';\n      break;\n  }\n\n  return type;\n}\n\nexport function parseMediaUrl(url: string) {\n  const mediaMatch = url.startsWith('staticMap')\n    ? url.match(/(staticMap):([0-9-]+)(\\?.+)/)\n    : url.startsWith('webDocument')\n      ? url.match(/(webDocument):(.+)/)\n      : url.match(\n        // eslint-disable-next-line max-len\n        /(avatar|profile|photo|msg|stickerSet|sticker|wallpaper|gif|document|videoAvatar)([-\\d\\w./]+)(?::\\d+)?(\\?size=\\w+)?/,\n      );\n  if (!mediaMatch) {\n    return undefined;\n  }\n\n  const mediaMatchType = mediaMatch[1];\n  const entityId: string | number = mediaMatch[2];\n\n  let entityType: EntityType;\n  const params = mediaMatch[3];\n  const sizeType = params?.replace('?size=', '') || undefined;\n\n  if (mediaMatch[1] === 'avatar' || mediaMatch[1] === 'profile') {\n    entityType = getEntityTypeById(entityId);\n  } else {\n    entityType = mediaMatch[1] as EntityType;\n  }\n\n  return {\n    mediaMatchType,\n    entityType,\n    entityId,\n    sizeType,\n    params,\n  };\n}\n","import {Api as GramJs, connection, sessions,} from '../../../lib/gramjs';\nimport TelegramClient from '../../../lib/gramjs/client/TelegramClient';\n\nimport {Logger as GramJsLogger} from '../../../lib/gramjs/extensions/index';\nimport type {TwoFaParams} from '../../../lib/gramjs/client/2fa';\n\nimport type {ApiInitialArgs, ApiMediaFormat, ApiOnProgress, ApiSessionData, OnApiUpdate,} from '../../types';\n\nimport {DEBUG, DEBUG_GRAMJS, SUPPORTED_VIDEO_CONTENT_TYPES, UPLOAD_WORKERS, VIDEO_MOV_TYPE,} from '../../../config';\nimport {onCurrentUserUpdate,} from './auth';\nimport {updater} from '../updater';\nimport {setMessageBuilderCurrentUserId} from '../apiBuilders/messages';\nimport downloadMediaWithClient, {parseMediaUrl} from './media';\nimport {buildApiUserFromFull} from '../apiBuilders/users';\nimport localDb, {clearLocalDb} from '../localDb';\nimport {buildApiPeerId} from '../apiBuilders/peers';\nimport {addMessageToLocalDb} from '../helpers';\nimport {Pdu} from \"../../../lib/protobuf/Pdu\";\nimport MsgConn from \"../../../lib/client/MsgConn\";\n\nconst DEFAULT_USER_AGENT = 'Unknown UserAgent';\nconst DEFAULT_PLATFORM = 'Unknown platform';\nconst APP_CODE_NAME = 'Z';\n\nGramJsLogger.setLevel(DEBUG_GRAMJS ? 'debug' : 'warn');\n\nconst gramJsUpdateEventBuilder = { build: (update: object) => update };\n\nlet onUpdate: OnApiUpdate;\nlet client: TelegramClient;\nlet isConnected = false;\n\nexport async function init(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START INIT API');\n  }\n\n  onUpdate = _onUpdate;\n\n  const {\n    userAgent, platform, sessionData, isTest, isMovSupported, isWebmSupported,\n  } = initialArgs;\n  const session = new sessions.CallbackSession(sessionData, onSessionUpdate);\n\n  // eslint-disable-next-line no-restricted-globals\n  (self as any).isMovSupported = isMovSupported;\n  // Hacky way to update this set inside GramJS worker\n  if (isMovSupported) SUPPORTED_VIDEO_CONTENT_TYPES.add(VIDEO_MOV_TYPE);\n  // eslint-disable-next-line no-restricted-globals\n  (self as any).isWebmSupported = isWebmSupported;\n\n  //\n  // client = new TelegramClient(\n  //   session,\n  //   process.env.TELEGRAM_T_API_ID,\n  //   process.env.TELEGRAM_T_API_HASH,\n  //   {\n  //     deviceModel: navigator.userAgent || userAgent || DEFAULT_USER_AGENT,\n  //     systemVersion: platform || DEFAULT_PLATFORM,\n  //     appVersion: `${APP_VERSION} ${APP_CODE_NAME}`,\n  //     useWSS: true,\n  //     additionalDcsDisabled: IS_TEST,\n  //     testServers: isTest,\n  //   } as any,\n  // );\n  //\n  // client.addEventHandler(handleGramJsUpdate, gramJsUpdateEventBuilder);\n  // client.addEventHandler(updater, gramJsUpdateEventBuilder);\n\n  //\n  // try {\n  //   if (DEBUG) {\n  //     // eslint-disable-next-line no-console\n  //     console.log('[GramJs/client] CONNECTING');\n  //\n  //     // eslint-disable-next-line no-restricted-globals\n  //     (self as any).invoke = invokeRequest;\n  //     // eslint-disable-next-line no-restricted-globals\n  //     (self as any).GramJs = GramJs;\n  //   }\n  //   debugger\n  //   try {\n  //     await client.start({\n  //       phoneNumber: onRequestPhoneNumber,\n  //       phoneCode: onRequestCode,\n  //       password: onRequestPassword,\n  //       firstAndLastNames: onRequestRegistration,\n  //       qrCode: onRequestQrCode,\n  //       onError: onAuthError,\n  //       initialMethod: platform === 'iOS' || platform === 'Android' ? 'phoneNumber' : 'qrCode',\n  //       shouldThrowIfUnauthorized: Boolean(sessionData),\n  //     });\n  //   } catch (err: any) {\n  //     // eslint-disable-next-line no-console\n  //     console.error(err);\n  //\n  //     if (err.message !== 'Disconnect' && err.message !== 'Cannot send requests while disconnected') {\n  //       onUpdate({\n  //         '@type': 'updateConnectionState',\n  //         connectionState: 'connectionStateBroken',\n  //       });\n  //\n  //       return;\n  //     }\n  //   }\n  //\n  //   if (DEBUG) {\n  //     // eslint-disable-next-line no-console\n  //     console.log('>>> FINISH INIT API');\n  //     // eslint-disable-next-line no-console\n  //     console.log('[GramJs/client] CONNECTED');\n  //   }\n  //\n  //   onAuthReady();\n  //   onSessionUpdate(session.getSessionData());\n  //   onUpdate({ '@type': 'updateApiReady' });\n  //\n  //   void fetchCurrentUser();\n  // } catch (err) {\n  //   if (DEBUG) {\n  //     // eslint-disable-next-line no-console\n  //     console.log('[GramJs/client] CONNECTING ERROR', err);\n  //   }\n  //\n  //   throw err;\n  // }\n}\n\nexport async function destroy(noLogOut = false) {\n  if (!noLogOut) {\n    await invokeRequest(new GramJs.auth.LogOut());\n  }\n\n  clearLocalDb();\n\n  await client.destroy();\n}\n\nexport async function disconnect() {\n  await client.disconnect();\n}\n\nexport async function switchAccount(accountId:number) {\n  return undefined\n}\n\nexport function getClient() {\n  return client;\n}\n\nfunction onSessionUpdate(sessionData: ApiSessionData) {\n  onUpdate({\n    '@type': 'updateSession',\n    sessionData,\n  });\n}\n\nfunction handleGramJsUpdate(update: any) {\n  if (update instanceof connection.UpdateConnectionState) {\n    isConnected = update.state === connection.UpdateConnectionState.connected;\n  } else if (update instanceof GramJs.UpdatesTooLong) {\n    void handleTerminatedSession();\n  } else if (update instanceof connection.UpdateServerTimeOffset) {\n    onUpdate({\n      '@type': 'updateServerTimeOffset',\n      serverTimeOffset: update.timeOffset,\n    });\n  }\n}\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue: true,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: undefined,\n  dcId?: number,\n): Promise<true | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue?: boolean,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: boolean,\n  dcId?: number,\n): Promise<T['__response'] | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue = false,\n  shouldThrow = false,\n  shouldIgnoreUpdates = false,\n  dcId?: number,\n) {\n  return undefined;\n  if (!isConnected) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(`[GramJs/client] INVOKE ERROR ${request.className}: Client is not connected`);\n    }\n\n    return undefined;\n  }\n\n  try {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log(`[GramJs/client] INVOKE ${request.className}`);\n    }\n\n    const result = await client.invoke(request, dcId);\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log(`[GramJs/client] INVOKE RESPONSE ${request.className}`, result);\n    }\n\n    if (!shouldIgnoreUpdates) {\n      handleUpdatesFromRequest(request, result);\n    }\n\n    return shouldReturnTrue ? result && true : result;\n  } catch (err: any) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log(`[GramJs/client] INVOKE ERROR ${request.className}`);\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    if (shouldThrow) {\n      throw err;\n    }\n\n    dispatchErrorUpdate(err, request);\n\n    return undefined;\n  }\n}\n\nfunction handleUpdatesFromRequest<T extends GramJs.AnyRequest>(request: T, result: T['__response']) {\n  let manyUpdates;\n  let singleUpdate;\n\n  if (result instanceof GramJs.UpdatesCombined || result instanceof GramJs.Updates) {\n    manyUpdates = result;\n  } else if (typeof result === 'object' && 'updates' in result && (\n    result.updates instanceof GramJs.Updates || result.updates instanceof GramJs.UpdatesCombined\n  )) {\n    manyUpdates = result.updates;\n  } else if (\n    result instanceof GramJs.UpdateShortMessage\n    || result instanceof GramJs.UpdateShortChatMessage\n    || result instanceof GramJs.UpdateShort\n    || result instanceof GramJs.UpdateShortSentMessage\n  ) {\n    singleUpdate = result;\n  }\n\n  if (manyUpdates) {\n    injectUpdateEntities(manyUpdates);\n\n    manyUpdates.updates.forEach((update) => {\n      updater(update, request);\n    });\n  } else if (singleUpdate) {\n    updater(singleUpdate, request);\n  }\n}\n\nexport function downloadMedia(\n  args: { url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean },\n  onProgress?: ApiOnProgress,\n) {\n  return downloadMediaWithClient(args, client, isConnected, onProgress).catch(async (err) => {\n    if (err.message.startsWith('FILE_REFERENCE')) {\n      const isFileReferenceRepaired = await repairFileReference({ url: args.url });\n      if (!isFileReferenceRepaired) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Failed to repair file reference', args.url);\n        }\n        return undefined;\n      }\n\n      return downloadMediaWithClient(args, client, isConnected, onProgress);\n    }\n    return undefined;\n  });\n}\n\nexport function uploadFile(file: File, onProgress?: ApiOnProgress) {\n  return client.uploadFile({ file, onProgress, workers: UPLOAD_WORKERS });\n}\n\nexport function updateTwoFaSettings(params: TwoFaParams) {\n  return client.updateTwoFaSettings(params);\n}\n\nexport async function fetchCurrentUser() {\n  const userFull = await invokeRequest(new GramJs.users.GetFullUser({\n    id: new GramJs.InputUserSelf(),\n  }));\n\n  if (!userFull || !(userFull.users[0] instanceof GramJs.User)) {\n    return;\n  }\n\n  const user = userFull.users[0];\n\n  if (user.photo instanceof GramJs.Photo) {\n    localDb.photos[user.photo.id.toString()] = user.photo;\n  }\n  localDb.users[buildApiPeerId(user.id, 'user')] = user;\n  const currentUser = buildApiUserFromFull(userFull);\n\n  setMessageBuilderCurrentUserId(currentUser.id);\n  onCurrentUserUpdate(currentUser);\n}\n\nexport function dispatchErrorUpdate<T extends GramJs.AnyRequest>(err: Error, request: T) {\n  const isSlowMode = err.message.startsWith('A wait of') && (\n    request instanceof GramJs.messages.SendMessage\n    || request instanceof GramJs.messages.SendMedia\n    || request instanceof GramJs.messages.SendMultiMedia\n  );\n\n  const { message } = err;\n\n  onUpdate({\n    '@type': 'error',\n    error: {\n      message,\n      isSlowMode,\n      hasErrorKey: true,\n    },\n  });\n}\n\nfunction injectUpdateEntities(result: GramJs.Updates | GramJs.UpdatesCombined) {\n  const entities = [...result.users, ...result.chats];\n\n  result.updates.forEach((update) => {\n    if (entities) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as any)._entities = entities;\n    }\n  });\n}\n\nasync function handleTerminatedSession() {\n  try {\n    await invokeRequest(new GramJs.users.GetFullUser({\n      id: new GramJs.InputUserSelf(),\n    }), undefined, true);\n  } catch (err: any) {\n    if (err.message === 'AUTH_KEY_UNREGISTERED') {\n      onUpdate({\n        '@type': 'updateConnectionState',\n        connectionState: 'connectionStateBroken',\n      });\n    }\n  }\n}\n\nexport async function repairFileReference({\n  url,\n}: {\n  url: string;\n}) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, mediaMatchType,\n  } = parsed;\n\n  if (mediaMatchType === 'file') {\n    return false;\n  }\n\n  if (entityType === 'msg') {\n    const entity = localDb.messages[entityId]!;\n    const messageId = entity.id;\n\n    const peer = 'channelId' in entity.peerId ? new GramJs.InputChannel({\n      channelId: entity.peerId.channelId,\n      accessHash: (localDb.chats[buildApiPeerId(entity.peerId.channelId, 'channel')] as GramJs.Channel).accessHash!,\n    }) : undefined;\n    const result = await invokeRequest(\n      peer\n        ? new GramJs.channels.GetMessages({\n          channel: peer,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n    );\n\n    if (!result || result instanceof GramJs.messages.MessagesNotModified) return false;\n\n    const message = result.messages[0];\n    if (message instanceof GramJs.MessageEmpty) return false;\n    addMessageToLocalDb(message);\n    return true;\n  }\n\n  return false;\n}\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  OnApiUpdate,\n  ApiChat,\n  ApiMessage,\n  ApiUser,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiChatFullInfo,\n  ApiChatFolder,\n  ApiChatBannedRights,\n  ApiChatAdminRights,\n  ApiGroupCall,\n  ApiUserStatus,\n} from '../../types';\n\nimport {\n  DEBUG, ARCHIVED_FOLDER_ID, MEMBERS_LOAD_SLICE, SERVICE_NOTIFICATIONS_USER_ID, ALL_FOLDER_ID,\n} from '../../../config';\nimport { invokeRequest, uploadFile } from './client';\nimport {\n  buildApiChatFromDialog,\n  getPeerKey,\n  buildChatMembers,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatFolderFromSuggested,\n  buildApiChatBotCommands,\n  buildApiChatSettings,\n} from '../apiBuilders/chats';\nimport { buildApiMessage, buildMessageDraft } from '../apiBuilders/messages';\nimport { buildApiUser, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  buildInputEntity,\n  buildInputPeer,\n  buildMtpMessageEntity,\n  buildFilterFromApiFolder,\n  isMessageWithMedia,\n  buildChatBannedRights,\n  buildChatAdminRights,\n} from '../gramjsBuilders';\nimport { addEntitiesWithPhotosToLocalDb, addMessageToLocalDb, addPhotoToLocalDb } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { buildStickerSet } from '../apiBuilders/symbols';\nimport localDb from '../localDb';\n\ntype FullChatData = {\n  fullInfo: ApiChatFullInfo;\n  users?: ApiUser[];\n  userStatusesById: { [userId: string]: ApiUserStatus };\n  groupCall?: Partial<ApiGroupCall>;\n  membersCount?: number;\n};\n\nconst MAX_INT_32 = 2 ** 31 - 1;\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchChats({\n  limit,\n  offsetDate,\n  archived,\n  withPinned,\n  serverTimeOffset,\n  lastLocalServiceMessage,\n}: {\n  limit: number;\n  offsetDate?: number;\n  archived?: boolean;\n  withPinned?: boolean;\n  serverTimeOffset: number;\n  lastLocalServiceMessage?: ApiMessage;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetDialogs({\n    offsetPeer: new GramJs.InputPeerEmpty(),\n    limit,\n    offsetDate,\n    folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n    ...(withPinned && { excludePinned: true }),\n  }));\n  const resultPinned = withPinned\n    ? await invokeRequest(new GramJs.messages.GetPinnedDialogs({\n      folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n    }))\n    : undefined;\n\n  if (!result || result instanceof GramJs.messages.DialogsNotModified) {\n    return undefined;\n  }\n\n  if (resultPinned) {\n    updateLocalDb(resultPinned);\n  }\n  updateLocalDb(result);\n\n  const lastMessagesByChatId = buildCollectionByKey(\n    (resultPinned ? resultPinned.messages : []).concat(result.messages)\n      .map(buildApiMessage)\n      .filter<ApiMessage>(Boolean as any),\n    'chatId',\n  );\n  const peersByKey: Record<string, GramJs.TypeChat | GramJs.TypeUser> = {\n    ...(resultPinned && preparePeers(resultPinned)),\n    ...preparePeers(result),\n  };\n  const chats: ApiChat[] = [];\n  const draftsById: Record<string, ApiFormattedText> = {};\n  const replyingToById: Record<string, number> = {};\n\n  const dialogs = (resultPinned ? resultPinned.dialogs : []).concat(result.dialogs);\n\n  const orderedPinnedIds: string[] = [];\n\n  dialogs.forEach((dialog) => {\n    if (\n      !(dialog instanceof GramJs.Dialog)\n      // This request can return dialogs not belonging to specified folder\n      || (!archived && dialog.folderId === ARCHIVED_FOLDER_ID)\n      || (archived && dialog.folderId !== ARCHIVED_FOLDER_ID)\n    ) {\n      return;\n    }\n\n    const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n    const chat = buildApiChatFromDialog(dialog, peerEntity, serverTimeOffset);\n\n    if (\n      chat.id === SERVICE_NOTIFICATIONS_USER_ID\n      && lastLocalServiceMessage\n      && (!lastMessagesByChatId[chat.id] || lastLocalServiceMessage.date > lastMessagesByChatId[chat.id].date)\n    ) {\n      chat.lastMessage = lastLocalServiceMessage;\n    } else {\n      chat.lastMessage = lastMessagesByChatId[chat.id];\n    }\n\n    chat.isListed = true;\n    chats.push(chat);\n\n    if (withPinned && dialog.pinned) {\n      orderedPinnedIds.push(chat.id);\n    }\n\n    if (dialog.draft) {\n      const { formattedText, replyingToId } = buildMessageDraft(dialog.draft) || {};\n      if (formattedText) {\n        draftsById[chat.id] = formattedText;\n      }\n      if (replyingToId) {\n        replyingToById[chat.id] = replyingToId;\n      }\n    }\n  });\n\n  const chatIds = chats.map((chat) => chat.id);\n\n  const { users, userStatusesById } = buildApiUsersAndStatuses((resultPinned?.users || []).concat(result.users));\n\n  let totalChatCount: number;\n  if (result instanceof GramJs.messages.DialogsSlice) {\n    totalChatCount = result.count;\n  } else {\n    totalChatCount = chatIds.length;\n  }\n\n  return {\n    chatIds,\n    chats,\n    users,\n    userStatusesById,\n    draftsById,\n    replyingToById,\n    orderedPinnedIds: withPinned ? orderedPinnedIds : undefined,\n    totalChatCount,\n  };\n}\n\nexport function fetchFullChat(chat: ApiChat) {\n  const { id, accessHash, adminRights } = chat;\n\n  const input = buildInputEntity(id, accessHash);\n\n  return input instanceof GramJs.InputChannel\n    ? getFullChannelInfo(id, accessHash!, adminRights)\n    : getFullChatInfo(id);\n}\n\nexport async function fetchChatSettings(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerSettings({\n    peer: buildInputPeer(id, accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildApiChatSettings(result.settings);\n}\n\nexport async function searchChats({ query }: { query: string }) {\n  const result = await invokeRequest(new GramJs.contacts.Search({ q: query }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const localPeerIds = result.myResults.map(getApiChatIdFromMtpPeer);\n  const allChats = result.chats.concat(result.users)\n    .map((user) => buildApiChatFromPreview(user))\n    .filter<ApiChat>(Boolean as any);\n  const allUsers = result.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n\n  return {\n    localChats: allChats.filter((r) => localPeerIds.includes(r.id)),\n    localUsers: allUsers.filter((u) => localPeerIds.includes(u.id)),\n    globalChats: allChats.filter((r) => !localPeerIds.includes(r.id)),\n    globalUsers: allUsers.filter((u) => !localPeerIds.includes(u.id)),\n  };\n}\n\nexport async function fetchChat({\n  type, user,\n}: {\n  type: 'user' | 'self' | 'support'; user?: ApiUser;\n}) {\n  let mtpUser: GramJs.User | undefined;\n\n  if (type === 'self' || type === 'user') {\n    const result = await invokeRequest(new GramJs.users.GetUsers({\n      id: [\n        type === 'user' && user\n          ? buildInputEntity(user.id, user.accessHash) as GramJs.InputUser\n          : new GramJs.InputUserSelf(),\n      ],\n    }));\n    if (!result || !result.length) {\n      return undefined;\n    }\n\n    [mtpUser] = result;\n  } else if (type === 'support') {\n    const result = await invokeRequest(new GramJs.help.GetSupport());\n    if (!result || !result.user) {\n      return undefined;\n    }\n\n    mtpUser = result.user;\n  }\n\n  const chat = buildApiChatFromPreview(mtpUser!, type === 'support');\n  if (!chat) {\n    return undefined;\n  }\n\n  onUpdate({\n    '@type': 'updateChat',\n    id: chat.id,\n    chat,\n  });\n\n  return { chatId: chat.id };\n}\n\nexport async function requestChatUpdate({\n  chat,\n  serverTimeOffset,\n  lastLocalMessage,\n  noLastMessage,\n}: {\n  chat: ApiChat; serverTimeOffset: number; lastLocalMessage?: ApiMessage; noLastMessage?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerDialogs({\n    peers: [new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    })],\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  const dialog = result.dialogs[0];\n  if (!dialog || !(dialog instanceof GramJs.Dialog)) {\n    return;\n  }\n\n  const peersByKey = preparePeers(result);\n  const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n  if (!peerEntity) {\n    return;\n  }\n\n  updateLocalDb(result);\n\n  const lastRemoteMessage = buildApiMessage(result.messages[0]);\n  const lastMessage = lastLocalMessage && (!lastRemoteMessage || (lastLocalMessage.date > lastRemoteMessage.date))\n    ? lastLocalMessage\n    : lastRemoteMessage;\n\n  onUpdate({\n    '@type': 'updateChat',\n    id,\n    chat: {\n      ...buildApiChatFromDialog(dialog, peerEntity, serverTimeOffset),\n      ...(!noLastMessage && { lastMessage }),\n    },\n  });\n}\n\nexport function saveDraft({\n  chat,\n  text,\n  entities,\n  replyToMsgId,\n}: {\n  chat: ApiChat;\n  text: string;\n  entities?: ApiMessageEntity[];\n  replyToMsgId?: number;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: text,\n    ...(entities && {\n      entities: entities.map(buildMtpMessageEntity),\n    }),\n    replyToMsgId,\n  }));\n}\n\nexport function clearDraft(chat: ApiChat) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: '',\n  }));\n}\n\nasync function getFullChatInfo(chatId: string): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.messages.GetFullChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChatFull)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const {\n    about,\n    participants,\n    exportedInvite,\n    botInfo,\n    call,\n    availableReactions,\n    recentRequesters,\n    requestsPending,\n    chatPhoto,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const members = buildChatMembers(participants);\n  const adminMembers = members ? members.filter(({ isAdmin, isOwner }) => isAdmin || isOwner) : undefined;\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      members,\n      adminMembers,\n      canViewMembers: true,\n      botCommands,\n      ...(exportedInvite instanceof GramJs.ChatInviteExported && {\n        // TODO Verify Exported Invite logic\n        inviteLink: exportedInvite.link,\n      }),\n      groupCallId: call?.id.toString(),\n      enabledReactions: availableReactions,\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n    },\n    users,\n    userStatusesById,\n    groupCall: call ? {\n      chatId,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call.accessHash.toString(),\n      connectionState: 'disconnected',\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    } : undefined,\n    membersCount: members?.length,\n  };\n}\n\nasync function getFullChannelInfo(\n  id: string,\n  accessHash: string,\n  adminRights?: ApiChatAdminRights,\n): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.channels.GetFullChannel({\n    channel: buildInputEntity(id, accessHash) as GramJs.InputChannel,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChannelFull)) {\n    return undefined;\n  }\n\n  const {\n    about,\n    onlineCount,\n    exportedInvite,\n    slowmodeSeconds,\n    slowmodeNextSendDate,\n    migratedFromChatId,\n    migratedFromMaxId,\n    canViewParticipants,\n    canViewStats,\n    linkedChatId,\n    hiddenPrehistory,\n    call,\n    botInfo,\n    availableReactions,\n    defaultSendAs,\n    requestsPending,\n    recentRequesters,\n    statsDc,\n    participantsCount,\n    stickerset,\n    chatPhoto,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported\n    ? exportedInvite.link\n    : undefined;\n\n  const { members, users, userStatusesById } = (canViewParticipants && await fetchMembers(id, accessHash)) || {};\n  const { members: kickedMembers, users: bannedUsers, userStatusesById: bannedStatusesById } = (\n    canViewParticipants && adminRights && await fetchMembers(id, accessHash, 'kicked')\n  ) || {};\n  const { members: adminMembers, users: adminUsers, userStatusesById: adminStatusesById } = (\n    canViewParticipants && adminRights && await fetchMembers(id, accessHash, 'admin')\n  ) || {};\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n\n  if (result?.chats?.length > 1) {\n    updateLocalDb(result);\n\n    const [, mtpLinkedChat] = result.chats;\n    const chat = buildApiChatFromPreview(mtpLinkedChat, undefined, true);\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  const statusesById = {\n    ...userStatusesById,\n    ...bannedStatusesById,\n    ...adminStatusesById,\n  };\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      onlineCount,\n      inviteLink,\n      slowMode: slowmodeSeconds ? {\n        seconds: slowmodeSeconds,\n        nextSendDate: slowmodeNextSendDate,\n      } : undefined,\n      migratedFrom: migratedFromChatId ? {\n        chatId: buildApiPeerId(migratedFromChatId, 'chat'),\n        maxMessageId: migratedFromMaxId,\n      } : undefined,\n      canViewMembers: canViewParticipants,\n      canViewStatistics: canViewStats,\n      isPreHistoryHidden: hiddenPrehistory,\n      members,\n      kickedMembers,\n      adminMembers,\n      groupCallId: call ? String(call.id) : undefined,\n      linkedChatId: linkedChatId ? buildApiPeerId(linkedChatId, 'chat') : undefined,\n      botCommands,\n      enabledReactions: availableReactions,\n      sendAsId: defaultSendAs ? getApiChatIdFromMtpPeer(defaultSendAs) : undefined,\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n      statisticsDcId: statsDc,\n      stickerSet: stickerset ? buildStickerSet(stickerset) : undefined,\n    },\n    users: [...(users || []), ...(bannedUsers || []), ...(adminUsers || [])],\n    userStatusesById: statusesById,\n    groupCall: call ? {\n      chatId: id,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call?.accessHash.toString(),\n      participants: {},\n      version: 0,\n      participantsCount: 0,\n      connectionState: 'disconnected',\n    } : undefined,\n    membersCount: participantsCount,\n  };\n}\n\nexport async function updateChatMutedState({\n  chat, isMuted, serverTimeOffset,\n}: {\n  chat: ApiChat; isMuted: boolean; serverTimeOffset: number;\n}) {\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyPeer({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil: isMuted ? MAX_INT_32 : 0 }),\n  }));\n\n  onUpdate({\n    '@type': 'updateNotifyExceptions',\n    chatId: chat.id,\n    isMuted,\n  });\n\n  void requestChatUpdate({\n    chat,\n    serverTimeOffset,\n    noLastMessage: true,\n  });\n}\n\nexport async function createChannel({\n  title, about = '', users,\n}: {\n  title: string; about?: string; users?: ApiUser[];\n}, noErrorUpdate = false): Promise<ApiChat | undefined> {\n  const result = await invokeRequest(new GramJs.channels.CreateChannel({\n    broadcast: true,\n    title,\n    about,\n  }), undefined, true);\n\n  // `createChannel` can return a lot of different update types according to docs,\n  // but currently channel creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChannel = result.chats[0];\n  if (!newChannel || !(newChannel instanceof GramJs.Channel)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created channel not found', result);\n    }\n    return undefined;\n  }\n\n  const channel = buildApiChatFromPreview(newChannel)!;\n\n  if (users?.length) {\n    try {\n      await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(channel.id, channel.accessHash) as GramJs.InputChannel,\n        users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n      }), undefined, noErrorUpdate);\n    } catch (err) {\n      // `noErrorUpdate` will cause an exception which we don't want either\n    }\n  }\n\n  return channel;\n}\n\nexport function joinChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.JoinChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true, true);\n}\n\nexport function deleteChatUser({\n  chat, user,\n}: {\n  chat: ApiChat; user: ApiUser;\n}) {\n  if (chat.type !== 'chatTypeBasicGroup') return undefined;\n  return invokeRequest(new GramJs.messages.DeleteChatUser({\n    chatId: buildInputEntity(chat.id, chat.accessHash) as BigInt.BigInteger,\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n  }), true);\n}\n\nexport function deleteChat({\n  chatId,\n}: {\n  chatId: string;\n}) {\n  return invokeRequest(new GramJs.messages.DeleteChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }), true);\n}\n\nexport function leaveChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.LeaveChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true);\n}\n\nexport function deleteChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.DeleteChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true);\n}\n\nexport async function createGroupChat({\n  title, users,\n}: {\n  title: string; users: ApiUser[];\n}): Promise<ApiChat | undefined> {\n  const result = await invokeRequest(new GramJs.messages.CreateChat({\n    title,\n    users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n  }), undefined, true);\n\n  // `createChat` can return a lot of different update types according to docs,\n  // but currently chat creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected chat creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChat = result.chats[0];\n  if (!newChat || !(newChat instanceof GramJs.Chat)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created chat not found', result);\n    }\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(newChat);\n}\n\nexport async function editChatPhoto({\n  chatId, accessHash, photo,\n}: {\n  chatId: string; accessHash?: string; photo: File;\n}) {\n  const uploadedPhoto = await uploadFile(photo);\n  const inputEntity = buildInputEntity(chatId, accessHash);\n\n  return invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditPhoto({\n        channel: inputEntity as GramJs.InputChannel,\n        photo: new GramJs.InputChatUploadedPhoto({\n          file: uploadedPhoto,\n        }),\n      })\n      : new GramJs.messages.EditChatPhoto({\n        chatId: inputEntity as BigInt.BigInteger,\n        photo: new GramJs.InputChatUploadedPhoto({\n          file: uploadedPhoto,\n        }),\n      }),\n    true,\n  );\n}\n\nexport async function toggleChatPinned({\n  chat,\n  shouldBePinned,\n}: {\n  chat: ApiChat;\n  shouldBePinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.ToggleDialogPin({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    pinned: shouldBePinned || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: chat.id,\n      isPinned: shouldBePinned,\n    });\n  }\n}\n\nexport function toggleChatArchived({\n  chat, folderId,\n}: {\n  chat: ApiChat; folderId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.folders.EditPeerFolders({\n    folderPeers: [new GramJs.InputFolderPeer({\n      peer: buildInputPeer(id, accessHash),\n      folderId,\n    })],\n  }), true);\n}\n\nexport async function fetchChatFolders() {\n  const result = await invokeRequest(new GramJs.messages.GetDialogFilters());\n\n  if (!result) {\n    return undefined;\n  }\n\n  const defaultFolderPosition = result.findIndex((l) => l instanceof GramJs.DialogFilterDefault);\n  const dialogFilters = result.filter((df): df is GramJs.DialogFilter => df instanceof GramJs.DialogFilter);\n  const orderedIds = dialogFilters.map(({ id }) => id);\n  if (defaultFolderPosition !== -1) {\n    orderedIds.splice(defaultFolderPosition, 0, ALL_FOLDER_ID);\n  }\n  return {\n    byId: buildCollectionByKey(\n      dialogFilters\n        .map(buildApiChatFolder), 'id',\n    ) as Record<number, ApiChatFolder>,\n    orderedIds,\n  };\n}\n\nexport async function fetchRecommendedChatFolders() {\n  const results = await invokeRequest(new GramJs.messages.GetSuggestedDialogFilters());\n\n  if (!results) {\n    return undefined;\n  }\n\n  return results.map(buildApiChatFolderFromSuggested).filter(Boolean);\n}\n\nexport async function editChatFolder({\n  id,\n  folderUpdate,\n}: {\n  id: number;\n  folderUpdate: ApiChatFolder;\n}) {\n  const filter = buildFilterFromApiFolder(folderUpdate);\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n    id,\n    filter,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: folderUpdate,\n    });\n  }\n}\n\nexport async function deleteChatFolder(id: number) {\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n    id,\n    filter: undefined,\n  }));\n  const recommendedChatFolders = await fetchRecommendedChatFolders();\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: undefined,\n    });\n  }\n  if (recommendedChatFolders) {\n    onUpdate({\n      '@type': 'updateRecommendedChatFolders',\n      folders: recommendedChatFolders,\n    });\n  }\n}\n\nexport async function toggleDialogUnread({\n  chat, hasUnreadMark,\n}: {\n  chat: ApiChat; hasUnreadMark: boolean | undefined;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.MarkDialogUnread({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    unread: hasUnreadMark || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { hasUnreadMark },\n    });\n  }\n}\n\nexport async function getChatByPhoneNumber(phoneNumber: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolvePhone({\n    phone: phoneNumber,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nexport async function getChatByUsername(username: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolveUsername({\n    username,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nfunction processResolvedPeer(result?: GramJs.contacts.TypeResolvedPeer) {\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, chats } = result;\n\n  const chat = chats.length\n    ? buildApiChatFromPreview(chats[0])\n    : buildApiChatFromPreview(users[0]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return chat;\n}\n\nexport function togglePreHistoryHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.TogglePreHistoryHidden({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function updateChatDefaultBannedRights({\n  chat, bannedRights,\n}: { chat: ApiChat; bannedRights: ApiChatBannedRights }) {\n  const { id, accessHash } = chat;\n  const peer = buildInputPeer(id, accessHash);\n\n  return invokeRequest(new GramJs.messages.EditChatDefaultBannedRights({\n    peer,\n    bannedRights: buildChatBannedRights(bannedRights),\n  }), true);\n}\n\nexport function updateChatMemberBannedRights({\n  chat, user, bannedRights, untilDate,\n}: { chat: ApiChat; user: ApiUser; bannedRights: ApiChatBannedRights; untilDate?: number }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const participant = buildInputPeer(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditBanned({\n    channel,\n    participant,\n    bannedRights: buildChatBannedRights(bannedRights, untilDate),\n  }), true);\n}\n\nexport function updateChatAdmin({\n  chat, user, adminRights, customTitle = '',\n}: { chat: ApiChat; user: ApiUser; adminRights: ApiChatAdminRights; customTitle: string }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const userId = buildInputEntity(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditAdmin({\n    channel,\n    userId,\n    adminRights: buildChatAdminRights(adminRights),\n    rank: customTitle,\n  }), true);\n}\n\nexport async function updateChatTitle(chat: ApiChat, title: string) {\n  const inputEntity = buildInputEntity(chat.id, chat.accessHash);\n  await invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditTitle({\n        channel: inputEntity as GramJs.InputChannel,\n        title,\n      }) : new GramJs.messages.EditChatTitle({\n        chatId: inputEntity as BigInt.BigInteger,\n        title,\n      }),\n    true,\n  );\n}\n\nexport async function updateChatAbout(chat: ApiChat, about: string) {\n  const result = await invokeRequest(new GramJs.messages.EditChatAbout({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    about,\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      about,\n    },\n  });\n}\n\nexport function toggleSignatures({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.ToggleSignatures({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\ntype ChannelMembersFilter =\n  'kicked'\n  | 'admin'\n  | 'recent';\n\nexport async function fetchMembers(\n  chatId: string,\n  accessHash: string,\n  memberFilter: ChannelMembersFilter = 'recent',\n  offset?: number,\n) {\n  let filter: GramJs.TypeChannelParticipantsFilter;\n\n  switch (memberFilter) {\n    case 'kicked':\n      filter = new GramJs.ChannelParticipantsKicked({ q: '' });\n      break;\n    case 'admin':\n      filter = new GramJs.ChannelParticipantsAdmins();\n      break;\n    default:\n      filter = new GramJs.ChannelParticipantsRecent();\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.channels.GetParticipants({\n    channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n    filter,\n    offset,\n    limit: MEMBERS_LOAD_SLICE,\n  }));\n\n  if (!result || result instanceof GramJs.channels.ChannelParticipantsNotModified) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    members: buildChatMembers(result),\n    users,\n    userStatusesById,\n  };\n}\n\nexport async function fetchGroupsForDiscussion() {\n  const result = await invokeRequest(new GramJs.channels.GetGroupsForDiscussion());\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.chats.map((chat) => buildApiChatFromPreview(chat));\n}\n\nexport function setDiscussionGroup({\n  channel,\n  chat,\n}: {\n  channel: ApiChat;\n  chat?: ApiChat;\n}) {\n  return invokeRequest(new GramJs.channels.SetDiscussionGroup({\n    broadcast: buildInputPeer(channel.id, channel.accessHash),\n    group: chat ? buildInputPeer(chat.id, chat.accessHash) : new GramJs.InputChannelEmpty(),\n  }), true);\n}\n\nexport async function migrateChat(chat: ApiChat) {\n  const result = await invokeRequest(\n    new GramJs.messages.MigrateChat({ chatId: buildInputEntity(chat.id) as BigInt.BigInteger }),\n    undefined,\n    true,\n  );\n\n  // `migrateChat` can return a lot of different update types according to docs,\n  // but currently chat migrations returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!result || !(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return buildApiChatFromPreview(result.chats[1]);\n}\n\nexport async function openChatByInvite(hash: string) {\n  const result = await invokeRequest(new GramJs.messages.CheckChatInvite({ hash }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  let chat: ApiChat | undefined;\n\n  if (result instanceof GramJs.ChatInvite) {\n    const {\n      photo, participantsCount, title, channel, requestNeeded, about, megagroup,\n    } = result;\n\n    if (photo instanceof GramJs.Photo) {\n      addPhotoToLocalDb(result.photo);\n    }\n\n    onUpdate({\n      '@type': 'showInvite',\n      data: {\n        title,\n        about,\n        hash,\n        participantsCount,\n        isChannel: channel && !megagroup,\n        isRequestNeeded: requestNeeded,\n        ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n      },\n    });\n  } else {\n    chat = buildApiChatFromPreview(result.chat);\n\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return { chatId: chat.id };\n}\n\nexport async function addChatMembers(chat: ApiChat, users: ApiUser[], noErrorUpdate = false) {\n  try {\n    if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n      return await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        users: users.map((user) => buildInputEntity(user.id, user.accessHash)) as GramJs.InputUser[],\n      }), true, noErrorUpdate);\n    }\n\n    return await Promise.all(users.map((user) => {\n      return invokeRequest(new GramJs.messages.AddChatUser({\n        chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n        userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n      }), true, noErrorUpdate);\n    }));\n  } catch (err) {\n    // `noErrorUpdate` will cause an exception which we don't want either\n    return undefined;\n  }\n}\n\nexport function deleteChatMember(chat: ApiChat, user: ApiUser) {\n  if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n    return updateChatMemberBannedRights({\n      chat,\n      user,\n      bannedRights: {\n        viewMessages: true,\n        sendMessages: true,\n        sendMedia: true,\n        sendStickers: true,\n        sendGifs: true,\n        sendGames: true,\n        sendInline: true,\n        embedLinks: true,\n        sendPolls: true,\n        changeInfo: true,\n        inviteUsers: true,\n        pinMessages: true,\n      },\n      untilDate: MAX_INT_32,\n    });\n  } else {\n    return invokeRequest(new GramJs.messages.DeleteChatUser({\n      chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n      userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    }), true);\n  }\n}\n\nexport function toggleJoinToSend(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinToSend({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function toggleJoinRequest(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinRequest({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nfunction preparePeers(\n  result: GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs,\n) {\n  const store: Record<string, GramJs.TypeChat | GramJs.TypeUser> = {};\n\n  result.chats.forEach((chat) => {\n    store[`chat${chat.id}`] = chat;\n  });\n\n  result.users.forEach((user) => {\n    store[`user${user.id}`] = user;\n  });\n\n  return store;\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs |\n  GramJs.messages.ChatFull | GramJs.contacts.Found |\n  GramJs.contacts.ResolvedPeer | GramJs.channels.ChannelParticipants |\n  GramJs.messages.Chats | GramJs.messages.ChatsSlice | GramJs.TypeUpdates\n)) {\n  if ('users' in result) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n  }\n\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  if ('messages' in result) {\n    result.messages.forEach((message) => {\n      if (message instanceof GramJs.Message && isMessageWithMedia(message)) {\n        addMessageToLocalDb(message);\n      }\n    });\n  }\n}\n\nexport async function importChatInvite({ hash }: { hash: string }) {\n  const updates = await invokeRequest(new GramJs.messages.ImportChatInvite({ hash }));\n  if (!(updates instanceof GramJs.Updates) || !updates.chats.length) {\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(updates.chats[0]);\n}\n\nexport function setChatEnabledReactions({\n  chat, enabledReactions,\n}: {\n  chat: ApiChat; enabledReactions: string[];\n}) {\n  return invokeRequest(new GramJs.messages.SetChatAvailableReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    availableReactions: enabledReactions,\n  }), true);\n}\n\nexport function toggleIsProtected({\n  chat, isProtected,\n}: { chat: ApiChat; isProtected: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.ToggleNoForwards({\n    peer: buildInputPeer(id, accessHash),\n    enabled: isProtected,\n  }), true);\n}\n","import { pause } from './schedulers';\n\n// Polyfill for Safari: `File` is not available in web worker\nif (typeof File === 'undefined') {\n  // eslint-disable-next-line no-global-assign, no-restricted-globals, func-names\n  self.File = class extends Blob {\n    name: string;\n\n    constructor(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag) {\n      if (options) {\n        const { type, ...rest } = options;\n        super(fileBits, { type });\n        Object.assign(this, rest);\n      } else {\n        super(fileBits);\n      }\n\n      this.name = fileName;\n    }\n  } as typeof File;\n}\n\nexport function dataUriToBlob(dataUri: string) {\n  const arr = dataUri.split(',');\n  const mime = arr[0].match(/:(.*?);/)![1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new Blob([u8arr], { type: mime });\n}\n\nexport function blobToDataUri(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target || {};\n      if (typeof result === 'string') {\n        resolve(result);\n      }\n\n      reject(new Error('Failed to read blob'));\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\nexport function blobToFile(blob: Blob, fileName: string) {\n  return new File([blob], fileName, {\n    lastModified: Date.now(),\n    type: blob.type,\n  });\n}\n\nexport function preloadImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n\nexport function preloadVideo(url: string): Promise<HTMLVideoElement> {\n  return new Promise((resolve, reject) => {\n    const video = document.createElement('video');\n    video.volume = 0;\n    video.onloadedmetadata = () => resolve(video);\n    video.onerror = reject;\n    video.src = url;\n  });\n}\n\nexport async function createPosterForVideo(url: string): Promise<string | undefined> {\n  const video = await preloadVideo(url);\n\n  return Promise.race([\n    pause(2000) as Promise<undefined>,\n    new Promise<string | undefined>((resolve, reject) => {\n      video.onseeked = () => {\n        if (!video.videoWidth || !video.videoHeight) {\n          resolve(undefined);\n        }\n\n        const canvas = document.createElement('canvas');\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const ctx = canvas.getContext('2d')!;\n        ctx.drawImage(video, 0, 0);\n        resolve(canvas.toDataURL('image/jpeg'));\n      };\n      video.onerror = reject;\n      video.currentTime = Math.min(video.duration, 1);\n    }),\n  ]);\n}\n\nexport async function fetchBlob(blobUrl: string) {\n  const response = await fetch(blobUrl);\n  return response.blob();\n}\n\nexport async function fetchFile(blobUrl: string, fileName: string) {\n  const blob = await fetchBlob(blobUrl);\n  return blobToFile(blob, fileName);\n}\n\nexport function imgToCanvas(img: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.drawImage(img, 0, 0);\n\n  return canvas;\n}\n","import {Api as GramJs} from '../../../lib/gramjs';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGlobalMessageSearchType,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageSearchType,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPoll,\n  ApiReportReason,\n  ApiSendMessageAction,\n  ApiSponsoredMessage,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiUser,\n  ApiVideo,\n  OnApiUpdate,\n} from '../../types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  DEBUG,\n  MENTION_UNREAD_SLICE,\n  PINNED_MESSAGES_LIMIT,\n  REACTION_UNREAD_SLICE,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {invokeRequest, uploadFile} from './client';\nimport {\n  buildApiMessage,\n  buildApiSponsoredMessage,\n  buildLocalForwardedMessage,\n  buildLocalMessage,\n  buildWebPage,\n} from '../apiBuilders/messages';\nimport {buildApiUser} from '../apiBuilders/users';\nimport {\n  buildInputEntity,\n  buildInputPeer,\n  buildInputPollFromExisting,\n  buildInputReportReason,\n  buildMtpMessageEntity,\n  buildSendMessageAction,\n  generateRandomBigInt,\n  getEntityTypeById,\n  isMessageWithMedia,\n  isServiceMessageWithMedia,\n} from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport {buildApiChatFromPreview} from '../apiBuilders/chats';\nimport {fetchFile} from '../../../util/files';\nimport {\n  addEntitiesWithPhotosToLocalDb,\n  addMessageToLocalDb,\n  deserializeBytes,\n  resolveMessageApiChatId,\n} from '../helpers';\nimport {interpolateArray} from '../../../util/waveform';\nimport {requestChatUpdate} from './chats';\nimport {getApiChatIdFromMtpPeer} from '../apiBuilders/peers';\n\nconst FAST_SEND_TIMEOUT = 1000;\nconst INPUT_WAVEFORM_LENGTH = 63;\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchMessages({\n  chat,\n  threadId,\n  ...pagination\n}: {\n  chat: ApiChat;\n  threadId?: number;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n}) {\n  const RequestClass = threadId === MAIN_THREAD_ID ? GramJs.messages.GetHistory : GramJs.messages.GetReplies;\n  let result;\n\n  try {\n    result = await invokeRequest(new RequestClass({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      ...(threadId !== MAIN_THREAD_ID && {\n        msgId: threadId,\n      }),\n      ...pagination,\n    }), undefined, true);\n  } catch (err: any) {\n    if (err.message === 'CHANNEL_PRIVATE') {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat: {\n          isRestricted: true,\n        },\n      });\n    }\n  }\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter<ApiMessage>(Boolean as any);\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n  const threadInfos = messages.map(({ threadInfo }) => threadInfo).filter<ApiThreadInfo>(Boolean as any);\n\n  return {\n    messages,\n    users,\n    chats,\n    threadInfos,\n  };\n}\n\nexport async function fetchMessage({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  let result;\n  try {\n    result = await invokeRequest(\n      isChannel\n        ? new GramJs.channels.GetMessages({\n          channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n      undefined,\n      true,\n    );\n  } catch (err: any) {\n    const { message } = err;\n\n    // When fetching messages for the bot @replies, there may be situations when the user was banned\n    // in the comment group or this group was deleted\n    if (message !== 'CHANNEL_PRIVATE') {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message,\n          isSlowMode: false,\n          hasErrorKey: true,\n        },\n      });\n    }\n  }\n\n  if (!result || result instanceof GramJs.messages.MessagesNotModified) {\n    return undefined;\n  }\n\n  const mtpMessage = result.messages[0];\n  if (!mtpMessage) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.MessageEmpty) {\n    return MESSAGE_DELETED;\n  }\n\n  const message = mtpMessage && buildApiMessage(mtpMessage);\n  if (!message) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.Message) {\n    addMessageToLocalDb(mtpMessage);\n  }\n\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n\n  return { message, users };\n}\n\nlet queue = Promise.resolve();\n\nexport function sendMessage(\n  {\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    isSilent,\n    scheduledAt,\n    groupedId,\n    noWebPage,\n    sendAs,\n    serverTimeOffset,\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyingTo?: number;\n    replyingToTopId?: number;\n    attachment?: ApiAttachment;\n    sticker?: ApiSticker;\n    gif?: ApiVideo;\n    poll?: ApiNewPoll;\n    contact?: ApiContact;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    groupedId?: string;\n    noWebPage?: boolean;\n    sendAs?: ApiUser | ApiChat;\n    serverTimeOffset?: number;\n  },\n  onProgress?: ApiOnProgress,\n) {\n  debugger\n  const localMessage = buildLocalMessage(\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    groupedId,\n    scheduledAt,\n    sendAs,\n    serverTimeOffset,\n  );\n  debugger\n  onUpdate({\n    '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n    id: localMessage.id,\n    chatId: chat.id,\n    message: {\n      ...localMessage,\n      sendingState: 'messageSendingStatePending',\n    },\n  });\n\n  // This is expected to arrive after `updateMessageSendSucceeded` which replaces the local ID,\n  // so in most cases this will be simply ignored\n  setTimeout(() => {\n    // onUpdate({\n    //   '@type': localMessage.isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n    //   id: localMessage.id,\n    //   chatId: chat.id,\n    //   message: {\n    //     sendingState: 'messageSendingStatePending',\n    //   },\n    // });\n    //\n    // onUpdate({\n    //   '@type': 'updateMessage',\n    //   id: localMessage.id,\n    //   chatId: chat.id,\n    //   message: {\n    //     sendingState: undefined,\n    //   },\n    // });\n  }, FAST_SEND_TIMEOUT);\n\n  const randomId = generateRandomBigInt();\n  localDb.localMessages[String(randomId)] = localMessage;\n\n  if (groupedId) {\n    return sendGroupedMedia({\n      chat, text, entities, replyingTo, attachment: attachment!, groupedId, isSilent, scheduledAt,\n    }, randomId, localMessage, onProgress);\n  }\n\n  return localMessage\n  const prevQueue = queue;\n  queue = (async () => {\n    // let media: GramJs.TypeInputMedia | undefined;\n    // if (attachment) {\n    //   try {\n    //     media = await uploadMedia(localMessage, attachment, onProgress!);\n    //   } catch (err) {\n    //     if (DEBUG) {\n    //       // eslint-disable-next-line no-console\n    //       console.warn(err);\n    //     }\n    //\n    //     await prevQueue;\n    //\n    //     return;\n    //   }\n    // } else if (sticker) {\n    //   media = buildInputMediaDocument(sticker);\n    // } else if (gif) {\n    //   media = buildInputMediaDocument(gif);\n    // } else if (poll) {\n    //   media = buildInputPoll(poll, randomId);\n    // } else if (contact) {\n    //   media = new GramJs.InputMediaContact({\n    //     phoneNumber: contact.phoneNumber,\n    //     firstName: contact.firstName,\n    //     lastName: contact.lastName,\n    //     vcard: '',\n    //   });\n    // }\n    //\n    // await prevQueue;\n    //\n    // const RequestClass = media ? GramJs.messages.SendMedia : GramJs.messages.SendMessage;\n    //\n    // await invokeRequest(new RequestClass({\n    //   clearDraft: true,\n    //   message: text || '',\n    //   entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n    //   peer: buildInputPeer(chat.id, chat.accessHash),\n    //   randomId,\n    //   ...(isSilent && { silent: isSilent }),\n    //   ...(scheduledAt && { scheduleDate: scheduledAt }),\n    //   ...(replyingTo && { replyToMsgId: replyingTo }),\n    //   ...(media && { media }),\n    //   ...(noWebPage && { noWebpage: noWebPage }),\n    //   ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    // }), true);\n  })();\n\n  return queue;\n}\n\nexport function updateMessageState(\n  {\n    chatId,\n    localMessageId,\n    localMessageIsScheduled,\n    localMessageIsSendOk,\n  }: {\n    chatId: string;\n    localMessageId: number;\n    localMessageIsScheduled: boolean;\n    localMessageIsSendOk: boolean;\n  }\n) {\n  onUpdate({\n    '@type': localMessageIsScheduled ? 'newScheduledMessage' : 'newMessage',\n    id: localMessageId,\n    chatId: chatId,\n    message: {\n      sendingState: localMessageIsSendOk ? undefined : \"messageSendingStateFailed\",\n    },\n  });\n\n}\n\nconst groupedUploads: Record<string, {\n  counter: number;\n  singleMediaByIndex: Record<number, GramJs.InputSingleMedia>;\n}> = {};\n\nfunction sendGroupedMedia(\n  {\n    chat,\n    text,\n    entities,\n    replyingTo,\n    attachment,\n    groupedId,\n    isSilent,\n    scheduledAt,\n    sendAs,\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyingTo?: number;\n    attachment: ApiAttachment;\n    groupedId: string;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    sendAs?: ApiUser | ApiChat;\n  },\n  randomId: GramJs.long,\n  localMessage: ApiMessage,\n  onProgress?: ApiOnProgress,\n) {\n  let groupIndex = -1;\n  if (!groupedUploads[groupedId]) {\n    groupedUploads[groupedId] = {\n      counter: 0,\n      singleMediaByIndex: {},\n    };\n  }\n\n  groupIndex = groupedUploads[groupedId].counter++;\n\n  const prevQueue = queue;\n  queue = (async () => {\n    let media;\n    try {\n      media = await uploadMedia(localMessage, attachment, onProgress!);\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn(err);\n      }\n\n      groupedUploads[groupedId].counter--;\n\n      await prevQueue;\n\n      return;\n    }\n\n    const inputMedia = await fetchInputMedia(\n      buildInputPeer(chat.id, chat.accessHash),\n      media as GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n    );\n\n    await prevQueue;\n\n    if (!inputMedia) {\n      groupedUploads[groupedId].counter--;\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn('Failed to upload grouped media');\n      }\n\n      return;\n    }\n\n    groupedUploads[groupedId].singleMediaByIndex[groupIndex] = new GramJs.InputSingleMedia({\n      media: inputMedia,\n      randomId,\n      message: text || '',\n      entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n    });\n\n    if (Object.keys(groupedUploads[groupedId].singleMediaByIndex).length < groupedUploads[groupedId].counter) {\n      return;\n    }\n\n    const { singleMediaByIndex } = groupedUploads[groupedId];\n    delete groupedUploads[groupedId];\n\n    await invokeRequest(new GramJs.messages.SendMultiMedia({\n      clearDraft: true,\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      multiMedia: Object.values(singleMediaByIndex), // Object keys are usually ordered\n      replyToMsgId: replyingTo,\n      ...(isSilent && { silent: isSilent }),\n      ...(scheduledAt && { scheduleDate: scheduledAt }),\n      ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    }), true);\n  })();\n\n  return queue;\n}\n\nasync function fetchInputMedia(\n  peer: GramJs.TypeInputPeer,\n  uploadedMedia: GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n) {\n  const messageMedia = await invokeRequest(new GramJs.messages.UploadMedia({\n    peer,\n    media: uploadedMedia,\n  }));\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaPhoto\n    && messageMedia.photo\n    && messageMedia.photo instanceof GramJs.Photo)\n  ) {\n    const { photo: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaPhoto({\n      id: new GramJs.InputPhoto({ id, accessHash, fileReference }),\n    });\n  }\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaDocument\n    && messageMedia.document\n    && messageMedia.document instanceof GramJs.Document)\n  ) {\n    const { document: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaDocument({\n      id: new GramJs.InputDocument({ id, accessHash, fileReference }),\n    });\n  }\n\n  return undefined;\n}\n\nexport async function editMessage({\n  chat,\n  message,\n  text,\n  entities,\n  noWebPage,\n  serverTimeOffset,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  text: string;\n  entities?: ApiMessageEntity[];\n  noWebPage?: boolean;\n  serverTimeOffset: number;\n}) {\n  const isScheduled = message.date * 1000 > Date.now() + serverTimeOffset * 1000;\n  const messageUpdate: Partial<ApiMessage> = {\n    content: {\n      ...message.content,\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n    },\n  };\n\n  onUpdate({\n    '@type': isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n    id: message.id,\n    chatId: chat.id,\n    message: messageUpdate,\n  });\n\n  // TODO Revise intersecting with scheduled\n  localDb.localMessages[message.id] = { ...message, ...messageUpdate };\n\n  const mtpEntities = entities && entities.map(buildMtpMessageEntity);\n\n  await invokeRequest(new GramJs.messages.EditMessage({\n    message: text || '',\n    entities: mtpEntities,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: message.id,\n    ...(isScheduled && { scheduleDate: message.date }),\n    ...(noWebPage && { noWebpage: noWebPage }),\n  }), true);\n}\n\nexport async function rescheduleMessage({\n  chat,\n  message,\n  scheduledAt,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  scheduledAt: number;\n}) {\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: message.id,\n    scheduleDate: scheduledAt,\n  }), true);\n}\n\nasync function uploadMedia(localMessage: ApiMessage, attachment: ApiAttachment, onProgress: ApiOnProgress) {\n  const {\n    filename, blobUrl, mimeType, quick, voice, audio, previewBlobUrl,\n  } = attachment;\n\n  const patchedOnProgress: ApiOnProgress = (progress) => {\n    if (onProgress.isCanceled) {\n      patchedOnProgress.isCanceled = true;\n    } else {\n      onProgress(progress, localMessage.id);\n    }\n  };\n\n  const file = await fetchFile(blobUrl, filename);\n  const inputFile = await uploadFile(file, patchedOnProgress);\n\n  const thumbFile = previewBlobUrl && await fetchFile(previewBlobUrl, filename);\n  const thumb = thumbFile ? await uploadFile(thumbFile) : undefined;\n\n  const attributes: GramJs.TypeDocumentAttribute[] = [new GramJs.DocumentAttributeFilename({ fileName: filename })];\n  if (quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      return new GramJs.InputMediaUploadedPhoto({ file: inputFile });\n    }\n\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      const { width, height, duration } = quick;\n      if (duration !== undefined) {\n        attributes.push(new GramJs.DocumentAttributeVideo({\n          duration,\n          w: width,\n          h: height,\n          supportsStreaming: true,\n        }));\n      }\n    }\n  }\n\n  if (audio) {\n    const { duration, title, performer } = audio;\n    attributes.push(new GramJs.DocumentAttributeAudio({\n      duration,\n      title,\n      performer,\n    }));\n  }\n\n  if (voice) {\n    const { duration, waveform } = voice;\n    const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n    attributes.push(new GramJs.DocumentAttributeAudio({\n      voice: true,\n      duration,\n      waveform: Buffer.from(inputWaveform),\n    }));\n  }\n\n  return new GramJs.InputMediaUploadedDocument({\n    file: inputFile,\n    mimeType,\n    attributes,\n    thumb,\n  });\n}\n\nexport async function pinMessage({\n  chat, messageId, isUnpin, isOneSide, isSilent,\n}: { chat: ApiChat; messageId: number; isUnpin: boolean; isOneSide: boolean; isSilent: boolean }) {\n  await invokeRequest(new GramJs.messages.UpdatePinnedMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(isUnpin && { unpin: true }),\n    ...(isOneSide && { pmOneside: true }),\n    ...(isSilent && { silent: true }),\n  }), true);\n}\n\nexport async function unpinAllMessages({ chat }: { chat: ApiChat }) {\n  await invokeRequest(new GramJs.messages.UnpinAllMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport async function deleteMessages({\n  chat, messageIds, shouldDeleteForAll,\n}: {\n  chat: ApiChat; messageIds: number[]; shouldDeleteForAll?: boolean;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteMessages({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.DeleteMessages({\n        id: messageIds,\n        ...(shouldDeleteForAll && { revoke: true }),\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteMessages',\n    ids: messageIds,\n    ...(isChannel && { chatId: chat.id }),\n  });\n}\n\nexport async function deleteScheduledMessages({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const result = await invokeRequest(\n    new GramJs.messages.DeleteScheduledMessages({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: messageIds,\n    }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteScheduledMessages',\n    ids: messageIds,\n    chatId: chat.id,\n  });\n}\n\nexport async function deleteHistory({\n  chat, shouldDeleteForAll, maxId,\n}: {\n  chat: ApiChat; shouldDeleteForAll?: boolean; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteHistory({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        maxId,\n      })\n      : new GramJs.messages.DeleteHistory({\n        peer: buildInputPeer(chat.id, chat.accessHash),\n        ...(shouldDeleteForAll && { revoke: true }),\n        ...(!shouldDeleteForAll && { just_clear: true }),\n        maxId,\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteHistory',\n    chatId: chat.id,\n  });\n}\n\nexport async function reportMessages({\n  peer, messageIds, reason, description,\n}: {\n  peer: ApiChat | ApiUser; messageIds: number[]; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.Report({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: messageIds,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function sendMessageAction({\n  peer, threadId, action,\n}: {\n  peer: ApiChat | ApiUser; threadId?: number; action: ApiSendMessageAction;\n}) {\n  const gramAction = buildSendMessageAction(action);\n  if (!gramAction) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('Unsupported message action', action);\n    }\n    return undefined;\n  }\n\n  const result = await invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    topMsgId: threadId,\n    action: gramAction,\n  }));\n  return result;\n}\n\nexport async function markMessageListRead({\n  chat, threadId, maxId, serverTimeOffset,\n}: {\n  chat: ApiChat; threadId: number; maxId?: number; serverTimeOffset: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  if (isChannel && threadId === MAIN_THREAD_ID) {\n    await invokeRequest(new GramJs.channels.ReadHistory({\n      channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      maxId,\n    }));\n  } else if (isChannel) {\n    await invokeRequest(new GramJs.messages.ReadDiscussion({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: threadId,\n      readMaxId: maxId,\n    }));\n  } else {\n    await invokeRequest(new GramJs.messages.ReadHistory({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      maxId,\n    }));\n  }\n\n  if (threadId === MAIN_THREAD_ID) {\n    void requestChatUpdate({ chat, serverTimeOffset, noLastMessage: true });\n  } else {\n    void requestThreadInfoUpdate({ chat, threadId });\n  }\n}\n\nexport async function markMessagesRead({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  await invokeRequest(\n    isChannel\n      ? new GramJs.channels.ReadMessageContents({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.ReadMessageContents({\n        id: messageIds,\n      }),\n  );\n\n  onUpdate({\n    ...(isChannel ? {\n      '@type': 'updateChannelMessages',\n      channelId: chat.id,\n    } : {\n      '@type': 'updateCommonBoxMessages',\n    }),\n    ids: messageIds,\n    messageUpdate: {\n      hasUnreadMention: false,\n      isMediaUnread: false,\n    },\n  });\n}\n\nexport async function requestThreadInfoUpdate({\n  chat, threadId,\n}: {\n  chat: ApiChat; threadId: number;\n}) {\n  const [topMessageResult, repliesResult] = await Promise.all([\n    invokeRequest(new GramJs.messages.GetDiscussionMessage({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: threadId,\n    })),\n    invokeRequest(new GramJs.messages.GetReplies({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: threadId,\n      offsetId: 1,\n      addOffset: -1,\n      limit: 1,\n    })),\n  ]);\n\n  if (!topMessageResult || !topMessageResult.messages.length) {\n    return undefined;\n  }\n\n  const discussionChatId = resolveMessageApiChatId(topMessageResult.messages[0]);\n  if (!discussionChatId) {\n    return undefined;\n  }\n\n  onUpdate({\n    '@type': 'updateThreadInfo',\n    chatId: discussionChatId,\n    threadId,\n    threadInfo: {\n      threadId,\n      topMessageId: topMessageResult.messages[topMessageResult.messages.length - 1].id,\n      lastReadInboxMessageId: topMessageResult.readInboxMaxId,\n      messagesCount: (repliesResult instanceof GramJs.messages.ChannelMessages) ? repliesResult.count : undefined,\n    },\n    firstMessageId: repliesResult && 'messages' in repliesResult && repliesResult.messages.length\n      ? repliesResult.messages[0].id\n      : undefined,\n  });\n\n  const chats = topMessageResult.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n  chats.forEach((newChat) => {\n    onUpdate({\n      '@type': 'updateChat',\n      id: newChat.id,\n      chat: newChat,\n      noTopChatsRequest: true,\n    });\n  });\n\n  return {\n    discussionChatId,\n  };\n}\n\nexport async function searchMessagesLocal({\n  chat, type, query, topMessageId, minDate, maxDate, ...pagination\n}: {\n  chat: ApiChat;\n  type?: ApiMessageSearchType | ApiGlobalMessageSearchType;\n  query?: string;\n  topMessageId?: number;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'profilePhoto':\n      filter = new GramJs.InputMessagesFilterChatPhotos();\n      break;\n    case 'text':\n    default: {\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const result = await invokeRequest(new GramJs.messages.Search({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    filter,\n    q: query || '',\n    topMsgId: topMessageId,\n    minDate,\n    maxDate,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const messages = result.messages.map(buildApiMessage).filter<ApiMessage>(Boolean as any);\n\n  let totalCount = messages.length;\n  let nextOffsetId: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextOffsetId = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    chats,\n    users,\n    messages,\n    totalCount,\n    nextOffsetId,\n  };\n}\n\nexport async function searchMessagesGlobal({\n  query, offsetRate = 0, limit, type = 'text', minDate, maxDate,\n}: {\n  query: string;\n  offsetRate?: number;\n  limit: number;\n  type?: ApiGlobalMessageSearchType;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'text':\n    default: {\n      if (!query && !(maxDate && minDate)) {\n        return undefined;\n      }\n\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const result = await invokeRequest(new GramJs.messages.SearchGlobal({\n    q: query,\n    offsetRate,\n    offsetPeer: new GramJs.InputPeerEmpty(),\n    limit,\n    filter,\n    folderId: ALL_FOLDER_ID,\n    minDate,\n    maxDate,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: result.chats,\n    users: result.users,\n    messages: result.messages,\n  } as GramJs.messages.Messages);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const messages = result.messages.map(buildApiMessage).filter<ApiMessage>(Boolean as any);\n\n  let totalCount = messages.length;\n  let nextRate: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextRate = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    messages,\n    users,\n    chats,\n    totalCount,\n    nextRate: 'nextRate' in result && result.nextRate ? result.nextRate : nextRate,\n  };\n}\n\nexport async function fetchWebPagePreview({ message }: { message: string }) {\n  const preview = await invokeRequest(new GramJs.messages.GetWebPagePreview({\n    message,\n  }));\n\n  return preview && buildWebPage(preview);\n}\n\nexport async function sendPollVote({\n  chat, messageId, options,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  options: string[];\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendVote({\n    peer: buildInputPeer(id, accessHash),\n    msgId: messageId,\n    options: options.map(deserializeBytes),\n  }), true);\n}\n\nexport async function closePoll({\n  chat, messageId, poll,\n} : {\n  chat: ApiChat;\n  messageId: number;\n  poll: ApiPoll;\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    media: buildInputPollFromExisting(poll, true),\n  }));\n}\n\nexport async function loadPollOptionResults({\n  chat, messageId, option, offset, limit, shouldResetVoters,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  option?: string;\n  offset?: string;\n  limit?: number;\n  shouldResetVoters?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPollVotes({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    ...(option && { option: deserializeBytes(option) }),\n    ...(offset && { offset }),\n    ...(limit && { limit }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: [] as GramJs.TypeChat[],\n    users: result.users,\n    messages: [] as GramJs.Message[],\n  } as GramJs.messages.Messages);\n\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const votes = result.votes.map((vote) => ({\n    userId: vote.userId,\n    date: vote.date,\n  }));\n\n  return {\n    count: result.count,\n    votes,\n    users,\n    nextOffset: result.nextOffset,\n    shouldResetVoters,\n  };\n}\n\nexport async function forwardMessages({\n  fromChat,\n  toChat,\n  messages,\n  serverTimeOffset,\n  isSilent,\n  scheduledAt,\n  sendAs,\n  withMyScore,\n}: {\n  fromChat: ApiChat;\n  toChat: ApiChat;\n  messages: ApiMessage[];\n  serverTimeOffset: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiUser | ApiChat;\n  withMyScore?: boolean;\n}) {\n  const messageIds = messages.map(({ id }) => id);\n  const randomIds = messages.map(generateRandomBigInt);\n\n  messages.forEach((message, index) => {\n    const localMessage = buildLocalForwardedMessage(toChat, message, serverTimeOffset, scheduledAt);\n    localDb.localMessages[String(randomIds[index])] = localMessage;\n\n    onUpdate({\n      '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n      id: localMessage.id,\n      chatId: toChat.id,\n      message: localMessage,\n    });\n  });\n\n  await invokeRequest(new GramJs.messages.ForwardMessages({\n    fromPeer: buildInputPeer(fromChat.id, fromChat.accessHash),\n    toPeer: buildInputPeer(toChat.id, toChat.accessHash),\n    randomId: randomIds,\n    id: messageIds,\n    withMyScore: withMyScore || undefined,\n    silent: isSilent || undefined,\n    ...(scheduledAt && { scheduleDate: scheduledAt }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }), true);\n}\n\nexport async function findFirstMessageIdAfterDate({\n  chat,\n  timestamp,\n}: {\n  chat: ApiChat;\n  timestamp: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetHistory({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    offsetDate: timestamp,\n    addOffset: -1,\n    limit: 1,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages || !result.messages.length\n  ) {\n    return undefined;\n  }\n\n  return result.messages[0].id;\n}\n\nexport async function fetchScheduledHistory({ chat }: { chat: ApiChat }) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetScheduledHistory({\n    peer: buildInputPeer(id, accessHash),\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter<ApiMessage>(Boolean as any);\n\n  return {\n    messages,\n  };\n}\n\nexport async function sendScheduledMessages({ chat, ids }: { chat: ApiChat; ids: number[] }) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendScheduledMessages({\n    peer: buildInputPeer(id, accessHash),\n    id: ids,\n  }), true);\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.MessagesSlice | GramJs.messages.Messages | GramJs.messages.ChannelMessages |\n  GramJs.messages.DiscussionMessage | GramJs.messages.SponsoredMessages\n)) {\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  result.messages.forEach((message) => {\n    if ((message instanceof GramJs.Message && isMessageWithMedia(message))\n      || (message instanceof GramJs.MessageService && isServiceMessageWithMedia(message))\n    ) {\n      addMessageToLocalDb(message);\n    }\n  });\n}\n\nexport async function fetchPinnedMessages({ chat }: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.messages.Search(\n    {\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      filter: new GramJs.InputMessagesFilterPinned(),\n      q: '',\n      limit: PINNED_MESSAGES_LIMIT,\n    },\n  ));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const messages = result.messages.map(buildApiMessage).filter<ApiMessage>(Boolean as any);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchSeenBy({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReadParticipants({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }));\n\n  return result ? result.map(String) : undefined;\n}\n\nexport async function fetchSendAs({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.channels.GetSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n\n  return {\n    users,\n    chats,\n    ids: result.peers.map(getApiChatIdFromMtpPeer),\n  };\n}\n\nexport function saveDefaultSendAs({\n  sendAs, chat,\n}: {\n  sendAs: ApiChat | ApiUser; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDefaultSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    sendAs: buildInputPeer(sendAs.id, sendAs.accessHash),\n  }));\n}\n\nexport async function fetchSponsoredMessages({ chat }: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.channels.GetSponsoredMessages({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result || !result.messages.length) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiSponsoredMessage).filter<ApiSponsoredMessage>(Boolean as any);\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function viewSponsoredMessage({ chat, random }: { chat: ApiChat; random: string }) {\n  await invokeRequest(new GramJs.channels.ViewSponsoredMessage({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n    randomId: deserializeBytes(random),\n  }));\n}\n\nexport function readAllMentions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ReadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport function readAllReactions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ReadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport async function fetchUnreadMentions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: MENTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter<ApiMessage>(Boolean as any);\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchUnreadReactions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: REACTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter<ApiMessage>(Boolean as any);\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function transcribeAudio({\n  chat, messageId,\n}: {\n  chat: ApiChat; messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.TranscribeAudio({\n    msgId: messageId,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return undefined;\n\n  onUpdate({\n    '@type': 'updateTranscribedAudio',\n    isPending: result.pending,\n    transcriptionId: result.transcriptionId.toString(),\n    text: result.text,\n  });\n\n  return result.transcriptionId.toString();\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  OnApiUpdate, ApiUser, ApiChat, ApiPhoto,\n} from '../../types';\n\nimport { COMMON_CHATS_LIMIT, PROFILE_PHOTOS_LIMIT } from '../../../config';\nimport { invokeRequest } from './client';\nimport { searchMessagesLocal } from './messages';\nimport {\n  buildInputEntity,\n  buildInputPeer,\n  buildInputContact,\n  buildMtpPeerId,\n  getEntityTypeById,\n} from '../gramjsBuilders';\nimport { buildApiUser, buildApiUserFromFull, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { addEntitiesWithPhotosToLocalDb, addPhotoToLocalDb, addUserToLocalDb } from '../helpers';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport localDb from '../localDb';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchFullUser({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return;\n  }\n\n  const fullInfo = await invokeRequest(new GramJs.users.GetFullUser({ id: input }));\n\n  if (!fullInfo) {\n    return;\n  }\n\n  if (fullInfo.fullUser.profilePhoto instanceof GramJs.Photo) {\n    localDb.photos[fullInfo.fullUser.profilePhoto.id.toString()] = fullInfo.fullUser.profilePhoto;\n  }\n\n  const botInfo = fullInfo.fullUser.botInfo;\n  if (botInfo?.descriptionPhoto instanceof GramJs.Photo) {\n    localDb.photos[botInfo.descriptionPhoto.id.toString()] = botInfo.descriptionPhoto;\n  }\n  if (botInfo?.descriptionDocument instanceof GramJs.Document) {\n    localDb.documents[botInfo.descriptionDocument.id.toString()] = botInfo.descriptionDocument;\n  }\n\n  const userWithFullInfo = buildApiUserFromFull(fullInfo);\n\n  onUpdate({\n    '@type': 'updateUser',\n    id,\n    user: {\n      fullInfo: userWithFullInfo.fullInfo,\n    },\n  });\n}\n\nexport async function fetchCommonChats(id: string, accessHash?: string, maxId?: string) {\n  const commonChats = await invokeRequest(new GramJs.messages.GetCommonChats({\n    userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    maxId: maxId ? buildMtpPeerId(maxId, getEntityTypeById(maxId)) : undefined,\n    limit: COMMON_CHATS_LIMIT,\n  }));\n\n  if (!commonChats) {\n    return undefined;\n  }\n\n  updateLocalDb(commonChats);\n\n  const chatIds: string[] = [];\n  const chats: ApiChat[] = [];\n\n  commonChats.chats.forEach((mtpChat) => {\n    const chat = buildApiChatFromPreview(mtpChat);\n\n    if (chat) {\n      chats.push(chat);\n      chatIds.push(chat.id);\n    }\n  });\n\n  return { chats, chatIds, isFullyLoaded: chatIds.length < COMMON_CHATS_LIMIT };\n}\n\nexport async function fetchNearestCountry() {\n  const dcInfo = await invokeRequest(new GramJs.help.GetNearestDc());\n\n  return dcInfo?.country;\n}\n\nexport async function fetchTopUsers() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    correspondents: true,\n  }));\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchContactList() {\n  const result = await invokeRequest(new GramJs.contacts.GetContacts({ hash: BigInt('0') }));\n  if (!result || result instanceof GramJs.contacts.ContactsNotModified) {\n    return undefined;\n  }\n\n  result.users.forEach((user) => {\n    if (user instanceof GramJs.User) {\n      addUserToLocalDb(user, true);\n    }\n  });\n\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    users,\n    userStatusesById,\n    chats: result.users.map((user) => buildApiChatFromPreview(user)).filter<ApiChat>(Boolean as any),\n  };\n}\n\nexport async function fetchUsers({ users }: { users: ApiUser[] }) {\n  const result = await invokeRequest(new GramJs.users.GetUsers({\n    id: users.map(({ id, accessHash }) => buildInputPeer(id, accessHash)),\n  }));\n  if (!result || !result.length) {\n    return undefined;\n  }\n\n  result.forEach((user) => {\n    if (user instanceof GramJs.User) {\n      addUserToLocalDb(user, true);\n    }\n  });\n\n  return buildApiUsersAndStatuses(result);\n}\n\nexport async function importContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n}) {\n  const result = await invokeRequest(new GramJs.contacts.ImportContacts({\n    contacts: [buildInputContact({\n      phone: phone || '',\n      firstName: firstName || '',\n      lastName: lastName || '',\n    })],\n  }));\n\n  if (result instanceof GramJs.contacts.ImportedContacts && result.users.length) {\n    addUserToLocalDb(result.users[0]);\n  }\n\n  return result?.imported.length ? buildApiPeerId(result.imported[0].userId, 'user') : undefined;\n}\n\nexport function updateContact({\n  id,\n  accessHash,\n  phoneNumber = '',\n  firstName = '',\n  lastName = '',\n  shouldSharePhoneNumber = false,\n}: {\n  id: string;\n  accessHash?: string;\n  phoneNumber?: string;\n  firstName?: string;\n  lastName?: string;\n  shouldSharePhoneNumber?: boolean;\n}) {\n  return invokeRequest(new GramJs.contacts.AddContact({\n    id: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    firstName,\n    lastName,\n    phone: phoneNumber,\n    ...(shouldSharePhoneNumber && { addPhonePrivacyException: shouldSharePhoneNumber }),\n  }), true);\n}\n\nexport async function deleteContact({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return;\n  }\n\n  const result = await invokeRequest(new GramJs.contacts.DeleteContacts({ id: [input] }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteContact',\n    id,\n  });\n}\n\nexport async function fetchProfilePhotos(user?: ApiUser, chat?: ApiChat) {\n  if (user) {\n    const { id, accessHash } = user;\n\n    const result = await invokeRequest(new GramJs.photos.GetUserPhotos({\n      userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n      limit: PROFILE_PHOTOS_LIMIT,\n      offset: 0,\n      maxId: BigInt('0'),\n    }));\n\n    if (!result) {\n      return undefined;\n    }\n\n    updateLocalDb(result);\n\n    return {\n      photos: result.photos\n        .filter((photo): photo is GramJs.Photo => photo instanceof GramJs.Photo)\n        .map(buildApiPhoto),\n    };\n  }\n\n  const result = await searchMessagesLocal({\n    chat: chat!,\n    type: 'profilePhoto',\n    limit: PROFILE_PHOTOS_LIMIT,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  const { messages, users } = result;\n\n  return {\n    photos: messages.map((message) => message.content.action!.photo).filter<ApiPhoto>(Boolean as any),\n    users,\n  };\n}\n\nexport function reportSpam(userOrChat: ApiUser | ApiChat) {\n  const { id, accessHash } = userOrChat;\n\n  return invokeRequest(new GramJs.messages.ReportSpam({\n    peer: buildInputPeer(id, accessHash),\n  }), true);\n}\n\nfunction updateLocalDb(result: (GramJs.photos.Photos | GramJs.photos.PhotosSlice | GramJs.messages.Chats)) {\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  if ('photos' in result) {\n    result.photos.forEach(addPhotoToLocalDb);\n  }\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiSticker, ApiVideo, OnApiUpdate } from '../../types';\n\nimport { invokeRequest } from './client';\nimport { buildStickerFromDocument, buildStickerSet, buildStickerSetCovered } from '../apiBuilders/symbols';\nimport { buildInputStickerSet, buildInputDocument, buildInputStickerSetShortName } from '../gramjsBuilders';\nimport { buildVideoFromDocument } from '../apiBuilders/messages';\nimport { RECENT_STICKERS_LIMIT } from '../../../config';\n\nimport localDb from '../localDb';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchStickerSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetAllStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchRecentStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetRecentStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.RecentStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers.slice(0, RECENT_STICKERS_LIMIT)),\n  };\n}\n\nexport async function fetchFavoriteStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFavedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FavedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers),\n  };\n}\n\nexport async function fetchFeaturedStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function faveSticker({\n  sticker,\n  unfave,\n}: {\n  sticker: ApiSticker;\n  unfave?: boolean;\n}) {\n  const request = new GramJs.messages.FaveSticker({\n    id: buildInputDocument(sticker),\n    unfave,\n  });\n\n  const result = await invokeRequest(request);\n  if (result) {\n    onUpdate({\n      '@type': 'updateFavoriteStickers',\n    });\n  }\n}\n\nexport function removeRecentSticker({\n  sticker,\n}: {\n  sticker: ApiSticker;\n}) {\n  const request = new GramJs.messages.SaveRecentSticker({\n    id: buildInputDocument(sticker),\n    unsave: true,\n  });\n\n  return invokeRequest(request);\n}\n\nexport function clearRecentStickers() {\n  return invokeRequest(new GramJs.messages.ClearRecentStickers());\n}\n\nexport async function fetchStickers(\n  { stickerSetShortName, stickerSetId, accessHash }:\n  { stickerSetShortName?: string; stickerSetId?: string; accessHash: string },\n) {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: stickerSetId\n      ? buildInputStickerSet(stickerSetId, accessHash)\n      : buildInputStickerSetShortName(stickerSetShortName!),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n    packs: processStickerPackResult(result.packs),\n  };\n}\n\nexport async function fetchAnimatedEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmoji(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchAnimatedEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmojiAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function searchStickers({ query, hash = '0' }: { query: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.SearchStickerSets({\n    q: query,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.FoundStickerSetsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchSavedGifs({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetSavedGifs({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.SavedGifsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    gifs: processGifResult(result.gifs),\n  };\n}\n\nexport function saveGif({ gif, shouldUnsave }: { gif: ApiVideo; shouldUnsave?: boolean }) {\n  const request = new GramJs.messages.SaveGif({\n    id: buildInputDocument(gif),\n    unsave: shouldUnsave,\n  });\n\n  return invokeRequest(request, true);\n}\n\nexport async function installStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.InstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: Date.now() },\n    });\n  }\n}\n\nexport async function uninstallStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.UninstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: undefined },\n    });\n  }\n}\n\nlet inputGifBot: GramJs.InputUser | undefined;\n\nexport async function searchGifs({ query, offset = '' }: { query: string; offset?: string }) {\n  if (!inputGifBot) {\n    const config = await invokeRequest(new GramJs.help.GetConfig());\n    if (!config) {\n      return undefined;\n    }\n\n    const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({\n      username: config.gifSearchUsername,\n    }));\n    if (!resolvedPeer || !(resolvedPeer.users[0] instanceof GramJs.User)) {\n      return undefined;\n    }\n\n    inputGifBot = new GramJs.InputUser({\n      userId: (resolvedPeer.peer as GramJs.PeerUser).userId,\n      accessHash: resolvedPeer.users[0].accessHash!,\n    });\n  }\n\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: inputGifBot,\n    peer: new GramJs.InputPeerEmpty(),\n    query,\n    offset,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const documents = result.results\n    .map((foundGif) => {\n      if (foundGif instanceof GramJs.BotInlineMediaResult) {\n        return foundGif.document;\n      }\n\n      return undefined;\n    })\n    .filter<GramJs.TypeDocument>(Boolean as any);\n\n  return {\n    nextOffset: result.nextOffset,\n    gifs: processGifResult(documents),\n  };\n}\n\nexport async function fetchStickersForEmoji({\n  emoji, hash = '0',\n}: { emoji: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetStickers({\n    emoticon: emoji,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.StickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    stickers: processStickerResult(result.stickers),\n    hash: String(result.hash),\n  };\n}\n\nexport async function fetchEmojiKeywords({ language, fromVersion }: {\n  language: string;\n  fromVersion?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetEmojiKeywordsDifference({\n    langCode: language,\n    fromVersion,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    language: result.langCode,\n    version: result.version,\n    keywords: result.keywords.reduce((acc, emojiKeyword) => {\n      acc[emojiKeyword.keyword] = emojiKeyword.emoticons;\n\n      return acc;\n    }, {} as Record<string, string[]>),\n  };\n}\n\nfunction processStickerResult(stickers: GramJs.TypeDocument[]) {\n  return stickers\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const sticker = buildStickerFromDocument(document);\n        if (sticker) {\n          localDb.documents[String(document.id)] = document;\n\n          return sticker;\n        }\n      }\n\n      return undefined;\n    })\n    .filter<ApiSticker>(Boolean as any);\n}\n\nfunction processStickerPackResult(packs: GramJs.StickerPack[]) {\n  return packs.reduce((acc, { emoticon, documents }) => {\n    acc[emoticon] = documents.map((documentId) => buildStickerFromDocument(\n      localDb.documents[String(documentId)],\n    )).filter<ApiSticker>(Boolean as any);\n    return acc;\n  }, {} as Record<string, ApiSticker[]>);\n}\n\nfunction processGifResult(gifs: GramJs.TypeDocument[]) {\n  return gifs\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const gif = buildVideoFromDocument(document);\n        if (gif) {\n          localDb.documents[String(document.id)] = document;\n\n          return gif;\n        }\n      }\n\n      return undefined;\n    })\n    .filter<ApiVideo>(Boolean as any);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport { invokeRequest } from './client';\nimport { buildInputEntity, buildInputPeer } from '../gramjsBuilders';\nimport type { ApiChat, ApiUser, OnApiUpdate } from '../../types';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildApiExportedInvite, buildChatInviteImporter } from '../apiBuilders/chats';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport function checkChatUsername({ username }: { username: string }) {\n  return invokeRequest(new GramJs.channels.CheckUsername({\n    channel: new GramJs.InputChannelEmpty(),\n    username,\n  }));\n}\n\nexport async function setChatUsername(\n  { chat, username }: { chat: ApiChat; username: string },\n) {\n  const result = await invokeRequest(new GramJs.channels.UpdateUsername({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    username,\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { username },\n    });\n  }\n}\n\nexport async function updatePrivateLink({\n  chat, usageLimit, expireDate,\n}: {\n  chat: ApiChat; usageLimit?: number; expireDate?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    usageLimit,\n    expireDate,\n  }));\n\n  // TODO Verify Exported Invite logic\n  if (!(result instanceof GramJs.ChatInviteExported)) return undefined;\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      inviteLink: result.link,\n    },\n  });\n\n  return result.link;\n}\n\nexport async function fetchExportedChatInvites({\n  peer, admin, limit = 0, isRevoked,\n}: { peer: ApiChat; admin: ApiUser; limit: number; isRevoked?: boolean }) {\n  const exportedInvites = await invokeRequest(new GramJs.messages.GetExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n    limit,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!exportedInvites) return undefined;\n  addEntitiesWithPhotosToLocalDb(exportedInvites.users);\n  // TODO Verify Exported Invite logic\n  return (exportedInvites.invites\n    .filter((l) => l instanceof GramJs.ChatInviteExported) as GramJs.ChatInviteExported[])\n    .map(buildApiExportedInvite);\n}\n\nexport async function editExportedChatInvite({\n  peer, isRevoked, link, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  isRevoked?: boolean;\n  link: string;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  // TODO Verify Exported Invite logic\n  const invite = await invokeRequest(new GramJs.messages.EditExportedChatInvite({\n    link,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded,\n    title,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!invite) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(invite.users);\n  if (invite instanceof GramJs.messages.ExportedChatInvite && invite.invite instanceof GramJs.ChatInviteExported) {\n    const replaceInvite = buildApiExportedInvite(invite.invite);\n    return {\n      oldInvite: replaceInvite,\n      newInvite: replaceInvite,\n    };\n  }\n\n  if (invite instanceof GramJs.messages.ExportedChatInviteReplaced\n    && invite.invite instanceof GramJs.ChatInviteExported\n    && invite.newInvite instanceof GramJs.ChatInviteExported) {\n    const oldInvite = buildApiExportedInvite(invite.invite);\n    const newInvite = buildApiExportedInvite(invite.newInvite);\n    return {\n      oldInvite,\n      newInvite,\n    };\n  }\n  return undefined;\n}\n\nexport async function exportChatInvite({\n  peer, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded || undefined,\n    title,\n  }));\n\n  // TODO Verify Exported Invite logic\n  if (!(invite instanceof GramJs.ChatInviteExported)) return undefined;\n  return buildApiExportedInvite(invite);\n}\n\nexport async function deleteExportedChatInvite({\n  peer, link,\n}: {\n  peer: ApiChat; link: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteExportedChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n  }));\n\n  return result;\n}\n\nexport async function deleteRevokedExportedChatInvites({\n  peer, admin,\n}: {\n  peer: ApiChat; admin: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteRevokedExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n  }));\n\n  return result;\n}\n\nexport async function fetchChatInviteImporters({\n  peer, link, offsetDate = 0, offsetUser, limit = 0, isRequested,\n}: {\n  peer: ApiChat; link?: string; offsetDate: number; offsetUser?: ApiUser; limit: number; isRequested?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetChatInviteImporters({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n    offsetDate,\n    offsetUser: offsetUser\n      ? buildInputEntity(offsetUser.id, offsetUser.accessHash) as GramJs.InputUser : new GramJs.InputUserEmpty(),\n    limit,\n    requested: isRequested || undefined,\n  }));\n\n  if (!result) return undefined;\n  const users = result.users.map((user) => buildApiUser(user)).filter(Boolean);\n  addEntitiesWithPhotosToLocalDb(result.users);\n  return {\n    importers: result.importers.map((importer) => buildChatInviteImporter(importer)),\n    users: buildCollectionByKey(users, 'id'),\n  };\n}\n\nexport function hideChatJoinRequest({\n  peer,\n  user,\n  isApproved,\n}: {\n  peer: ApiChat;\n  user: ApiUser;\n  isApproved: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.HideChatJoinRequest({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    approved: isApproved || undefined,\n  }), true);\n}\n\nexport function hideAllChatJoinRequests({\n  peer,\n  isApproved,\n  link,\n}: {\n  peer: ApiChat;\n  isApproved: boolean;\n  link?: string;\n}) {\n  return invokeRequest(new GramJs.messages.HideAllChatJoinRequests({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    approved: isApproved || undefined,\n    link,\n  }), true);\n}\n\nexport function hideChatReportPanel(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.HidePeerSettingsBar({\n    peer: buildInputPeer(id, accessHash),\n  }));\n}\n","import { Api as GramJs, errors } from '../../../lib/gramjs';\n\nimport type { OnApiUpdate } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { invokeRequest, updateTwoFaSettings } from './client';\n\nconst ApiErrors: { [k: string]: string } = {\n  EMAIL_UNCONFIRMED: 'Email unconfirmed',\n  EMAIL_HASH_EXPIRED: 'Email hash expired',\n  NEW_SALT_INVALID: 'The new salt is invalid',\n  NEW_SETTINGS_INVALID: 'The new password settings are invalid',\n  CODE_INVALID: 'Invalid Code',\n  PASSWORD_HASH_INVALID: 'Invalid Password',\n};\n\nconst emailCodeController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getPasswordInfo() {\n  const result = await invokeRequest(new GramJs.account.GetPassword());\n  if (!result) {\n    return undefined;\n  }\n\n  const { hint, hasPassword } = result;\n\n  return { hint, hasPassword };\n}\n\nfunction onRequestEmailCode(length: number) {\n  onUpdate({\n    '@type': 'updateTwoFaStateWaitCode',\n    length,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    emailCodeController.resolve = resolve;\n    emailCodeController.reject = reject;\n  });\n}\n\nexport async function checkPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ isCheckPassword: true, currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function clearPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updatePassword(currentPassword: string, password: string, hint?: string, email?: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: password,\n      hint,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updateRecoveryEmail(currentPassword: string, email: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: currentPassword,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport function provideRecoveryEmailCode(code: string) {\n  emailCodeController.resolve!(code);\n}\n\nfunction onError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateTwoFaError',\n    message,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiThemeParameters, ApiUser, OnApiUpdate,\n} from '../../types';\n\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\nimport { buildInputPeer, buildInputThemeParams, generateRandomBigInt } from '../gramjsBuilders';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildApiAttachMenuBot, buildApiBotInlineMediaResult, buildApiBotInlineResult, buildBotSwitchPm,\n} from '../apiBuilders/bots';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { addEntitiesWithPhotosToLocalDb, addUserToLocalDb, deserializeBytes } from '../helpers';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildApiUrlAuthResult } from '../apiBuilders/misc';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function answerCallbackButton({\n  chatId, accessHash, messageId, data, isGame,\n}: {\n  chatId: string; accessHash?: string; messageId: number; data?: string; isGame?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetBotCallbackAnswer({\n    peer: buildInputPeer(chatId, accessHash),\n    msgId: messageId,\n    data: data ? deserializeBytes(data) : undefined,\n    game: isGame || undefined,\n  }));\n\n  return result ? omitVirtualClassFields(result) : undefined;\n}\n\nexport async function fetchTopInlineBots() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    botsInline: true,\n  }));\n\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchInlineBot({ username }: { username: string }) {\n  const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({ username }));\n\n  if (\n    !resolvedPeer\n    || !(\n      resolvedPeer.users[0] instanceof GramJs.User\n      && resolvedPeer.users[0].bot\n      && resolvedPeer.users[0].botInlinePlaceholder\n    )\n  ) {\n    return undefined;\n  }\n\n  addUserToLocalDb(resolvedPeer.users[0]);\n\n  return {\n    user: buildApiUser(resolvedPeer.users[0]),\n    chat: buildApiChatFromPreview(resolvedPeer.users[0]),\n  };\n}\n\nexport async function fetchInlineBotResults({\n  bot, chat, query, offset = '',\n}: {\n  bot: ApiUser; chat: ApiChat; query: string; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    query,\n    offset,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    isGallery: Boolean(result.gallery),\n    help: bot.botPlaceholder,\n    nextOffset: getInlineBotResultsNextOffset(bot.username, result.nextOffset),\n    switchPm: buildBotSwitchPm(result.switchPm),\n    users: result.users.map(buildApiUser).filter<ApiUser>(Boolean as any),\n    results: processInlineBotResult(String(result.queryId), result.results),\n  };\n}\n\nexport async function sendInlineBotResult({\n  chat, resultId, queryId, replyingTo, sendAs, isSilent, scheduleDate,\n}: {\n  chat: ApiChat;\n  resultId: string;\n  queryId: string;\n  replyingTo?: number;\n  sendAs?: ApiUser | ApiChat;\n  isSilent?: boolean;\n  scheduleDate?: number;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.SendInlineBotResult({\n    clearDraft: true,\n    randomId,\n    queryId: BigInt(queryId),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: resultId,\n    scheduleDate,\n    ...(isSilent && { silent: true }),\n    ...(replyingTo && { replyToMsgId: replyingTo }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }), true);\n}\n\nexport async function startBot({\n  bot, startParam,\n}: {\n  bot: ApiUser;\n  startParam?: string;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.StartBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(bot.id, bot.accessHash),\n    randomId,\n    startParam,\n  }), true);\n}\n\nexport async function requestWebView({\n  isSilent,\n  peer,\n  bot,\n  url,\n  startParam,\n  replyToMessageId,\n  theme,\n  sendAs,\n  isFromBotMenu,\n}: {\n  isSilent?: boolean;\n  peer: ApiChat | ApiUser;\n  bot: ApiUser;\n  url?: string;\n  startParam?: string;\n  replyToMessageId?: number;\n  theme?: ApiThemeParameters;\n  sendAs?: ApiUser | ApiChat;\n  isFromBotMenu?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    replyToMsgId: replyToMessageId,\n    url,\n    startParam,\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    fromBotMenu: isFromBotMenu || undefined,\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n\n  if (result instanceof GramJs.WebViewResultUrl) {\n    return {\n      url: result.url,\n      queryId: result.queryId.toString(),\n    };\n  }\n\n  return undefined;\n}\n\nexport async function requestSimpleWebView({\n  bot, url, theme,\n}: {\n  bot: ApiUser;\n  url: string;\n  theme?: ApiThemeParameters;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestSimpleWebView({\n    url,\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n  }));\n\n  return result?.url;\n}\n\nexport function prolongWebView({\n  isSilent,\n  peer,\n  bot,\n  queryId,\n  replyToMessageId,\n  sendAs,\n}: {\n  isSilent?: boolean;\n  peer: ApiChat | ApiUser;\n  bot: ApiUser;\n  queryId: string;\n  replyToMessageId?: number;\n  sendAs?: ApiUser | ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ProlongWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    queryId: BigInt(queryId),\n    replyToMsgId: replyToMessageId,\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n}\n\nexport async function sendWebViewData({\n  bot, buttonText, data,\n}: {\n  bot: ApiUser;\n  buttonText: string;\n  data: string;\n}) {\n  const randomId = generateRandomBigInt();\n  await invokeRequest(new GramJs.messages.SendWebViewData({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    buttonText,\n    data,\n    randomId,\n  }), true);\n}\n\nexport async function loadAttachMenuBots({\n  hash,\n}: {\n  hash?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBots({\n    hash: hash ? BigInt(hash) : undefined,\n  }));\n\n  if (result instanceof GramJs.AttachMenuBots) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n    return {\n      hash: result.hash.toString(),\n      bots: buildCollectionByKey(result.bots.map(buildApiAttachMenuBot), 'id'),\n    };\n  }\n  return undefined;\n}\n\nexport function toggleBotInAttachMenu({\n  bot,\n  isEnabled,\n}: {\n  bot: ApiUser;\n  isEnabled: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.ToggleBotInAttachMenu({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    enabled: isEnabled,\n  }));\n}\n\nexport async function requestBotUrlAuth({\n  chat, buttonId, messageId,\n}: {\n  chat: ApiChat;\n  buttonId: number;\n  messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    buttonId,\n    msgId: messageId,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptBotUrlAuth({\n  chat,\n  messageId,\n  buttonId,\n  isWriteAllowed,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  buttonId: number;\n  isWriteAllowed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    buttonId,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function requestLinkUrlAuth({ url }: { url: string }) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    url,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptLinkUrlAuth({ url, isWriteAllowed }: { url: string; isWriteAllowed?: boolean }) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    url,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nfunction processInlineBotResult(queryId: string, results: GramJs.TypeBotInlineResult[]) {\n  return results.map((result) => {\n    if (result instanceof GramJs.BotInlineMediaResult) {\n      if (result.document instanceof GramJs.Document) {\n        addDocumentToLocalDb(result.document);\n      }\n\n      if (result.photo instanceof GramJs.Photo) {\n        addPhotoToLocalDb(result.photo);\n      }\n\n      return buildApiBotInlineMediaResult(result, queryId);\n    }\n\n    if (result.thumb) {\n      addWebDocumentToLocalDb(result.thumb);\n    }\n\n    return buildApiBotInlineResult(result, queryId);\n  });\n}\n\nfunction getInlineBotResultsNextOffset(username: string, nextOffset?: string) {\n  return username === 'gif' && nextOffset === '0' ? '' : nextOffset;\n}\n\nfunction addDocumentToLocalDb(document: GramJs.Document) {\n  localDb.documents[String(document.id)] = document;\n}\n\nfunction addPhotoToLocalDb(photo: GramJs.Photo) {\n  localDb.photos[String(photo.id)] = photo;\n}\n\nfunction addWebDocumentToLocalDb(webDocument: GramJs.TypeWebDocument) {\n  localDb.webDocuments[webDocument.url] = webDocument;\n}\n","import BigInt from 'big-integer';\nimport type { JoinGroupCallPayload } from '../../../lib/secret-sauce';\nimport type {\n  ApiChat, ApiUser, OnApiUpdate, ApiGroupCall, ApiPhoneCall,\n} from '../../types';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport { invokeRequest } from './client';\nimport {\n  buildInputGroupCall, buildInputPeer, buildInputPhoneCall, generateRandomInt,\n} from '../gramjsBuilders';\nimport {\n  buildCallProtocol,\n  buildApiGroupCall,\n  buildApiGroupCallParticipant, buildPhoneCall,\n\n} from '../apiBuilders/calls';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { GROUP_CALL_PARTICIPANTS_LIMIT } from '../../../config';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getGroupCall({\n  call,\n}: {\n  call: Partial<ApiGroupCall>;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupCall({\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n\n  return {\n    groupCall: buildApiGroupCall(result.call),\n    users,\n    chats,\n  };\n}\n\nexport function discardGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardGroupCall({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport function editGroupCallParticipant({\n  call, participant, muted, presentationPaused, videoStopped, videoPaused, volume,\n  raiseHand,\n}: {\n  call: ApiGroupCall; participant: ApiUser; muted?: boolean; presentationPaused?: boolean;\n  videoStopped?: boolean; videoPaused?: boolean; raiseHand?: boolean; volume?: number;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallParticipant({\n    call: buildInputGroupCall(call),\n    participant: buildInputPeer(participant.id, participant.accessHash),\n    ...(videoStopped !== undefined && { videoStopped }),\n    ...(videoPaused !== undefined && { videoPaused }),\n    ...(muted !== undefined && { muted }),\n    ...(presentationPaused !== undefined && { presentationPaused }),\n    ...(raiseHand !== undefined && { raiseHand }),\n    ...(volume !== undefined && { volume }),\n  }), true);\n}\n\nexport function editGroupCallTitle({\n  groupCall, title,\n}: {\n  groupCall: ApiGroupCall; title: string;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallTitle({\n    title,\n    call: buildInputGroupCall(groupCall),\n  }), true);\n}\n\nexport async function exportGroupCallInvite({\n  call, canSelfUnmute,\n}: {\n  call: ApiGroupCall; canSelfUnmute: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ExportGroupCallInvite({\n    canSelfUnmute: canSelfUnmute || undefined,\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.link;\n}\n\nexport async function fetchGroupCallParticipants({\n  call, offset,\n}: {\n  call: ApiGroupCall; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupParticipants({\n    call: buildInputGroupCall(call),\n    ids: [],\n    sources: [],\n    offset: offset || '',\n    limit: GROUP_CALL_PARTICIPANTS_LIMIT,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter<ApiUser>(Boolean as any);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter<ApiChat>(Boolean as any);\n\n  onUpdate({\n    '@type': 'updateGroupCallParticipants',\n    groupCallId: call.id,\n    participants: result.participants.map(buildApiGroupCallParticipant),\n    nextOffset: result.nextOffset,\n  });\n\n  return {\n    users, chats,\n  };\n}\n\nexport function leaveGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCall({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport async function joinGroupCall({\n  call, inviteHash, params,\n}: {\n  call: ApiGroupCall; inviteHash?: string; params: JoinGroupCallPayload;\n}) {\n  const result = await invokeRequest(new GramJs.phone.JoinGroupCall({\n    call: buildInputGroupCall(call),\n    joinAs: new GramJs.InputPeerSelf(),\n    muted: true,\n    videoStopped: true,\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n    inviteHash,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates.find((u) => u instanceof GramJs.UpdateGroupCall);\n    if (!(update instanceof GramJs.UpdateGroupCall)) return undefined;\n\n    return buildApiGroupCall(update.call);\n  }\n\n  return undefined;\n}\n\nexport async function createGroupCall({\n  peer,\n}: {\n  peer: ApiChat;\n}) {\n  const randomId = generateRandomInt();\n  const result = await invokeRequest(new GramJs.phone.CreateGroupCall({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    randomId,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates[0];\n    if (update instanceof GramJs.UpdateGroupCall) {\n      return buildApiGroupCall(update.call);\n    }\n  }\n\n  return undefined;\n}\n\nexport function joinGroupCallPresentation({\n  call, params,\n}: {\n  call: ApiGroupCall; params: JoinGroupCallPayload;\n}) {\n  return invokeRequest(new GramJs.phone.JoinGroupCallPresentation({\n    call: buildInputGroupCall(call),\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n  }), true);\n}\n\nexport function toggleGroupCallStartSubscription({\n  call, subscribed,\n}: {\n  call: ApiGroupCall; subscribed: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.ToggleGroupCallStartSubscription({\n    call: buildInputGroupCall(call),\n    subscribed,\n  }), true);\n}\n\nexport function leaveGroupCallPresentation({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCallPresentation({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport async function getDhConfig() {\n  const dhConfig = await invokeRequest(new GramJs.messages.GetDhConfig({}));\n\n  if (!dhConfig || dhConfig instanceof GramJs.messages.DhConfigNotModified) return undefined;\n\n  return {\n    g: dhConfig.g,\n    p: Array.from(dhConfig.p),\n    random: Array.from(dhConfig.random),\n  };\n}\n\nexport function discardCall({\n  call, isBusy,\n}: {\n  call: ApiPhoneCall; isBusy?: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardCall({\n    peer: buildInputPhoneCall(call),\n    reason: isBusy ? new GramJs.PhoneCallDiscardReasonBusy() : new GramJs.PhoneCallDiscardReasonHangup(),\n  }), true);\n}\n\nexport async function requestCall({\n  user, gAHash, isVideo,\n}: {\n  user: ApiUser; gAHash: number[]; isVideo?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.RequestCall({\n    randomId: generateRandomInt(),\n    userId: buildInputPeer(user.id, user.accessHash),\n    gAHash: Buffer.from(gAHash),\n    ...(isVideo && { video: true }),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return false;\n  }\n\n  const call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  return true;\n}\n\nexport function setCallRating({\n  call, rating, comment,\n}: {\n  call: ApiPhoneCall; rating: number; comment: string;\n}) {\n  return invokeRequest(new GramJs.phone.SetCallRating({\n    rating,\n    peer: buildInputPhoneCall(call),\n    comment,\n  }), true);\n}\n\nexport function receivedCall({\n  call,\n}: {\n  call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.ReceivedCall({\n    peer: buildInputPhoneCall(call),\n  }));\n}\n\nexport async function acceptCall({\n  call, gB,\n}: {\n  call: ApiPhoneCall; gB: number[];\n}) {\n  const result = await invokeRequest(new GramJs.phone.AcceptCall({\n    peer: buildInputPhoneCall(call),\n    gB: Buffer.from(gB),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n}\n\nexport async function confirmCall({\n  call, gA, keyFingerprint,\n}: {\n  call: ApiPhoneCall; gA: number[]; keyFingerprint: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ConfirmCall({\n    peer: buildInputPhoneCall(call),\n    gA: Buffer.from(gA),\n    keyFingerprint: BigInt(keyFingerprint),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n}\n\nexport function sendSignalingData({\n  data, call,\n}: {\n  data: number[]; call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.SendSignalingData({\n    data: Buffer.from(data),\n    peer: buildInputPhoneCall(call),\n  }));\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { invokeRequest } from './client';\nimport { buildInputInvoice, buildInputPeer, buildShippingInfo } from '../gramjsBuilders';\nimport {\n  buildShippingOptions, buildPaymentForm, buildReceipt, buildApiPremiumPromo, buildApiInvoiceFromForm,\n} from '../apiBuilders/payments';\nimport type {\n  ApiChat, OnApiUpdate, ApiRequestInputInvoice,\n} from '../../types';\nimport localDb from '../localDb';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildApiUser } from '../apiBuilders/users';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function validateRequestedInfo({\n  inputInvoice,\n  requestInfo,\n  shouldSave,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  requestInfo: GramJs.TypePaymentRequestedInfo;\n  shouldSave?: boolean;\n}): Promise<{\n    id: string;\n    shippingOptions: any;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.payments.ValidateRequestedInfo({\n    invoice: buildInputInvoice(inputInvoice),\n    save: shouldSave || undefined,\n    info: buildShippingInfo(requestInfo),\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return undefined;\n  }\n\n  return {\n    id,\n    shippingOptions: buildShippingOptions(shippingOptions),\n  };\n}\n\nexport async function sendPaymentForm({\n  inputInvoice,\n  formId,\n  requestedInfoId,\n  shippingOptionId,\n  credentials,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  formId: string;\n  credentials: any;\n  requestedInfoId?: string;\n  shippingOptionId?: string;\n}) {\n  const result = await invokeRequest(new GramJs.payments.SendPaymentForm({\n    formId: BigInt(formId),\n    invoice: buildInputInvoice(inputInvoice),\n    requestedInfoId,\n    shippingOptionId,\n    credentials: new GramJs.InputPaymentCredentials({\n      save: credentials.save,\n      data: new GramJs.DataJSON({ data: JSON.stringify(credentials.data) }),\n    }),\n  }));\n\n  if (result instanceof GramJs.payments.PaymentVerificationNeeded) {\n    onUpdate({\n      '@type': 'updatePaymentVerificationNeeded',\n      url: result.url,\n    });\n\n    return undefined;\n  }\n\n  return Boolean(result);\n}\n\nexport async function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentForm({\n    invoice: buildInputInvoice(inputInvoice),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result.photo) {\n    localDb.webDocuments[result.photo.url] = result.photo;\n  }\n\n  return {\n    form: buildPaymentForm(result),\n    invoice: buildApiInvoiceFromForm(result),\n  };\n}\n\nexport async function getReceipt(chat: ApiChat, msgId: number) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentReceipt({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return buildReceipt(result);\n}\n\nexport async function fetchPremiumPromo() {\n  const result = await invokeRequest(new GramJs.help.GetPremiumPromo());\n  if (!result) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  result.videos.forEach((video) => {\n    if (video instanceof GramJs.Document) {\n      localDb.documents[video.id.toString()] = video;\n    }\n  });\n\n  return {\n    promo: buildApiPremiumPromo(result),\n    users,\n  };\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiInvoice, ApiPaymentSavedInfo, ApiPremiumPromo } from '../../types';\n\nimport { buildApiDocument, buildApiMessageEntity, buildApiWebDocument } from './messages';\nimport { omitVirtualClassFields } from './helpers';\n\nexport function buildShippingOptions(shippingOptions: GramJs.ShippingOption[] | undefined) {\n  if (!shippingOptions) {\n    return undefined;\n  }\n  return Object.values(shippingOptions).map((option) => {\n    return {\n      id: option.id,\n      title: option.title,\n      amount: option.prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0),\n      prices: option.prices.map(({ label, amount }) => {\n        return {\n          label,\n          amount: amount.toJSNumber(),\n        };\n      }),\n    };\n  });\n}\n\nexport function buildReceipt(receipt: GramJs.payments.PaymentReceipt) {\n  const {\n    invoice,\n    info,\n    shipping,\n    currency,\n    totalAmount,\n    credentialsTitle,\n  } = receipt;\n\n  const { shippingAddress, phone, name } = (info || {});\n\n  const { prices } = invoice;\n  const mapedPrices = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n\n  let shippingPrices;\n  let shippingMethod;\n\n  if (shipping) {\n    shippingPrices = shipping.prices.map(({ label, amount }) => {\n      return {\n        label,\n        amount: amount.toJSNumber(),\n      };\n    });\n    shippingMethod = shipping.title;\n  }\n\n  return {\n    currency,\n    prices: mapedPrices,\n    info: { shippingAddress, phone, name },\n    totalAmount: totalAmount.toJSNumber(),\n    credentialsTitle,\n    shippingPrices,\n    shippingMethod,\n  };\n}\n\nexport function buildPaymentForm(form: GramJs.payments.PaymentForm) {\n  const {\n    formId,\n    canSaveCredentials,\n    passwordMissing,\n    providerId,\n    nativeProvider,\n    nativeParams,\n    savedInfo,\n    invoice,\n  } = form;\n\n  const {\n    test,\n    nameRequested,\n    phoneRequested,\n    emailRequested,\n    shippingAddressRequested,\n    flexible,\n    phoneToProvider,\n    emailToProvider,\n    currency,\n    prices,\n  } = invoice;\n\n  const mappedPrices = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n  const { shippingAddress } = savedInfo || {};\n  const cleanedInfo: ApiPaymentSavedInfo | undefined = savedInfo ? omitVirtualClassFields(savedInfo) : undefined;\n  if (cleanedInfo && shippingAddress) {\n    cleanedInfo.shippingAddress = omitVirtualClassFields(shippingAddress);\n  }\n\n  const nativeData = nativeParams ? JSON.parse(nativeParams.data) : {};\n\n  return {\n    canSaveCredentials,\n    passwordMissing,\n    formId: String(formId),\n    providerId: String(providerId),\n    nativeProvider,\n    savedInfo: cleanedInfo,\n    invoice: {\n      test,\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices: mappedPrices,\n    },\n    nativeParams: {\n      needCardholderName: nativeData.need_cardholder_name,\n      needCountry: nativeData.need_country,\n      needZip: nativeData.need_zip,\n      publishableKey: nativeData.publishable_key,\n      publicToken: nativeData?.public_token,\n    },\n  };\n}\n\nexport function buildApiInvoiceFromForm(form: GramJs.payments.PaymentForm): ApiInvoice {\n  const {\n    invoice, description: text, title, photo,\n  } = form;\n  const {\n    test, currency, prices, recurring, recurringTermsUrl,\n  } = invoice;\n\n  const totalAmount = prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0);\n\n  return {\n    text,\n    title,\n    photo: buildApiWebDocument(photo),\n    amount: totalAmount,\n    currency,\n    isTest: test,\n    isRecurring: recurring,\n    recurringTermsUrl,\n  };\n}\n\nexport function buildApiPremiumPromo(promo: GramJs.help.PremiumPromo): ApiPremiumPromo {\n  const {\n    statusText, statusEntities, videos, videoSections, currency, monthlyAmount,\n  } = promo;\n\n  return {\n    statusText,\n    statusEntities: statusEntities.map((l) => buildApiMessageEntity(l)),\n    videoSections,\n    currency,\n    videos: videos.map(buildApiDocument).filter(Boolean),\n    monthlyAmount: monthlyAmount.toString(),\n  };\n}\n","import BigInt from 'big-integer';\nimport type {\n  ApiChat, ApiPhoto, ApiReportReason, ApiUser,\n} from '../../types';\nimport { invokeRequest } from './client';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { buildInputPeer, buildInputReportReason, buildInputPhoto } from '../gramjsBuilders';\n\nexport async function reportPeer({\n  peer,\n  reason,\n  description,\n}: {\n  peer: ApiChat | ApiUser; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.account.ReportPeer({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function reportProfilePhoto({\n  peer,\n  photo,\n  reason,\n  description,\n}: {\n  peer: ApiChat | ApiUser; photo: ApiPhoto; reason: ApiReportReason; description?: string;\n}) {\n  const photoId = buildInputPhoto(photo);\n  if (!photoId) return undefined;\n\n  const result = await invokeRequest(new GramJs.account.ReportProfilePhoto({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    photoId,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function changeSessionSettings({\n  hash, areCallsEnabled, areSecretChatsEnabled,\n}: {\n  hash: string; areCallsEnabled?: boolean; areSecretChatsEnabled?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.ChangeAuthorizationSettings({\n    hash: BigInt(hash),\n    ...(areCallsEnabled !== undefined ? { callRequestsDisabled: !areCallsEnabled } : undefined),\n    ...(areSecretChatsEnabled !== undefined ? { encryptedRequestsDisabled: !areSecretChatsEnabled } : undefined),\n  }));\n\n  return result;\n}\n\nexport async function changeSessionTtl({\n  days,\n}: {\n  days: number;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetAuthorizationTTL({\n    authorizationTtlDays: days,\n  }));\n\n  return result;\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport BigInt from 'big-integer';\nimport localDb from '../localDb';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiAppConfig } from '../../types';\nimport type { ApiLimitType } from '../../../global/types';\nimport { buildJson } from './misc';\nimport { DEFAULT_LIMITS } from '../../../config';\n\ntype LimitType = 'default' | 'premium';\ntype Limit = 'upload_max_fileparts' | 'stickers_faved_limit' | 'saved_gifs_limit' | 'dialog_filters_chats_limit' |\n'dialog_filters_limit' | 'dialogs_folder_pinned_limit' | 'dialogs_pinned_limit' | 'caption_length_limit' |\n'channels_limit' | 'channels_public_limit' | 'about_length_limit';\ntype LimitKey = `${Limit}_${LimitType}`;\ntype LimitsConfig = Record<LimitKey, number>;\n\ninterface GramJsAppConfig extends LimitsConfig {\n  emojies_sounds: Record<string, {\n    id: string;\n    access_hash: string;\n    file_reference_base64: string;\n  }>;\n  emojies_send_dice: string[];\n  groupcall_video_participants_max: number;\n  reactions_default: string;\n  reactions_uniq_max: number;\n  chat_read_mark_size_threshold: number;\n  chat_read_mark_expire_period: number;\n  autologin_domains: string[];\n  autologin_token: string;\n  url_auth_domains: string[];\n  premium_purchase_blocked: boolean;\n  premium_bot_username: string;\n  premium_invoice_slug: string;\n  premium_promo_order: string[];\n}\n\nfunction buildEmojiSounds(appConfig: GramJsAppConfig) {\n  const { emojies_sounds } = appConfig;\n  return emojies_sounds ? Object.keys(emojies_sounds).reduce((acc: Record<string, string>, key) => {\n    const l = emojies_sounds[key];\n    localDb.documents[l.id] = new GramJs.Document({\n      id: BigInt(l.id),\n      accessHash: BigInt(l.access_hash),\n      dcId: 1,\n      mimeType: 'audio/ogg',\n      fileReference: Buffer.from(atob(l.file_reference_base64\n        .replace(/-/g, '+')\n        .replace(/_/g, '/'))),\n    } as GramJs.Document);\n\n    acc[key] = l.id;\n    return acc;\n  }, {}) : {};\n}\n\nfunction getLimit(appConfig: GramJsAppConfig, key: Limit, fallbackKey: ApiLimitType) {\n  const defaultLimit = appConfig[`${key}_default`] || DEFAULT_LIMITS[fallbackKey][0];\n  const premiumLimit = appConfig[`${key}_premium`] || DEFAULT_LIMITS[fallbackKey][1];\n  return [defaultLimit, premiumLimit] as const;\n}\n\nexport function buildAppConfig(json: GramJs.TypeJSONValue): ApiAppConfig {\n  const appConfig = buildJson(json) as GramJsAppConfig;\n\n  return {\n    emojiSounds: buildEmojiSounds(appConfig),\n    defaultReaction: appConfig.reactions_default,\n    seenByMaxChatMembers: appConfig.chat_read_mark_size_threshold,\n    seenByExpiresAt: appConfig.chat_read_mark_expire_period,\n    autologinDomains: appConfig.autologin_domains || [],\n    autologinToken: appConfig.autologin_token || '',\n    urlAuthDomains: appConfig.url_auth_domains || [],\n    premiumBotUsername: appConfig.premium_bot_username,\n    premiumInvoiceSlug: appConfig.premium_invoice_slug,\n    isPremiumPurchaseBlocked: appConfig.premium_purchase_blocked,\n    limits: {\n      uploadMaxFileparts: getLimit(appConfig, 'upload_max_fileparts', 'uploadMaxFileparts'),\n      stickersFaved: getLimit(appConfig, 'stickers_faved_limit', 'stickersFaved'),\n      savedGifs: getLimit(appConfig, 'saved_gifs_limit', 'savedGifs'),\n      dialogFiltersChats: getLimit(appConfig, 'dialog_filters_chats_limit', 'dialogFiltersChats'),\n      dialogFilters: getLimit(appConfig, 'dialog_filters_limit', 'dialogFilters'),\n      dialogFolderPinned: getLimit(appConfig, 'dialogs_pinned_limit', 'dialogFolderPinned'),\n      captionLength: getLimit(appConfig, 'caption_length_limit', 'captionLength'),\n      channels: getLimit(appConfig, 'channels_limit', 'channels'),\n      channelsPublic: getLimit(appConfig, 'channels_public_limit', 'channelsPublic'),\n      aboutLength: getLimit(appConfig, 'about_length_limit', 'aboutLength'),\n    },\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiAppConfig,\n  ApiChat,\n  ApiLangString,\n  ApiLanguage,\n  ApiNotifyException,\n  ApiUser,\n  ApiWallpaper,\n} from '../../types';\nimport type { ApiPrivacyKey, InputPrivacyRules, LangCode } from '../../../types';\n\nimport type { LANG_PACKS } from '../../../config';\nimport { BLOCKED_LIST_LIMIT, DEFAULT_LANG_PACK } from '../../../config';\nimport {\n  buildApiCountryList,\n  buildApiNotifyException,\n  buildApiSession,\n  buildApiWallpaper,\n  buildApiWebSession,\n  buildPrivacyRules,\n} from '../apiBuilders/misc';\n\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildAppConfig } from '../apiBuilders/appConfig';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport { buildInputEntity, buildInputPeer, buildInputPrivacyKey } from '../gramjsBuilders';\nimport { getClient, invokeRequest, uploadFile } from './client';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport localDb from '../localDb';\n\nconst MAX_INT_32 = 2 ** 31 - 1;\nconst BETA_LANG_CODES = ['ar', 'fa', 'id', 'ko', 'uz', 'en'];\n\nexport function updateProfile({\n  firstName,\n  lastName,\n  about,\n}: {\n  firstName?: string;\n  lastName?: string;\n  about?: string;\n}) {\n  return invokeRequest(new GramJs.account.UpdateProfile({\n    firstName: firstName || '',\n    lastName: lastName || '',\n    about: about || '',\n  }), true);\n}\n\nexport function checkUsername(username: string) {\n  return invokeRequest(new GramJs.account.CheckUsername({ username }));\n}\n\nexport function updateUsername(username: string) {\n  return invokeRequest(new GramJs.account.UpdateUsername({ username }), true);\n}\n\nexport async function updateProfilePhoto(file: File) {\n  const inputFile = await uploadFile(file);\n  return invokeRequest(new GramJs.photos.UploadProfilePhoto({\n    file: inputFile,\n  }), true);\n}\n\nexport async function uploadProfilePhoto(file: File) {\n  const inputFile = await uploadFile(file);\n  await invokeRequest(new GramJs.photos.UploadProfilePhoto({\n    file: inputFile,\n  }));\n}\n\nexport async function fetchWallpapers() {\n  const result = await invokeRequest(new GramJs.account.GetWallPapers({ hash: BigInt('0') }));\n\n  if (!result || result instanceof GramJs.account.WallPapersNotModified) {\n    return undefined;\n  }\n\n  const filteredWallpapers = result.wallpapers.filter((wallpaper) => {\n    if (\n      !(wallpaper instanceof GramJs.WallPaper)\n      || !(wallpaper.document instanceof GramJs.Document)\n    ) {\n      return false;\n    }\n\n    return !wallpaper.pattern && wallpaper.document.mimeType !== 'application/x-tgwallpattern';\n  }) as GramJs.WallPaper[];\n\n  filteredWallpapers.forEach((wallpaper) => {\n    localDb.documents[String(wallpaper.document.id)] = wallpaper.document as GramJs.Document;\n  });\n\n  return {\n    wallpapers: filteredWallpapers.map(buildApiWallpaper).filter<ApiWallpaper>(Boolean as any),\n  };\n}\n\nexport async function uploadWallpaper(file: File) {\n  const inputFile = await uploadFile(file);\n\n  const result = await invokeRequest(new GramJs.account.UploadWallPaper({\n    file: inputFile,\n    mimeType: file.type,\n    settings: new GramJs.WallPaperSettings(),\n  }));\n\n  if (!result || !(result instanceof GramJs.WallPaper)) {\n    return undefined;\n  }\n\n  const wallpaper = buildApiWallpaper(result);\n  if (!wallpaper) {\n    return undefined;\n  }\n\n  localDb.documents[String(result.document.id)] = result.document as GramJs.Document;\n\n  return { wallpaper };\n}\n\nexport async function fetchBlockedContacts() {\n  const result = await invokeRequest(new GramJs.contacts.GetBlocked({\n    limit: BLOCKED_LIST_LIMIT,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter<ApiUser>(Boolean as any),\n    chats: result.chats.map((chat) => buildApiChatFromPreview(chat, undefined, true)).filter<ApiChat>(Boolean as any),\n    blockedIds: result.blocked.map((blocked) => getApiChatIdFromMtpPeer(blocked.peerId)),\n    totalCount: result instanceof GramJs.contacts.BlockedSlice ? result.count : result.blocked.length,\n  };\n}\n\nexport function blockContact(chatOrUserId: string, accessHash?: string) {\n  return invokeRequest(new GramJs.contacts.Block({\n    id: buildInputPeer(chatOrUserId, accessHash),\n  }));\n}\n\nexport function unblockContact(chatOrUserId: string, accessHash?: string) {\n  return invokeRequest(new GramJs.contacts.Unblock({\n    id: buildInputPeer(chatOrUserId, accessHash),\n  }));\n}\n\nexport async function fetchAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    authorizations: buildCollectionByKey(result.authorizations.map(buildApiSession), 'hash'),\n    ttlDays: result.authorizationTtlDays,\n  };\n}\n\nexport function terminateAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllAuthorizations() {\n  return invokeRequest(new GramJs.auth.ResetAuthorizations());\n}\n\nexport async function fetchWebAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetWebAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n\n  return buildCollectionByKey(result.authorizations.map(buildApiWebSession), 'hash');\n}\n\nexport function terminateWebAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetWebAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllWebAuthorizations() {\n  return invokeRequest(new GramJs.account.ResetWebAuthorizations());\n}\n\nexport async function fetchNotificationExceptions({\n  serverTimeOffset,\n}: { serverTimeOffset: number }) {\n  const result = await invokeRequest(new GramJs.account.GetNotifyExceptions({\n    compareSound: true,\n  }), undefined, undefined, true);\n\n  if (!(result instanceof GramJs.Updates || result instanceof GramJs.UpdatesCombined)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.updates.reduce((acc, update) => {\n    if (!(update instanceof GramJs.UpdateNotifySettings && update.peer instanceof GramJs.NotifyPeer)) {\n      return acc;\n    }\n\n    acc.push(buildApiNotifyException(update.notifySettings, update.peer.peer, serverTimeOffset));\n\n    return acc;\n  }, [] as ApiNotifyException[]);\n}\n\nexport async function fetchNotificationSettings({\n  serverTimeOffset,\n}: { serverTimeOffset: number }) {\n  const [\n    isMutedContactSignUpNotification,\n    privateContactNotificationsSettings,\n    groupNotificationsSettings,\n    broadcastNotificationsSettings,\n  ] = await Promise.all([\n    invokeRequest(new GramJs.account.GetContactSignUpNotification()),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyUsers(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyChats(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyBroadcasts(),\n    })),\n  ]);\n\n  if (!privateContactNotificationsSettings || !groupNotificationsSettings || !broadcastNotificationsSettings) {\n    return false;\n  }\n\n  const {\n    silent: privateSilent, muteUntil: privateMuteUntil, showPreviews: privateShowPreviews,\n  } = privateContactNotificationsSettings;\n  const {\n    silent: groupSilent, muteUntil: groupMuteUntil, showPreviews: groupShowPreviews,\n  } = groupNotificationsSettings;\n  const {\n    silent: broadcastSilent, muteUntil: broadcastMuteUntil, showPreviews: broadcastShowPreviews,\n  } = broadcastNotificationsSettings;\n\n  return {\n    hasContactJoinedNotifications: !isMutedContactSignUpNotification,\n    hasPrivateChatsNotifications: !(\n      privateSilent\n      || (typeof privateMuteUntil === 'number' && getServerTime(serverTimeOffset) < privateMuteUntil)\n    ),\n    hasPrivateChatsMessagePreview: privateShowPreviews,\n    hasGroupNotifications: !(\n      groupSilent || (typeof groupMuteUntil === 'number'\n        && getServerTime(serverTimeOffset) < groupMuteUntil)\n    ),\n    hasGroupMessagePreview: groupShowPreviews,\n    hasBroadcastNotifications: !(\n      broadcastSilent || (typeof broadcastMuteUntil === 'number'\n        && getServerTime(serverTimeOffset) < broadcastMuteUntil)\n    ),\n    hasBroadcastMessagePreview: broadcastShowPreviews,\n  };\n}\n\nexport function updateContactSignUpNotification(isSilent: boolean) {\n  return invokeRequest(new GramJs.account.SetContactSignUpNotification({ silent: isSilent }));\n}\n\nexport function updateNotificationSettings(peerType: 'contact' | 'group' | 'broadcast', {\n  isSilent,\n  shouldShowPreviews,\n}: {\n  isSilent: boolean;\n  shouldShowPreviews: boolean;\n}) {\n  let peer: GramJs.TypeInputNotifyPeer;\n  if (peerType === 'contact') {\n    peer = new GramJs.InputNotifyUsers();\n  } else if (peerType === 'group') {\n    peer = new GramJs.InputNotifyChats();\n  } else {\n    peer = new GramJs.InputNotifyBroadcasts();\n  }\n\n  const settings = {\n    showPreviews: shouldShowPreviews,\n    silent: isSilent,\n    muteUntil: isSilent ? MAX_INT_32 : 0,\n  };\n\n  return invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer,\n    settings: new GramJs.InputPeerNotifySettings(settings),\n  }));\n}\n\nexport async function fetchLanguages(): Promise<ApiLanguage[] | undefined> {\n  const result = await invokeRequest(new GramJs.langpack.GetLanguages({\n    langPack: DEFAULT_LANG_PACK,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(omitVirtualClassFields);\n}\n\nexport async function fetchLangPack({ sourceLangPacks, langCode }: {\n  sourceLangPacks: typeof LANG_PACKS;\n  langCode: string;\n}) {\n  const results = await Promise.all(sourceLangPacks.map((langPack) => {\n    return invokeRequest(new GramJs.langpack.GetLangPack({\n      langPack,\n      langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    }));\n  }));\n\n  const collections = results\n    .filter<GramJs.LangPackDifference>(Boolean as any)\n    .map((result) => {\n      return buildCollectionByKey(result.strings.map<ApiLangString>(omitVirtualClassFields), 'key');\n    });\n\n  if (!collections.length) {\n    return undefined;\n  }\n\n  return { langPack: Object.assign({}, ...collections.reverse()) as typeof collections[0] };\n}\n\nexport async function fetchLangStrings({ langPack, langCode, keys }: {\n  langPack: string; langCode: string; keys: string[];\n}) {\n  const result = await invokeRequest(new GramJs.langpack.GetStrings({\n    langPack,\n    langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    keys,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(omitVirtualClassFields);\n}\n\nexport async function fetchPrivacySettings(privacyKey: ApiPrivacyKey) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const result = await invokeRequest(new GramJs.account.GetPrivacy({ key }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return buildPrivacyRules(result.rules);\n}\n\nexport function registerDevice(token: string) {\n  const client = getClient();\n  const secret = client.session.getAuthKey().getKey();\n  return invokeRequest(new GramJs.account.RegisterDevice({\n    tokenType: 10,\n    secret,\n    appSandbox: false,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport function unregisterDevice(token: string) {\n  return invokeRequest(new GramJs.account.UnregisterDevice({\n    tokenType: 10,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport async function setPrivacySettings(\n  privacyKey: ApiPrivacyKey, rules: InputPrivacyRules,\n) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const privacyRules: GramJs.TypeInputPrivacyRule[] = [];\n\n  if (rules.allowedUsers) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowUsers({\n      users: rules.allowedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.allowedChats) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowChatParticipants({\n      chats: rules.allowedChats.map(({ id }) => buildInputEntity(id) as BigInt.BigInteger),\n    }));\n  }\n  if (rules.blockedUsers) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowUsers({\n      users: rules.blockedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.blockedChats) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowChatParticipants({\n      chats: rules.blockedChats.map(({ id }) => buildInputEntity(id) as BigInt.BigInteger),\n    }));\n  }\n  switch (rules.visibility) {\n    case 'everybody':\n      privacyRules.push(new GramJs.InputPrivacyValueAllowAll());\n      break;\n\n    case 'contacts':\n      privacyRules.push(new GramJs.InputPrivacyValueAllowContacts());\n      break;\n\n    case 'nonContacts':\n      privacyRules.push(new GramJs.InputPrivacyValueDisallowContacts());\n      break;\n\n    case 'nobody':\n      privacyRules.push(new GramJs.InputPrivacyValueDisallowAll());\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.account.SetPrivacy({ key, rules: privacyRules }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return buildPrivacyRules(result.rules);\n}\n\nexport async function updateIsOnline(isOnline: boolean) {\n  await invokeRequest(new GramJs.account.UpdateStatus({ offline: !isOnline }));\n}\n\nexport async function fetchContentSettings() {\n  const result = await invokeRequest(new GramJs.account.GetContentSettings());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    isSensitiveEnabled: Boolean(result.sensitiveEnabled),\n    canChangeSensitive: Boolean(result.sensitiveCanChange),\n  };\n}\n\nexport function updateContentSettings(isEnabled: boolean) {\n  return invokeRequest(new GramJs.account.SetContentSettings({\n    sensitiveEnabled: isEnabled || undefined,\n  }));\n}\n\nexport async function fetchAppConfig(): Promise<ApiAppConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetAppConfig());\n  if (!result) return undefined;\n\n  return buildAppConfig(result);\n}\n\nfunction updateLocalDb(\n  result: (\n    GramJs.account.PrivacyRules | GramJs.contacts.Blocked | GramJs.contacts.BlockedSlice |\n    GramJs.Updates | GramJs.UpdatesCombined\n  ),\n) {\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n}\n\nexport async function fetchCountryList({ langCode = 'en' }: { langCode?: LangCode }) {\n  const countryList = await invokeRequest(new GramJs.help.GetCountriesList({\n    langCode,\n  }));\n\n  if (!(countryList instanceof GramJs.help.CountriesList)) {\n    return undefined;\n  }\n  return buildApiCountryList(countryList.countries);\n}\n\nexport async function fetchGlobalPrivacySettings() {\n  const result = await invokeRequest(new GramJs.account.GetGlobalPrivacySettings());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n  };\n}\n\nexport async function updateGlobalPrivacySettings({ shouldArchiveAndMuteNewNonContact } : {\n  shouldArchiveAndMuteNewNonContact: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetGlobalPrivacySettings({\n    settings: new GramJs.GlobalPrivacySettings({\n      archiveAndMuteNewNoncontactPeers: shouldArchiveAndMuteNewNonContact,\n    }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n  };\n}\n","import type { ApiChat, ApiUser } from '../../types';\nimport { invokeRequest } from './client';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { buildInputPeer } from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport { buildApiAvailableReaction, buildMessagePeerReaction } from '../apiBuilders/messages';\nimport { REACTION_LIST_LIMIT } from '../../../config';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildApiUser } from '../apiBuilders/users';\n\nexport function sendWatchingEmojiInteraction({\n  chat,\n  emoticon,\n}: {\n  chat: ApiChat; emoticon: string;\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteractionSeen({\n      emoticon,\n    }),\n  }));\n}\n\nexport function sendEmojiInteraction({\n  chat,\n  emoticon,\n  messageId,\n  timestamps,\n}: {\n  chat: ApiChat; messageId: number; emoticon: string; timestamps: number[];\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteraction({\n      emoticon,\n      msgId: messageId,\n      interaction: new GramJs.DataJSON({\n        data: JSON.stringify({\n          v: 1,\n          a: timestamps.map((t: number) => ({\n            t,\n            i: 1,\n          })),\n        }),\n      }),\n    }),\n  }));\n}\n\nexport async function getAvailableReactions() {\n  const result = await invokeRequest(new GramJs.messages.GetAvailableReactions({}));\n\n  if (!result || result instanceof GramJs.messages.AvailableReactionsNotModified) {\n    return undefined;\n  }\n\n  result.reactions.forEach((reaction) => {\n    if (reaction.staticIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.staticIcon.id)] = reaction.staticIcon;\n    }\n    if (reaction.selectAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.selectAnimation.id)] = reaction.selectAnimation;\n    }\n    if (reaction.aroundAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.aroundAnimation.id)] = reaction.aroundAnimation;\n    }\n    if (reaction.centerIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.centerIcon.id)] = reaction.centerIcon;\n    }\n  });\n\n  return result.reactions.map(buildApiAvailableReaction);\n}\n\nexport function sendReaction({\n  chat, messageId, reaction,\n}: {\n  chat: ApiChat; messageId: number; reaction?: string;\n}) {\n  return invokeRequest(new GramJs.messages.SendReaction({\n    ...(reaction && { reaction }),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }), true);\n}\n\nexport function fetchMessageReactions({\n  ids, chat,\n}: {\n  ids: number[]; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.GetMessagesReactions({\n    id: ids,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport async function fetchMessageReactionsList({\n  chat, messageId, reaction, offset,\n}: {\n  chat: ApiChat; messageId: number; reaction?: string; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReactionsList({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(reaction && { reaction }),\n    limit: REACTION_LIST_LIMIT,\n    ...(offset && { offset }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const { nextOffset, reactions, count } = result;\n\n  return {\n    users: result.users.map(buildApiUser).filter<ApiUser>(Boolean as any),\n    nextOffset,\n    reactions: reactions.map(buildMessagePeerReaction),\n    count,\n  };\n}\n\nexport function setDefaultReaction({\n  reaction,\n}: {\n  reaction: string;\n}) {\n  return invokeRequest(new GramJs.messages.SetDefaultReaction({\n    reaction,\n  }));\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessageStatistics,\n  ApiMessagePublicForward,\n  StatisticsGraph,\n  StatisticsOverviewItem,\n  StatisticsOverviewPercentage,\n  StatisticsOverviewPeriod,\n} from '../../types';\nimport { buildAvatarHash } from './chats';\nimport { buildApiPeerId } from './peers';\n\nexport function buildChannelStatistics(stats: GramJs.stats.BroadcastStats): ApiChannelStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    followersGraph: buildGraph(stats.followersGraph),\n    muteGraph: buildGraph(stats.muteGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    viewsBySourceGraph: (stats.viewsBySourceGraph as GramJs.StatsGraphAsync).token,\n    newFollowersBySourceGraph: (stats.newFollowersBySourceGraph as GramJs.StatsGraphAsync).token,\n    interactionsGraph: (stats.interactionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    followers: buildStatisticsOverview(stats.followers),\n    viewsPerPost: buildStatisticsOverview(stats.viewsPerPost),\n    sharesPerPost: buildStatisticsOverview(stats.sharesPerPost),\n    enabledNotifications: buildStatisticsPercentage(stats.enabledNotifications),\n\n    // Recent posts\n    recentTopMessages: stats.recentMessageInteractions,\n  };\n}\n\nexport function buildGroupStatistics(stats: GramJs.stats.MegagroupStats): ApiGroupStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    membersGraph: buildGraph(stats.membersGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    messagesGraph: (stats.messagesGraph as GramJs.StatsGraphAsync).token,\n    actionsGraph: (stats.actionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    period: getOverviewPeriod(stats.period),\n    members: buildStatisticsOverview(stats.members),\n    viewers: buildStatisticsOverview(stats.viewers),\n    messages: buildStatisticsOverview(stats.messages),\n    posters: buildStatisticsOverview(stats.posters),\n  };\n}\n\nexport function buildMessageStatistics(stats: GramJs.stats.MessageStats): ApiMessageStatistics {\n  return {\n    viewsGraph: buildGraph(stats.viewsGraph),\n  };\n}\n\nexport function buildMessagePublicForwards(\n  result: GramJs.messages.TypeMessages,\n): ApiMessagePublicForward[] | undefined {\n  if (!result || !('messages' in result)) {\n    return undefined;\n  }\n\n  return result.messages.map((message) => {\n    const peerId = buildApiPeerId((message.peerId as GramJs.PeerChannel).channelId, 'channel');\n    const channel = result.chats.find((p) => buildApiPeerId(p.id, 'channel') === peerId);\n\n    return {\n      messageId: message.id,\n      views: (message as GramJs.Message).views,\n      title: (channel as GramJs.Channel).title,\n      chat: {\n        id: peerId,\n        type: 'chatTypeChannel',\n        username: (channel as GramJs.Channel).username,\n        avatarHash: buildAvatarHash((channel as GramJs.Channel).photo),\n      },\n    };\n  });\n}\n\nexport function buildGraph(\n  result: GramJs.TypeStatsGraph, isPercentage?: boolean,\n): StatisticsGraph | undefined {\n  if ((result as GramJs.StatsGraphError).error) {\n    return undefined;\n  }\n\n  const data = JSON.parse((result as GramJs.StatsGraph).json.data);\n  const [x, ...y] = data.columns;\n  const hasSecondYAxis = data.y_scaled;\n\n  return {\n    type: isPercentage ? 'area' : data.types.y0,\n    zoomToken: (result as GramJs.StatsGraph).zoomToken,\n    labelFormatter: data.xTickFormatter,\n    tooltipFormatter: data.xTooltipFormatter,\n    labels: x.slice(1),\n    hideCaption: !data.subchart.show,\n    hasSecondYAxis,\n    isStacked: data.stacked && !hasSecondYAxis,\n    isPercentage,\n    datasets: y.map((item: any) => {\n      const key = item[0];\n\n      return {\n        name: data.names[key],\n        color: extractColor(data.colors[key]),\n        values: item.slice(1),\n      };\n    }),\n    ...calculateMinimapRange(data.subchart.defaultZoom, x.slice(1)),\n  };\n}\n\nfunction extractColor(color: string): string {\n  return color.substring(color.indexOf('#'));\n}\n\nfunction calculateMinimapRange(range: Array<number>, values: Array<number>) {\n  const [min, max] = range;\n\n  let minIndex = 0;\n  let maxIndex = values.length - 1;\n\n  values.forEach((item, index) => {\n    if (!minIndex && item >= min) {\n      minIndex = index;\n    }\n\n    if (!maxIndex && item >= max) {\n      maxIndex = index;\n    }\n  });\n\n  const begin = Math.max(0, minIndex / (values.length - 1));\n  const end = Math.min(1, maxIndex / (values.length - 1));\n\n  return { minimapRange: { begin, end }, labelFromIndex: minIndex, labelToIndex: maxIndex };\n}\n\nfunction buildStatisticsOverview({ current, previous }: GramJs.StatsAbsValueAndPrev): StatisticsOverviewItem {\n  const change = current - previous;\n\n  return {\n    current,\n    change,\n    ...(previous && { percentage: (change ? ((Math.abs(change) / previous) * 100) : 0).toFixed(2) }),\n  };\n}\n\nfunction buildStatisticsPercentage(data: GramJs.StatsPercentValue): StatisticsOverviewPercentage {\n  return {\n    percentage: ((data.part / data.total) * 100).toFixed(2),\n  };\n}\n\nfunction getOverviewPeriod(data: GramJs.StatsDateRangeDays): StatisticsOverviewPeriod {\n  return {\n    maxDate: data.maxDate,\n    minDate: data.minDate,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph,\n} from '../../types';\n\nimport { invokeRequest } from './client';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildInputEntity } from '../gramjsBuilders';\nimport {\n  buildChannelStatistics, buildGroupStatistics, buildMessageStatistics, buildMessagePublicForwards, buildGraph,\n} from '../apiBuilders/statistics';\n\nexport async function fetchChannelStatistics({\n  chat,\n}: { chat: ApiChat }): Promise<ApiChannelStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetBroadcastStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildChannelStatistics(result);\n}\n\nexport async function fetchGroupStatistics({\n  chat,\n}: { chat: ApiChat }): Promise<ApiGroupStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMegagroupStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildGroupStatistics(result);\n}\n\nexport async function fetchMessageStatistics({\n  chat,\n  messageId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n}): Promise<ApiMessageStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessageStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildMessageStatistics(result);\n}\n\nexport async function fetchMessagePublicForwards({\n  chat,\n  messageId,\n  dcId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  dcId?: number;\n}): Promise<ApiMessagePublicForward[] | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessagePublicForwards({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n    offsetPeer: new GramJs.InputPeerEmpty(),\n  }), undefined, undefined, undefined, dcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  return buildMessagePublicForwards(result);\n}\n\nexport async function fetchStatisticsAsyncGraph({\n  token,\n  x,\n  isPercentage,\n  dcId,\n}: {\n  token: string;\n  x?: number;\n  isPercentage?: boolean;\n  dcId?: number;\n}): Promise<StatisticsGraph | undefined> {\n  const result = await invokeRequest(new GramJs.stats.LoadAsyncGraph({\n    token,\n    ...(x && { x: BigInt(x) }),\n  }), undefined, undefined, undefined, dcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildGraph(result as GramJs.StatsGraph, isPercentage);\n}\n","import BigInt from 'big-integer';\nimport type bigInt from 'big-integer';\nimport MTProtoState from '../../../lib/gramjs/network/MTProtoState';\nimport Logger from '../../../lib/gramjs/extensions/Logger';\nimport Helpers from '../../../lib/gramjs/Helpers';\nimport AuthKey from '../../../lib/gramjs/crypto/AuthKey';\n\ntype DhConfig = {\n  p: number[];\n  g: number;\n  random: number[];\n};\n\nlet currentPhoneCallState: PhoneCallState | undefined;\n\nclass PhoneCallState {\n  private state?: MTProtoState;\n\n  private seq = 0;\n\n  private gA?: bigInt.BigInteger;\n\n  private gB: any;\n\n  private p?: bigInt.BigInteger;\n\n  private random?: bigInt.BigInteger;\n\n  private waitForState: Promise<void>;\n\n  private resolveState?: VoidFunction;\n\n  constructor(\n    private isOutgoing: boolean,\n  ) {\n    this.waitForState = new Promise<void>((resolve) => {\n      this.resolveState = resolve;\n    });\n  }\n\n  async requestCall({ p, g, random }: DhConfig) {\n    const pBN = Helpers.readBigIntFromBuffer(Buffer.from(p), false);\n    const randomBN = Helpers.readBigIntFromBuffer(Buffer.from(random), false);\n\n    const gA = Helpers.modExp(BigInt(g), randomBN, pBN);\n\n    this.gA = gA;\n    this.p = pBN;\n    this.random = randomBN;\n\n    const gAHash: Buffer = await Helpers.sha256(Helpers.getByteArray(gA));\n    return Array.from(gAHash);\n  }\n\n  acceptCall({ p, g, random }: DhConfig) {\n    const pLast = Helpers.readBigIntFromBuffer(p, false);\n    const randomLast = Helpers.readBigIntFromBuffer(random, false);\n\n    const gB = Helpers.modExp(BigInt(g), randomLast, pLast);\n    this.gB = gB;\n    this.p = pLast;\n    this.random = randomLast;\n\n    return Array.from(Helpers.getByteArray(gB));\n  }\n\n  async confirmCall(gAOrB: number[], emojiData: Uint16Array, emojiOffsets: number[]) {\n    if (this.isOutgoing) {\n      this.gB = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    } else {\n      this.gA = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    }\n    const authKey = Helpers.modExp(\n      !this.isOutgoing ? this.gA : this.gB,\n      this.random,\n      this.p,\n    );\n    const fingerprint: Buffer = await Helpers.sha1(Helpers.getByteArray(authKey));\n    const keyFingerprint = Helpers.readBigIntFromBuffer(fingerprint.slice(-8).reverse(), false);\n\n    const emojis = await generateEmojiFingerprint(\n      Helpers.getByteArray(authKey),\n      Helpers.getByteArray(this.gA),\n      emojiData,\n      emojiOffsets,\n    );\n\n    const key = new AuthKey();\n    await key.setKey(Helpers.getByteArray(authKey));\n    this.state = new MTProtoState(key, new Logger(), true, this.isOutgoing);\n    this.resolveState!();\n\n    return { gA: Array.from(Helpers.getByteArray(this.gA)), keyFingerprint: keyFingerprint.toString(), emojis };\n  }\n\n  async encode(data: string) {\n    if (!this.state) return undefined;\n\n    const seqArray = new Uint32Array(1);\n    seqArray[0] = this.seq++;\n    const encodedData = await this.state.encryptMessageData(\n      Buffer.concat([Helpers.convertToLittle(seqArray), Buffer.from(data)]),\n    );\n    return Array.from(encodedData);\n  }\n\n  async decode(data: number[]): Promise<any> {\n    if (!this.state) {\n      return this.waitForState.then(() => {\n        return this.decode(data);\n      });\n    }\n\n    const message = await this.state.decryptMessageData(Buffer.from(data));\n\n    return JSON.parse(message.toString());\n  }\n}\n\n// https://github.com/TelegramV/App/blob/ead52320975362139cabad18cf8346f98c349a22/src/js/MTProto/Calls/Internal.js#L72\nfunction computeEmojiIndex(bytes: Uint8Array) {\n  return ((BigInt(bytes[0]).and(0x7F)).shiftLeft(56))\n    .or((BigInt(bytes[1]).shiftLeft(48)))\n    .or((BigInt(bytes[2]).shiftLeft(40)))\n    .or((BigInt(bytes[3]).shiftLeft(32)))\n    .or((BigInt(bytes[4]).shiftLeft(24)))\n    .or((BigInt(bytes[5]).shiftLeft(16)))\n    .or((BigInt(bytes[6]).shiftLeft(8)))\n    .or((BigInt(bytes[7])));\n}\n\nexport async function generateEmojiFingerprint(\n  authKey: Uint8Array, gA: Uint8Array, emojiData: Uint16Array, emojiOffsets: number[],\n) {\n  const hash = await Helpers.sha256(Buffer.concat([new Uint8Array(authKey), new Uint8Array(gA)]));\n  const result = [];\n  const emojiCount = emojiOffsets.length - 1;\n  const kPartSize = 8;\n  for (let partOffset = 0; partOffset !== hash.byteLength; partOffset += kPartSize) {\n    const value = computeEmojiIndex(hash.subarray(partOffset, partOffset + kPartSize));\n    const index = value.modPow(1, emojiCount).toJSNumber();\n    const offset = emojiOffsets[index];\n    const size = emojiOffsets[index + 1] - offset;\n    result.push(String.fromCharCode(...emojiData.subarray(offset, offset + size)));\n  }\n  return result.join('');\n}\n\nexport function createPhoneCallState(params: ConstructorParameters<typeof PhoneCallState>) {\n  currentPhoneCallState = new PhoneCallState(...params);\n}\n\nexport function destroyPhoneCallState() {\n  currentPhoneCallState = undefined;\n}\n\ntype FunctionPropertyOf<T> = {\n  [P in keyof T]: T[P] extends Function\n    ? P\n    : never\n}[keyof T];\n\ntype ParamsOf<T extends FunctionPropertyOf<PhoneCallState>> = Parameters<PhoneCallState[T]>;\ntype ReturnTypeOf<T extends FunctionPropertyOf<PhoneCallState>> = ReturnType<PhoneCallState[T]>;\n\nexport function encodePhoneCallData(params: ParamsOf<'encode'>): ReturnTypeOf<'encode'> {\n  return currentPhoneCallState!.encode(...params);\n}\n\nexport function decodePhoneCallData(params: ParamsOf<'decode'>): ReturnTypeOf<'decode'> {\n  return currentPhoneCallState!.decode(...params);\n}\n\nexport function confirmPhoneCall(params: ParamsOf<'confirmCall'>): ReturnTypeOf<'confirmCall'> {\n  return currentPhoneCallState!.confirmCall(...params);\n}\n\nexport function acceptPhoneCall(params: ParamsOf<'acceptCall'>): ReturnTypeOf<'acceptCall'> {\n  return currentPhoneCallState!.acceptCall(...params);\n}\n\nexport function requestPhoneCall(params: ParamsOf<'requestCall'>): ReturnTypeOf<'requestCall'> {\n  return currentPhoneCallState!.requestCall(...params);\n}\n","import type {\n  OnApiUpdate,\n  ApiInitialArgs,\n  ApiUpdate,\n  ApiOnProgress,\n} from '../types';\nimport type { Methods, MethodArgs, MethodResponse } from './methods/types';\n\nimport { API_THROTTLE_RESET_UPDATES, API_UPDATE_THROTTLE } from '../../config';\nimport { throttle, throttleWithTickEnd } from '../../util/schedulers';\nimport { init as initUpdater } from './updater';\nimport { init as initAuth } from './methods/auth';\nimport { init as initChats } from './methods/chats';\nimport { init as initMessages } from './methods/messages';\nimport { init as initUsers } from './methods/users';\nimport { init as initClient } from './methods/client';\nimport { init as initStickers } from './methods/symbols';\nimport { init as initManagement } from './methods/management';\nimport { init as initTwoFaSettings } from './methods/twoFaSettings';\nimport { init as initBots } from './methods/bots';\nimport { init as initCalls } from './methods/calls';\nimport { init as initPayments } from './methods/payments';\nimport * as methods from './methods';\n\nlet onUpdate: OnApiUpdate;\n\nexport async function initApi(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs) {\n  onUpdate = _onUpdate;\n  initUpdater(handleUpdate);\n  initAuth(handleUpdate);\n  initChats(handleUpdate);\n  initMessages(handleUpdate);\n  initUsers(handleUpdate);\n  initStickers(handleUpdate);\n  initManagement(handleUpdate);\n  initTwoFaSettings(handleUpdate);\n  initBots(handleUpdate);\n  initCalls(handleUpdate);\n  initPayments(handleUpdate);\n\n  // await initClient(handleUpdate, initialArgs);\n}\n\nexport function callApi<T extends keyof Methods>(fnName: T, ...args: MethodArgs<T>): MethodResponse<T> {\n  // @ts-ignore\n  return methods[fnName](...args) as MethodResponse<T>;\n}\n\nexport function cancelApiProgress(progressCallback: ApiOnProgress) {\n  progressCallback.isCanceled = true;\n}\n\nconst flushUpdatesOnTickEnd = throttleWithTickEnd(flushUpdates);\n\nlet flushUpdatesThrottled: typeof flushUpdatesOnTickEnd | undefined;\nlet currentThrottleId: number | undefined;\n\nlet pendingUpdates: ApiUpdate[] | undefined;\n\nfunction handleUpdate(update: ApiUpdate) {\n  if (!pendingUpdates) {\n    pendingUpdates = [update];\n  } else {\n    pendingUpdates.push(update);\n  }\n\n  if (!flushUpdatesThrottled || API_THROTTLE_RESET_UPDATES.has(update['@type'])) {\n    flushUpdatesThrottled = throttle(flushUpdatesOnTickEnd, API_UPDATE_THROTTLE, true);\n    currentThrottleId = Math.random();\n  }\n\n  flushUpdatesThrottled(currentThrottleId!);\n}\n\nfunction flushUpdates(throttleId: number) {\n  if (!pendingUpdates || throttleId !== currentThrottleId) {\n    return;\n  }\n\n  const currentUpdates = pendingUpdates!;\n  pendingUpdates = undefined;\n  currentUpdates.forEach(onUpdate);\n}\n","import type { ApiOnProgress, ApiUpdate } from '../../types';\nimport type { OriginMessageEvent, WorkerMessageData } from './types';\n\nimport { DEBUG } from '../../../config';\nimport { initApi, callApi, cancelApiProgress } from '../provider';\n\ndeclare const self: WorkerGlobalScope;\n\nhandleErrors();\n\nconst callbackState = new Map<string, ApiOnProgress>();\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD WORKER');\n}\n\nonmessage = async (message: OriginMessageEvent) => {\n  const { data } = message;\n\n  switch (data.type) {\n    case 'initApi': {\n      await initApi(onUpdate, data.args[0]);\n      break;\n    }\n    case 'callMethod': {\n      const { messageId, name, args } = data;\n      try {\n        if (messageId) {\n          const callback = (...callbackArgs: any[]) => {\n            const lastArg = callbackArgs[callbackArgs.length - 1];\n\n            sendToOrigin({\n              type: 'methodCallback',\n              messageId,\n              callbackArgs,\n            }, lastArg instanceof ArrayBuffer ? lastArg : undefined);\n          };\n\n          callbackState.set(messageId, callback);\n\n          args.push(callback as never);\n        }\n\n        const response = await callApi(name, ...args);\n\n        if (DEBUG && typeof response === 'object' && 'CONSTRUCTOR_ID' in response) {\n          // eslint-disable-next-line no-console\n          console.error(`[GramJs/worker] \\`${name}\\`: Unexpected response \\`${(response as any).className}\\``);\n        }\n\n        const { arrayBuffer } = (typeof response === 'object' && 'arrayBuffer' in response && response) || {};\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            response,\n          }, arrayBuffer);\n        }\n      } catch (error: any) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(error);\n        }\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            error: { message: error.message },\n          });\n        }\n      }\n\n      if (messageId) {\n        callbackState.delete(messageId);\n      }\n\n      break;\n    }\n    case 'cancelProgress': {\n      const callback = callbackState.get(data.messageId);\n      if (callback) {\n        cancelApiProgress(callback);\n      }\n\n      break;\n    }\n    case 'ping': {\n      sendToOrigin({\n        type: 'methodResponse',\n        messageId: data.messageId!,\n      });\n\n      break;\n    }\n  }\n};\n\nfunction handleErrors() {\n  self.onerror = (e) => {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.error.message || 'Uncaught exception in worker' } });\n  };\n\n  self.addEventListener('unhandledrejection', (e) => {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.reason.message || 'Uncaught rejection in worker' } });\n  });\n}\n\nfunction onUpdate(update: ApiUpdate) {\n  sendToOrigin({\n    type: 'update',\n    update,\n  });\n}\n\nfunction sendToOrigin(data: WorkerMessageData, arrayBuffer?: ArrayBuffer) {\n  if (arrayBuffer) {\n    postMessage(data, [arrayBuffer]);\n  } else {\n    postMessage(data);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [5802,3119,4503,3522], () => (__webpack_require__(98090)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"3119\":\"cc74ed3b63379448eba5\",\"3522\":\"4bef516166b2844ce0b8\",\"4503\":\"3e4805f40ec1dda5a7ac\",\"5802\":\"5a998479cf43543543ff\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t8090: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunktelegram_t\"] = self[\"webpackChunktelegram_t\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","API_UPDATE_THROTTLE","window","innerHeight","Math","round","API_THROTTLE_RESET_UPDATES","Set","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","SERVICE_NOTIFICATIONS_USER_ID","DEFAULT_LIMITS","uploadMaxFileparts","stickersFaved","savedGifs","dialogFiltersChats","dialogFilters","dialogFolderPinned","captionLength","channels","channelsPublic","aboutLength","onTickEndCallbacks","onTickEndPrimaryCallbacks","buildCollectionByKey","collection","key","reduce","byKey","member","pick","object","keys","result","bytesToDataUri","bytes","shouldOmitPrefix","mimeType","prefix","btoa","String","fromCharCode","omitVirtualClassFields","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","className","classType","getBytes","rest","pathBytesToSvg","width","height","replace","path","len","length","i","num","buildPath","DEFAULT_THUMB_SIZE","w","h","buildApiThumbnailFromStripped","sizes","thumb","find","s","GramJs","realSizes","filter","dataUri","strippedPhotoToJpg","undefined","buildApiPhoto","photo","map","buildApiPhotoSize","id","thumbnail","videoSizes","buildApiVideoSize","isVideo","videoSize","videoStartTs","size","type","photoSize","LOCAL_DB_INITIAL","localMessages","chats","users","messages","documents","stickerSets","photos","webDocuments","localDb","clearLocalDb","Object","assign","LOTTIE_STICKER_MIME_TYPE","VIDEO_STICKER_MIME_TYPE","buildStickerFromDocument","document","isNoPremium","videoThumbs","stickerAttribute","attributes","attr","fileAttribute","isLottie","imageSizeAttribute","videoSizeAttribute","sizeAttribute","stickerSetInfo","stickerset","emoji","alt","cachedThumb","thumbs","self","isWebmSupported","pathThumb","buildApiThumbnailFromCached","buildApiThumbnailFromPath","hasEffect","some","stickerSetId","stickerSetAccessHash","accessHash","buildStickerSet","set","archived","animated","installedDate","videos","title","count","shortName","isVideos","hasThumbnail","Boolean","buildStickerSetCovered","coveredStickerSet","stickerSet","stickerSetCovers","covers","cover","forEach","coverSticker","push","interpolateArray","data","fitCount","peak","newData","Array","springFactor","leftFiller","rightFiller","idx","floor","val","ApiMessageEntityTypes","ApiMediaFormat","isPeerUser","peer","hasOwnProperty","isPeerChat","buildApiPeerId","getApiChatIdFromMtpPeer","userId","chatId","channelId","resolveMessageApiChatId","mtpMessage","peerId","addMessageToLocalDb","message","messageFullId","media","webpage","game","addPhotoToLocalDb","url","action","addUserToLocalDb","user","shouldOverwrite","addEntitiesWithPhotosToLocalDb","entities","entity","chat","noOverwrite","addChatToLocalDb","serializeBytes","value","deserializeBytes","Buffer","from","getEntityTypeById","chatOrUserId","getEntityTypeByDeprecatedId","startsWith","buildInputPeer","buildMtpPeerId","BigInt","buildInputPeerFromLocalDb","buildInputEntity","buildInputStickerSet","buildInputDocument","buildInputPollFromExisting","poll","shouldClose","publicVoters","summary","isPublic","question","answers","text","option","quiz","multipleChoice","closeDate","closePeriod","closed","correctAnswers","results","o","isCorrect","solution","solutionEntities","buildMtpMessageEntity","generateRandomBigInt","readBigIntFromBuffer","generateRandomBytes","generateRandomInt","toJSNumber","offset","language","Bold","Italic","Underline","Strike","Code","Pre","Blockquote","TextUrl","Url","Hashtag","MentionName","Spoiler","isMessageWithMedia","buildInputContact","phone","firstName","lastName","clientId","buildChatBannedRights","bannedRights","untilDate","buildChatAdminRights","adminRights","buildShippingInfo","info","shippingAddress","buildInputPrivacyKey","privacyKey","buildInputReportReason","reason","buildInputThemeParams","params","JSON","stringify","abs","slice","buildInputGroupCall","groupCall","buildInputPhoneCall","buildInputInvoice","invoice","slug","msgId","messageId","buildApiGroupCallParticipant","participant","min","about","date","versioned","canSelfUnmute","justJoined","left","muted","mutedByYou","source","volume","volumeByAdmin","videoJoined","video","presentation","raiseHandRating","isSelf","isMin","isLeft","isMuted","isMutedByMe","hasJustJoined","isVolumeByAdmin","isVersioned","isVideoJoined","toString","Date","isUser","buildApiGroupCallParticipantVideo","participantVideo","audioSource","endpoint","paused","sourceGroups","isPaused","buildApiGroupCallParticipantVideoSourceGroup","participantVideoSourceGroup","semantics","sources","buildApiGroupCall","connectionState","participantsCount","version","participants","streamDcId","scheduleDate","canChangeJoinMuted","joinMuted","canStartVideo","scheduleStartSubscribed","isLoaded","buildPhoneCall","call","phoneCall","adminId","participantId","protocol","buildApiCallProtocol","p2pAllowed","gAOrB","keyFingerprint","connections","startDate","state","buildApiCallConnection","duration","buildApiCallDiscardReason","needRating","needDebug","receiveDate","gB","gAHash","discardReason","connection","username","password","turn","stun","ip","ipv6","port","isTurn","isStun","libraryVersions","minLayer","maxLayer","udpP2p","udpReflector","isUdpP2p","isUdpReflector","buildCallProtocol","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","getNextLocalMessageId","parseFloat","now","currentUserId","buildApiSponsoredMessage","fromId","startParam","channelPost","chatInvite","chatInviteHash","randomId","recommended","chatInviteTitle","isBot","buildMessageTextContent","expiresAt","isRecommended","channelPostId","buildApiMessage","isChatWithSelf","isOutgoing","out","post","fwdFrom","content","buildMessageMediaContent","hasUnsupportedMedia","sticker","contact","isRound","buildMessageContent","senderId","targetPeerId","isChannelPost","amount","currency","translationValues","score","targetUserIds","targetChatId","includes","withDuration","join","mins","max","Number","totalAmount","domain","buildAction","replyToMsgId","replyToTopId","replyToPeerId","replyTo","isEdited","editDate","editHide","inlineButtons","keyboardButtons","keyboardPlaceholder","isKeyboardSingleUse","replyMarkup","markup","rows","buttons","button","requiresPassword","isQuiz","receiptMsgId","receiptMessageId","query","isSamePeer","samePeer","buttonId","placeholder","singleUse","buildReplyButtons","forwardInfo","savedFromPeerId","savedFromPeer","isLinkedChannelPost","fromChatId","fromMessageId","savedFromMsgId","senderUserId","hiddenUserName","fromName","adminTitle","postAuthor","buildApiMessageForwardInfo","replies","mediaUnread","isMediaUnread","groupedId","isInAlbum","audio","shouldHideKeyboardButtons","views","forwards","isFromScheduled","fromScheduled","reactions","buildMessageReactions","replyToMessageId","replyToChatId","replyToTopMessageId","mentioned","hasUnreadMention","isMentioned","viaBotId","comments","threadInfo","buildThreadInfo","noforwards","isProtected","buildApiMessageWithChatId","recentReactions","canSeeList","buildReactionCount","buildMessagePeerReaction","reactionCount","chosen","reaction","isChosen","userReaction","big","unread","isUnread","isBig","buildApiAvailableReaction","availableReaction","selectAnimation","staticIcon","inactive","aroundAnimation","centerIcon","effectAnimation","activateAnimation","premium","buildApiDocument","isInactive","isPremium","buildApiMessageEntity","ttlSeconds","nopremium","buildSticker","buildPhoto","buildVideoFromDocument","buildVideo","audioAttribute","voice","thumbnailSizes","fileName","getFilenameFromDocument","buildAudio","waveform","buildVoice","buildDocumentFromMedia","phoneNumber","buildContact","pollResults","rawAnswers","answer","buildPollResults","buildPoll","buildPollFromMedia","webPage","buildWebPage","description","test","buildApiWebDocument","isTest","buildInvoice","buildInvoiceFromMedia","location","point","buildGeoPoint","geo","buildGeo","provider","address","venueId","venueType","buildVenue","period","heading","buildGeoLive","buildLocationFromMedia","apiPhoto","apiDocument","buildGame","buildGameFromMedia","isMovSupported","videoAttr","a","gifAttr","supportsStreaming","roundMessage","isGif","mediaType","mediaSize","has","imageAttribute","videoAttribute","timestamp","long","lat","accuracyRadius","rawResults","totalVoters","recentVoters","correct","voters","votersCount","recentVoterIds","defaultBase","filenameAttribute","extension","split","buildUploadingMedia","attachment","filename","blobUrl","previewBlobUrl","quick","inputWaveform","performer","sizeAttr","dimensions","buildNewPoll","localId","messageReplies","maxId","readMaxId","recentRepliers","apiChannelId","threadId","originChannelId","messagesCount","lastMessageId","lastReadInboxMessageId","recentReplierIds","getServerTime","serverTimeOffset","buildApiChatFieldsFromPeerEntity","peerEntity","isSupport","hasVideoAvatar","hasVideo","avatarHash","buildAvatarHash","isSignaturesShown","signatures","hasPrivateLink","hasLink","isScam","scam","isFake","fake","isJoinToSend","joinToSend","isJoinRequest","joinRequest","isVerified","verified","isCallActive","callActive","isCallNotEmpty","callNotEmpty","membersCount","joinDate","buildApiChatPermissions","isCreator","creator","buildApiChatRestrictions","buildApiChatMigrationInfo","fakeType","buildApiChatFromDialog","dialog","folderId","unreadMark","unreadCount","unreadMentionsCount","unreadReactionsCount","notifySettings","silent","muteUntil","readOutboxMaxId","readInboxMaxId","draft","getApiChatTypeFromPeerEntity","getApiChatTitleFromMtpPeer","lastReadOutboxMessageId","hasUnreadMark","draftDate","currentUserBannedRights","defaultBannedRights","isForbidden","isRestricted","restrictions","restrictionReason","restricted","restrictionReasons","targetReason","platform","buildApiChatRestrictionReason","isNotJoined","migratedTo","buildApiChatFromPreview","preview","withForbidden","getUserName","megagroup","getPeerKey","photoId","buildChatMember","inviterId","joinedDate","kickedByUserId","kickedBy","promotedByUserId","promotedBy","customTitle","rank","isAdmin","isOwner","buildChatMembers","buildApiChatFolder","broadcasts","pinnedChatIds","pinnedPeers","includedChatIds","includePeers","excludedChatIds","excludePeers","buildApiChatFolderFromSuggested","buildApiChatBotCommands","botInfos","botCommands","botInfo","botId","commands","concat","mtpCommand","buildApiExportedInvite","invite","revoked","expireDate","link","permanent","usage","usageLimit","requested","requestNeeded","isRevoked","isPermanent","isRequestNeeded","buildApiAttachMenuBot","bot","hasSettings","peerTypes","buildApiAttachMenuPeerType","icons","buildApiAttachMenuIcon","peerType","icon","name","buildApiBotInfo","descriptionPhoto","descriptionDocument","menuButton","gif","commandsArray","command","buildApiBotCommand","buildApiBotMenuButton","buildApiUserFromFull","mtpUserFull","fullUser","commonChatsCount","pinnedMsgId","blocked","profilePhoto","buildApiUser","fullInfo","bio","pinnedMessageId","isBlocked","mtpUser","userType","deleted","mutualContact","isContact","canBeInvitedToGroup","botNochats","noStatus","status","botInlinePlaceholder","botPlaceholder","botAttachMenu","isAttachMenuBot","buildApiUsersAndStatuses","mtpUsers","userStatusesById","mtpStatus","expires","wasOnline","buildApiWallpaper","wallpaper","buildApiSession","session","isCurrent","current","isOfficialApp","officialApp","isPasswordPending","passwordPending","hash","areCallsEnabled","callRequestsDisabled","areSecretChatsEnabled","encryptedRequestsDisabled","buildApiWebSession","buildPrivacyRules","rules","visibility","allowUserIds","allowChatIds","blockUserIds","blockChatIds","rule","buildApiCountry","country","code","hidden","iso2","defaultName","countryCode","prefixes","patterns","isHidden","buildJson","json","acc","el","buildApiUrlAuthResult","requestWriteAccess","shouldRequestWriteAccess","onUpdate","authController","provideAuthPhoneNumber","resolve","provideAuthCode","provideAuthPassword","provideAuthRegistration","registration","restartAuth","reject","Error","restartAuthWithQr","cacheApi","caches","Type","async","fetch","cacheName","isHtmlAllowed","request","Request","cache","open","response","match","contentType","headers","get","Text","Blob","blob","shouldRecreate","resolvedType","Json","ArrayBuffer","arrayBuffer","err","console","warn","save","cacheData","Response","put","remove","delete","clear","MEDIA_ENTITY_TYPES","downloadMedia","client","isConnected","onProgress","mediaFormat","start","end","fullSize","parsed","parseMediaUrl","entityType","entityId","sizeType","mediaMatchType","Promise","parsedParams","URLSearchParams","zoom","scale","downloadStaticMap","Stream","acceptsBuffer","progressCallback","workers","getMessageMediaMimeType","downloadStickerSetThumb","getMimeType","downloadProfilePhoto","download","BlobUrl","Progressive","buffer","parseMedia","canCache","prepared","mediaData","URL","createObjectURL","fallbackMimeType","signature","subarray","byte","mediaMatch","GramJsLogger","destroy","noLogOut","invokeRequest","disconnect","switchAccount","accountId","args","downloadMediaWithClient","catch","repairFileReference","uploadFile","file","updateTwoFaSettings","fetchCurrentUser","userFull","currentUser","_currentUserId","onCurrentUserUpdate","channel","MAX_INT_32","fetchChats","limit","offsetDate","withPinned","lastLocalServiceMessage","offsetPeer","excludePinned","resultPinned","updateLocalDb","lastMessagesByChatId","peersByKey","preparePeers","draftsById","replyingToById","dialogs","orderedPinnedIds","lastMessage","isListed","pinned","formattedText","replyingToId","buildMessageDraft","chatIds","totalChatCount","fetchFullChat","fullChat","onlineCount","exportedInvite","slowmodeSeconds","slowmodeNextSendDate","migratedFromChatId","migratedFromMaxId","canViewParticipants","canViewStats","linkedChatId","hiddenPrehistory","availableReactions","defaultSendAs","requestsPending","recentRequesters","statsDc","chatPhoto","inviteLink","members","fetchMembers","kickedMembers","bannedUsers","bannedStatusesById","adminMembers","adminUsers","adminStatusesById","mtpLinkedChat","statusesById","slowMode","seconds","nextSendDate","migratedFrom","maxMessageId","canViewMembers","canViewStatistics","isPreHistoryHidden","groupCallId","enabledReactions","sendAsId","recentRequesterIds","statisticsDcId","getFullChannelInfo","getFullChatInfo","fetchChatSettings","autoarchived","reportSpam","addContact","blockContact","isAutoArchived","canReportSpam","canAddContact","canBlockContact","buildApiChatSettings","settings","searchChats","q","localPeerIds","myResults","allChats","allUsers","localChats","r","localUsers","u","globalChats","globalUsers","fetchChat","requestChatUpdate","lastLocalMessage","noLastMessage","peers","lastRemoteMessage","saveDraft","clearDraft","updateChatMutedState","createChannel","broadcast","newChannel","joinChannel","deleteChatUser","deleteChat","leaveChannel","deleteChannel","createGroupChat","newChat","editChatPhoto","uploadedPhoto","inputEntity","toggleChatPinned","shouldBePinned","isPinned","toggleChatArchived","folderPeers","fetchChatFolders","defaultFolderPosition","findIndex","l","df","orderedIds","splice","byId","fetchRecommendedChatFolders","editChatFolder","folderUpdate","folder","emoticon","contacts","nonContacts","groups","bots","excludeArchived","excludeMuted","excludeRead","buildFilterFromApiFolder","deleteChatFolder","isActionSuccessful","recommendedChatFolders","folders","toggleDialogUnread","getChatByPhoneNumber","processResolvedPeer","getChatByUsername","togglePreHistoryHidden","isEnabled","enabled","updateChatDefaultBannedRights","updateChatMemberBannedRights","updateChatAdmin","updateChatTitle","updateChatAbout","toggleSignatures","memberFilter","fetchGroupsForDiscussion","setDiscussionGroup","group","migrateChat","openChatByInvite","isChannel","addChatMembers","all","deleteChatMember","viewMessages","sendMessages","sendMedia","sendStickers","sendGifs","sendGames","sendInline","embedLinks","sendPolls","changeInfo","inviteUsers","pinMessages","toggleJoinToSend","toggleJoinRequest","store","importChatInvite","updates","setChatEnabledReactions","toggleIsProtected","fetchFile","fetchBlob","File","lastModified","blobToFile","constructor","fileBits","options","super","this","fetchMessages","pagination","RequestClass","c","threadInfos","fetchMessage","error","isSlowMode","hasErrorKey","queue","sendMessage","replyingTo","replyingToTopId","isSilent","scheduledAt","noWebPage","sendAs","localMessage","isScheduled","buildLocalMessage","sendingState","setTimeout","groupIndex","groupedUploads","counter","singleMediaByIndex","prevQueue","patchedOnProgress","progress","isCanceled","inputFile","thumbFile","uploadMedia","inputMedia","uploadedMedia","messageMedia","fileReference","fetchInputMedia","multiMedia","values","sendGroupedMedia","updateMessageState","localMessageId","localMessageIsScheduled","localMessageIsSendOk","editMessage","messageUpdate","mtpEntities","noWebpage","rescheduleMessage","pinMessage","isUnpin","isOneSide","unpin","pmOneside","unpinAllMessages","deleteMessages","messageIds","shouldDeleteForAll","revoke","ids","deleteScheduledMessages","deleteHistory","just_clear","reportMessages","sendMessageAction","gramAction","buildSendMessageAction","topMsgId","markMessageListRead","requestThreadInfoUpdate","markMessagesRead","topMessageResult","repliesResult","offsetId","addOffset","discussionChatId","topMessageId","firstMessageId","noTopChatsRequest","searchMessagesLocal","minDate","maxDate","nextOffsetId","totalCount","searchMessagesGlobal","offsetRate","nextRate","fetchWebPagePreview","sendPollVote","closePoll","loadPollOptionResults","shouldResetVoters","votes","vote","nextOffset","forwardMessages","fromChat","toChat","withMyScore","randomIds","index","isAudio","asIncomingInChatWithSelf","buildLocalForwardedMessage","fromPeer","toPeer","findFirstMessageIdAfterDate","fetchScheduledHistory","sendScheduledMessages","isServiceMessageWithMedia","fetchPinnedMessages","fetchSeenBy","fetchSendAs","saveDefaultSendAs","fetchSponsoredMessages","viewSponsoredMessage","random","readAllMentions","readAllReactions","fetchUnreadMentions","fetchUnreadReactions","transcribeAudio","isPending","pending","transcriptionId","inputGifBot","fetchFullUser","input","userWithFullInfo","fetchCommonChats","commonChats","mtpChat","isFullyLoaded","fetchNearestCountry","dcInfo","fetchTopUsers","topPeers","correspondents","fetchContactList","fetchUsers","importContact","imported","updateContact","shouldSharePhoneNumber","addPhonePrivacyException","deleteContact","fetchProfilePhotos","userOrChat","fetchStickerSets","allStickers","sets","fetchRecentStickers","stickers","processStickerResult","fetchFavoriteStickers","fetchFeaturedStickers","faveSticker","unfave","removeRecentSticker","unsave","clearRecentStickers","fetchStickers","stickerSetShortName","packs","documentId","fetchAnimatedEmojis","fetchAnimatedEmojiEffects","searchStickers","fetchSavedGifs","gifs","processGifResult","saveGif","shouldUnsave","installStickerSet","uninstallStickerSet","searchGifs","config","resolvedPeer","gifSearchUsername","foundGif","fetchStickersForEmoji","fetchEmojiKeywords","fromVersion","langCode","keywords","emojiKeyword","keyword","emoticons","checkChatUsername","setChatUsername","updatePrivateLink","fetchExportedChatInvites","admin","exportedInvites","invites","editExportedChatInvite","replaceInvite","oldInvite","newInvite","exportChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","fetchChatInviteImporters","offsetUser","isRequested","importers","importer","buildChatInviteImporter","hideChatJoinRequest","isApproved","approved","hideAllChatJoinRequests","hideChatReportPanel","ApiErrors","EMAIL_UNCONFIRMED","EMAIL_HASH_EXPIRED","NEW_SALT_INVALID","NEW_SETTINGS_INVALID","CODE_INVALID","PASSWORD_HASH_INVALID","emailCodeController","getPasswordInfo","hint","hasPassword","onRequestEmailCode","checkPassword","currentPassword","isCheckPassword","onError","clearPassword","updatePassword","email","newPassword","emailCodeCallback","onEmailCodeError","updateRecoveryEmail","provideRecoveryEmailCode","errors","hours","ceil","answerCallbackButton","isGame","fetchTopInlineBots","botsInline","fetchInlineBot","fetchInlineBotResults","queryId","switchPm","isGallery","gallery","help","buildApiBotInlineMediaResult","webDocument","webThumbnail","buildApiBotInlineResult","sendInlineBotResult","resultId","startBot","requestWebView","theme","isFromBotMenu","themeParams","fromBotMenu","requestSimpleWebView","prolongWebView","sendWebViewData","buttonText","loadAttachMenuBots","toggleBotInAttachMenu","requestBotUrlAuth","authResult","acceptBotUrlAuth","isWriteAllowed","writeAllowed","requestLinkUrlAuth","acceptLinkUrlAuth","getGroupCall","discardGroupCall","editGroupCallParticipant","presentationPaused","videoStopped","videoPaused","raiseHand","editGroupCallTitle","exportGroupCallInvite","fetchGroupCallParticipants","leaveGroupCall","joinGroupCall","inviteHash","joinAs","update","createGroupCall","joinGroupCallPresentation","toggleGroupCallStartSubscription","subscribed","leaveGroupCallPresentation","getDhConfig","dhConfig","g","p","discardCall","isBusy","requestCall","setCallRating","rating","comment","receivedCall","acceptCall","confirmCall","gA","sendSignalingData","buildShippingOptions","shippingOptions","prices","ac","cur","label","buildPaymentForm","form","formId","canSaveCredentials","passwordMissing","providerId","nativeProvider","nativeParams","savedInfo","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","mappedPrices","cleanedInfo","nativeData","parse","needCardholderName","need_cardholder_name","needCountry","need_country","needZip","need_zip","publishableKey","publishable_key","publicToken","public_token","buildApiInvoiceFromForm","recurring","recurringTermsUrl","isRecurring","buildApiPremiumPromo","promo","statusText","statusEntities","videoSections","monthlyAmount","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","sendPaymentForm","requestedInfoId","shippingOptionId","credentials","getPaymentForm","getReceipt","receipt","shipping","credentialsTitle","mapedPrices","shippingPrices","shippingMethod","buildReceipt","fetchPremiumPromo","reportPeer","reportProfilePhoto","localPhoto","buildInputPhoto","changeSessionSettings","changeSessionTtl","days","authorizationTtlDays","buildEmojiSounds","appConfig","emojies_sounds","access_hash","dcId","atob","file_reference_base64","getLimit","fallbackKey","BETA_LANG_CODES","updateProfile","checkUsername","updateUsername","updateProfilePhoto","uploadProfilePhoto","fetchWallpapers","filteredWallpapers","wallpapers","pattern","uploadWallpaper","fetchBlockedContacts","blockedIds","unblockContact","fetchAuthorizations","authorizations","ttlDays","terminateAuthorization","terminateAllAuthorizations","fetchWebAuthorizations","terminateWebAuthorization","terminateAllWebAuthorizations","fetchNotificationExceptions","compareSound","showPreviews","otherSound","hasSound","shouldShowPreviews","buildApiNotifyException","fetchNotificationSettings","isMutedContactSignUpNotification","privateContactNotificationsSettings","groupNotificationsSettings","broadcastNotificationsSettings","privateSilent","privateMuteUntil","privateShowPreviews","groupSilent","groupMuteUntil","groupShowPreviews","broadcastSilent","broadcastMuteUntil","broadcastShowPreviews","hasContactJoinedNotifications","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","updateContactSignUpNotification","updateNotificationSettings","fetchLanguages","langPack","fetchLangPack","sourceLangPacks","collections","strings","reverse","fetchLangStrings","fetchPrivacySettings","registerDevice","token","secret","getAuthKey","getKey","tokenType","appSandbox","otherUids","unregisterDevice","setPrivacySettings","privacyRules","allowedUsers","allowedChats","blockedUsers","blockedChats","updateIsOnline","isOnline","offline","fetchContentSettings","isSensitiveEnabled","sensitiveEnabled","canChangeSensitive","sensitiveCanChange","updateContentSettings","fetchAppConfig","emojiSounds","defaultReaction","reactions_default","seenByMaxChatMembers","chat_read_mark_size_threshold","seenByExpiresAt","chat_read_mark_expire_period","autologinDomains","autologin_domains","autologinToken","autologin_token","urlAuthDomains","url_auth_domains","premiumBotUsername","premium_bot_username","premiumInvoiceSlug","premium_invoice_slug","isPremiumPurchaseBlocked","premium_purchase_blocked","limits","buildAppConfig","fetchCountryList","countryList","countries","nonHiddenCountries","phoneCodes","countryCodes","flat","sort","b","localeCompare","general","buildApiCountryList","fetchGlobalPrivacySettings","shouldArchiveAndMuteNewNonContact","archiveAndMuteNewNoncontactPeers","updateGlobalPrivacySettings","sendWatchingEmojiInteraction","sendEmojiInteraction","timestamps","interaction","v","t","getAvailableReactions","sendReaction","fetchMessageReactions","fetchMessageReactionsList","setDefaultReaction","buildGraph","isPercentage","x","y","columns","hasSecondYAxis","y_scaled","types","y0","zoomToken","labelFormatter","xTickFormatter","tooltipFormatter","xTooltipFormatter","labels","hideCaption","subchart","show","isStacked","stacked","datasets","item","names","color","colors","substring","indexOf","calculateMinimapRange","defaultZoom","range","minIndex","maxIndex","minimapRange","begin","labelFromIndex","labelToIndex","buildStatisticsOverview","previous","change","percentage","toFixed","fetchChannelStatistics","stats","growthGraph","followersGraph","muteGraph","topHoursGraph","languagesGraph","viewsBySourceGraph","newFollowersBySourceGraph","interactionsGraph","followers","viewsPerPost","sharesPerPost","enabledNotifications","part","total","recentTopMessages","recentMessageInteractions","fetchGroupStatistics","membersGraph","messagesGraph","actionsGraph","viewers","posters","fetchMessageStatistics","viewsGraph","fetchMessagePublicForwards","buildMessagePublicForwards","fetchStatisticsAsyncGraph","currentPhoneCallState","PhoneCallState","waitForState","resolveState","pBN","Helpers","randomBN","pLast","randomLast","emojiData","emojiOffsets","authKey","fingerprint","emojis","Uint8Array","emojiCount","partOffset","byteLength","and","shiftLeft","or","modPow","generateEmojiFingerprint","AuthKey","setKey","MTProtoState","Logger","seqArray","Uint32Array","seq","encodedData","encryptMessageData","then","decode","decryptMessageData","createPhoneCallState","destroyPhoneCallState","encodePhoneCallData","encode","decodePhoneCallData","confirmPhoneCall","acceptPhoneCall","requestPhoneCall","flushUpdatesOnTickEnd","schedulerFn","fn","waiting","_args","throttleWith","callback","isPrimary","currentCallbacks","currentPrimaryCallbacks","cb","throttleId","pendingUpdates","currentThrottleId","currentUpdates","flushUpdatesThrottled","handleUpdate","ms","interval","shouldRunFirst","setInterval","clearInterval","throttle","onerror","e","sendToOrigin","addEventListener","callbackState","Map","postMessage","onmessage","_onUpdate","initialArgs","initUpdater","initAuth","initChats","initMessages","initUsers","initStickers","initManagement","initTwoFaSettings","initBots","initCalls","initPayments","initApi","callbackArgs","lastArg","fnName","methods","callApi","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","m","__webpack_exports__","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","d","definition","defineProperty","enumerable","f","chunkId","promises","miniCssF","globalThis","Function","obj","prop","prototype","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}
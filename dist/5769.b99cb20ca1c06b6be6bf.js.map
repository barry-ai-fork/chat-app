{"version":3,"file":"5769.b99cb20ca1c06b6be6bf.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/types.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/ui/TabBarItem.tsx","webpack://telegram-t/./src/components/ui/TabBarList.tsx","webpack://telegram-t/./src/components/left/main/TabWalletView.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.module.scss?adba","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleMainViewHeader.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import type {\n  ApiChat,\n  ApiMessage,\n  ApiThreadInfo,\n  ApiUser,\n  ApiUserStatus,\n  ApiUpdateAuthorizationStateType,\n  ApiUpdateConnectionStateType,\n  ApiStickerSet,\n  ApiSticker,\n  ApiWebPage,\n  ApiVideo,\n  ApiFormattedText,\n  ApiChatFolder,\n  ApiWallpaper,\n  ApiNotification,\n  ApiError,\n  ApiGlobalMessageSearchType,\n  ApiPaymentSavedInfo,\n  ApiSession,\n  ApiNewPoll,\n  ApiInviteInfo,\n  ApiCountryCode,\n  ApiCountry,\n  ApiGroupCall,\n  ApiAvailableReaction,\n  ApiAppConfig,\n  ApiSponsoredMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessageStatistics,\n  ApiPaymentFormNativeParams,\n  ApiUpdate,\n  ApiReportReason,\n  ApiPhoto,\n  ApiKeyboardButton,\n  ApiThemeParameters,\n  ApiAttachMenuBot,\n  ApiPhoneCall,\n  ApiWebSession,\n  ApiPremiumPromo,\n  ApiTranscription,\n  ApiInputInvoice,\n  ApiInvoice,\n} from '../api/types';\nimport type {\n  FocusDirection,\n  ISettings,\n  MediaViewerOrigin,\n  ChatCreationProgress,\n  ProfileEditProgress,\n  SharedMediaType,\n  GlobalSearchContent,\n  ManagementProgress,\n  PaymentStep,\n  ShippingOption,\n  Invoice,\n  Receipt,\n  ApiPrivacyKey,\n  ApiPrivacySettings,\n  ThemeKey,\n  IThemeSettings,\n  NotifyException,\n  LangCode,\n  EmojiKeywords,\n  InlineBotSettings,\n  NewChatMembersProgress,\n  AudioOrigin,\n  ManagementState,\n  SettingsScreens,\n} from '../types';\nimport { typify } from '../lib/teact/teactn';\nimport type { P2pMessage } from '../lib/secret-sauce';\n\nexport type MessageListType =\n  'thread'\n  | 'pinned'\n  | 'scheduled';\n\nexport interface MessageList {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n}\n\nexport enum MainViewTypeEnums{\n  noView\n}\n\nexport interface ActiveEmojiInteraction {\n  id: number;\n  x: number;\n  y: number;\n  messageId?: number;\n  startSize?: number;\n  animatedEffect?: string;\n  isReversed?: boolean;\n}\n\nexport interface ActiveReaction {\n  messageId?: number;\n  reaction?: string;\n}\n\nexport interface Thread {\n  listedIds?: number[];\n  outlyingIds?: number[];\n  viewportIds?: number[];\n  pinnedIds?: number[];\n  scheduledIds?: number[];\n  scrollOffset?: number;\n  replyingToId?: number;\n  editingId?: number;\n  editingScheduledId?: number;\n  editingDraft?: ApiFormattedText;\n  editingScheduledDraft?: ApiFormattedText;\n  draft?: ApiFormattedText;\n  noWebPage?: boolean;\n  threadInfo?: ApiThreadInfo;\n  firstMessageId?: number;\n  replyStack?: number[];\n}\n\nexport interface ServiceNotification {\n  id: number;\n  message: ApiMessage;\n  version?: string;\n  isUnread?: boolean;\n}\n\nexport interface NotifyUpdater {\n  updaterDialogs: number;\n  updaterChatListContent:number;\n}\n\nexport type ApiLimitType = (\n  'uploadMaxFileparts' | 'stickersFaved' | 'savedGifs' | 'dialogFiltersChats' | 'dialogFilters' | 'dialogFolderPinned' |\n  'captionLength' | 'channels' | 'channelsPublic' | 'aboutLength'\n);\n\nexport type ApiLimitTypeWithModal = Exclude<ApiLimitType, (\n  'captionLength' | 'aboutLength' | 'stickersFaved' | 'savedGifs'\n)>;\n\nexport type GlobalState = {\n  notifyUpdater: NotifyUpdater,\n  appConfig?: ApiAppConfig;\n  canInstall?: boolean;\n  isChatInfoShown: boolean;\n  isStatisticsShown?: boolean;\n  isLeftColumnShown: boolean;\n  newChatMembersProgress?: NewChatMembersProgress;\n  uiReadyState: 0 | 1 | 2;\n  shouldSkipHistoryAnimations?: boolean;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentUserId?: string;\n  isSyncing?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  leftColumnWidth?: number;\n\n  // TODO Move to `auth`.\n  isLoggingOut?: boolean;\n  authState?: ApiUpdateAuthorizationStateType;\n  authPhoneNumber?: string;\n  authIsLoading?: boolean;\n  authIsLoadingQrCode?: boolean;\n  authError?: string;\n  authRememberMe?: boolean;\n  authNearestCountry?: string;\n  authIsCodeViaApp?: boolean;\n  authHint?: string;\n  authQrCode?: {\n    token: string;\n    expires: number;\n  };\n  countryList: {\n    phoneCodes: ApiCountryCode[];\n    general: ApiCountry[];\n  };\n\n  contactList?: {\n    userIds: string[];\n  };\n\n  blocked: {\n    ids: string[];\n    totalCount: number;\n  };\n\n  users: {\n    byId: Record<string, ApiUser>;\n    statusesById: Record<string, ApiUserStatus>;\n  };\n\n  chats: {\n    orderedIds?:string[],\n    // TODO Replace with `Partial<Record>` to properly handle missing keys\n    byId: Record<string, ApiChat>;\n    listIds: {\n      active?: string[];\n      archived?: string[];\n    };\n    orderedPinnedIds: {\n      active?: string[];\n      archived?: string[];\n    };\n    totalCount: {\n      all?: number;\n      archived?: number;\n    };\n    isFullyLoaded: {\n      active?: boolean;\n      archived?: boolean;\n    };\n    forDiscussionIds?: string[];\n  };\n\n  messages: {\n    byChatId: Record<string, {\n      byId: Record<number, ApiMessage>;\n      threadsById: Record<number, Thread>;\n    }>;\n    messageLists: MessageList[];\n    contentToBeScheduled?: {\n      gif?: ApiVideo;\n      sticker?: ApiSticker;\n      poll?: ApiNewPoll;\n      isSilent?: boolean;\n    };\n    sponsoredByChatId: Record<string, ApiSponsoredMessage>;\n  };\n\n  groupCalls: {\n    byId: Record<string, ApiGroupCall>;\n    activeGroupCallId?: string;\n  };\n\n  isCallPanelVisible?: boolean;\n  phoneCall?: ApiPhoneCall;\n  ratingPhoneCall?: ApiPhoneCall;\n\n  scheduledMessages: {\n    byChatId: Record<string, {\n      byId: Record<number, ApiMessage>;\n    }>;\n  };\n\n  chatFolders: {\n    orderedIds?: number[];\n    byId: Record<number, ApiChatFolder>;\n    recommended?: ApiChatFolder[];\n    activeChatFolder: number;\n  };\n\n  focusedMessage?: {\n    chatId?: string;\n    threadId?: number;\n    messageId?: number;\n    direction?: FocusDirection;\n    noHighlight?: boolean;\n    isResizingContainer?: boolean;\n  };\n\n  selectedMessages?: {\n    chatId: string;\n    messageIds: number[];\n  };\n\n  seenByModal?: {\n    chatId: string;\n    messageId: number;\n  };\n\n  reactorModal?: {\n    chatId: string;\n    messageId: number;\n  };\n\n  fileUploads: {\n    byMessageLocalId: Record<string, {\n      progress: number;\n    }>;\n  };\n\n  recentEmojis: string[];\n\n  stickers: {\n    setsById: Record<string, ApiStickerSet>;\n    added: {\n      hash?: string;\n      setIds?: string[];\n    };\n    recent: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    favorite: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    greeting: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    premium: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    featured: {\n      hash?: string;\n      setIds?: string[];\n    };\n    search: {\n      query?: string;\n      resultIds?: string[];\n    };\n    forEmoji: {\n      emoji?: string;\n      stickers?: ApiSticker[];\n      hash?: string;\n    };\n  };\n\n  animatedEmojis?: ApiStickerSet;\n  animatedEmojiEffects?: ApiStickerSet;\n  emojiKeywords: Partial<Record<LangCode, EmojiKeywords>>;\n\n  gifs: {\n    saved: {\n      hash?: string;\n      gifs?: ApiVideo[];\n    };\n    search: {\n      query?: string;\n      offset?: string;\n      results?: ApiVideo[];\n    };\n  };\n\n  inlineBots: {\n    isLoading: boolean;\n    byUsername: Record<string, false | InlineBotSettings>;\n  };\n\n  globalSearch: {\n    query?: string;\n    date?: number;\n    recentlyFoundChatIds?: string[];\n    currentContent?: GlobalSearchContent;\n    chatId?: string;\n    fetchingStatus?: {\n      chats?: boolean;\n      messages?: boolean;\n    };\n    localResults?: {\n      chatIds?: string[];\n      userIds?: string[];\n    };\n    globalResults?: {\n      chatIds?: string[];\n      userIds?: string[];\n    };\n    resultsByType?: Partial<Record<ApiGlobalMessageSearchType, {\n      totalCount?: number;\n      nextOffsetId: number;\n      foundIds: string[];\n    }>>;\n  };\n\n  userSearch: {\n    query?: string;\n    fetchingStatus?: boolean;\n    localUserIds?: string[];\n    globalUserIds?: string[];\n  };\n\n  availableReactions?: ApiAvailableReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  activeReactions: Record<number, ActiveReaction>;\n\n  localTextSearch: {\n    byChatThreadKey: Record<string, {\n      isActive: boolean;\n      query?: string;\n      results?: {\n        totalCount?: number;\n        nextOffsetId?: number;\n        foundIds?: number[];\n      };\n    }>;\n  };\n\n  localMediaSearch: {\n    byChatId: Record<string, {\n      currentType?: SharedMediaType;\n      resultsByType?: Partial<Record<SharedMediaType, {\n        totalCount?: number;\n        nextOffsetId: number;\n        foundIds: number[];\n      }>>;\n    }>;\n  };\n\n  management: {\n    progress?: ManagementProgress;\n    byChatId: Record<string, ManagementState>;\n  };\n\n  mediaViewer: {\n    chatId?: string;\n    threadId?: number;\n    messageId?: number;\n    avatarOwnerId?: string;\n    profilePhotoIndex?: number;\n    origin?: MediaViewerOrigin;\n    volume: number;\n    playbackRate: number;\n    isMuted: boolean;\n  };\n\n  audioPlayer: {\n    chatId?: string;\n    messageId?: number;\n    threadId?: number;\n    origin?: AudioOrigin;\n    volume: number;\n    playbackRate: number;\n    isMuted: boolean;\n  };\n\n  topPeers: {\n    userIds?: string[];\n    lastRequestedAt?: number;\n  };\n\n  topInlineBots: {\n    userIds?: string[];\n    lastRequestedAt?: number;\n  };\n\n  webPagePreview?: ApiWebPage;\n\n  forwardMessages: {\n    isModalShown?: boolean;\n    fromChatId?: string;\n    messageIds?: number[];\n    toChatId?: string;\n    withMyScore?: boolean;\n  };\n\n  pollResults: {\n    chatId?: string;\n    messageId?: number;\n    voters?: Record<string, string[]>; // TODO Rename to `voterIds`\n    offsets?: Record<string, string>;\n  };\n\n  payment: {\n    inputInvoice?: ApiInputInvoice;\n    step?: PaymentStep;\n    status?: 'paid' | 'failed' | 'pending' | 'cancelled';\n    shippingOptions?: ShippingOption[];\n    formId?: string;\n    requestId?: string;\n    savedInfo?: ApiPaymentSavedInfo;\n    canSaveCredentials?: boolean;\n    invoice?: Invoice;\n    invoiceContent?: Omit<ApiInvoice, 'receiptMsgId'>;\n    nativeProvider?: string;\n    providerId?: string;\n    nativeParams?: ApiPaymentFormNativeParams;\n    stripeCredentials?: {\n      type: string;\n      id: string;\n    };\n    smartGlocalCredentials?: {\n      type: string;\n      token: string;\n    };\n    passwordMissing?: boolean;\n    savedCredentials?: {\n      id: string;\n      title: string;\n    };\n    receipt?: Receipt;\n    error?: {\n      field?: string;\n      message?: string;\n      description: string;\n    };\n    isPaymentModalOpen?: boolean;\n    confirmPaymentUrl?: string;\n  };\n\n  chatCreation?: {\n    progress: ChatCreationProgress;\n    error?: string;\n  };\n\n  profileEdit?: {\n    progress: ProfileEditProgress;\n    isUsernameAvailable?: boolean;\n  };\n\n  notifications: ApiNotification[];\n  dialogs: (ApiError | ApiInviteInfo)[];\n\n  activeSessions: {\n    byHash: Record<string, ApiSession>;\n    orderedHashes: string[];\n    ttlDays?: number;\n  };\n\n  activeWebSessions: {\n    byHash: Record<string, ApiWebSession>;\n    orderedHashes: string[];\n  };\n\n  settings: {\n    byKey: ISettings;\n    loadedWallpapers?: ApiWallpaper[];\n    themes: Partial<Record<ThemeKey, IThemeSettings>>;\n    privacy: Partial<Record<ApiPrivacyKey, ApiPrivacySettings>>;\n    notifyExceptions?: Record<number, NotifyException>;\n    nextScreen?: SettingsScreens;\n  };\n\n  twoFaSettings: {\n    hint?: string;\n    isLoading?: boolean;\n    error?: string;\n    waitingEmailCodeLength?: number;\n  };\n\n  passcode: {\n    isScreenLocked?: boolean;\n    hasPasscode?: boolean;\n    error?: string;\n    invalidAttemptsCount?: number;\n    isLoading?: boolean;\n  };\n\n  push?: {\n    deviceToken: string;\n    subscribedAt: number;\n  };\n\n  safeLinkModalUrl?: string;\n  historyCalendarSelectedAt?: number;\n  openedStickerSetShortName?: string;\n\n  activeDownloads: {\n    byChatId: Record<string, number[]>;\n  };\n\n  shouldShowContextMenuHint?: boolean;\n\n  serviceNotifications: ServiceNotification[];\n\n  statistics: {\n    byChatId: Record<string, ApiChannelStatistics | ApiGroupStatistics>;\n    currentMessage?: ApiMessageStatistics;\n    currentMessageId?: number;\n  };\n\n  newContact?: {\n    userId?: string;\n    isByPhoneNumber?: boolean;\n  };\n\n  openedGame?: {\n    url: string;\n    chatId: string;\n    messageId: number;\n  };\n\n  switchBotInline?: {\n    query: string;\n    botUsername: string;\n  };\n\n  openChatWithText?: {\n    chatId: string;\n    text: string;\n  };\n\n  pollModal: {\n    isOpen: boolean;\n    isQuiz?: boolean;\n  };\n\n  webApp?: {\n    url: string;\n    botId: string;\n    buttonText: string;\n    queryId?: string;\n    slug?: string;\n  };\n\n  trustedBotIds: string[];\n  botTrustRequest?: {\n    botId: string;\n    type: 'game' | 'webApp';\n    onConfirm?: {\n      action: keyof GlobalActions;\n      payload: any; // TODO add TS support\n    };\n  };\n  botAttachRequest?: {\n    botId: string;\n    chatId: string;\n    startParam?: string;\n  };\n\n  attachMenu: {\n    hash?: string;\n    bots: Record<string, ApiAttachMenuBot>;\n  };\n\n  confetti?: {\n    lastConfettiTime?: number;\n    top?: number;\n    left?: number;\n    width?: number;\n    height?: number;\n  };\n\n  urlAuth?: {\n    button?: {\n      chatId: string;\n      messageId: number;\n      buttonId: number;\n    };\n    request?: {\n      domain: string;\n      botId: string;\n      shouldRequestWriteAccess?: boolean;\n    };\n    url: string;\n  };\n\n  premiumModal?: {\n    isOpen?: boolean;\n    isClosing?: boolean;\n    promo: ApiPremiumPromo;\n    initialSection?: string;\n    fromUserId?: string;\n    isSuccess?: boolean;\n  };\n\n  transcriptions: Record<string, ApiTranscription>;\n\n  limitReachedModal?: {\n    limit: ApiLimitTypeWithModal;\n  };\n\n  deleteFolderDialogModal?: number;\n};\n\nexport type CallSound = (\n  'join' | 'allowTalk' | 'leave' | 'connecting' | 'incoming' | 'end' | 'connect' | 'busy' | 'ringing'\n);\n\nexport interface ActionPayloads {\n  // Initial\n  signOut: { forceInitApi?: boolean } | undefined;\n  apiUpdate: ApiUpdate;\n\n  // Misc\n  setInstallPrompt: { canInstall: boolean };\n  openLimitReachedModal: { limit: ApiLimitTypeWithModal };\n  closeLimitReachedModal: never;\n\n  // Accounts\n  reportPeer: {\n    chatId?: string;\n    reason: ApiReportReason;\n    description: string;\n  };\n  reportProfilePhoto: {\n    chatId?: string;\n    reason: ApiReportReason;\n    description: string;\n    photo?: ApiPhoto;\n  };\n  changeSessionSettings: {\n    hash: string;\n    areCallsEnabled?: boolean;\n    areSecretChatsEnabled?: boolean;\n  };\n  changeSessionTtl: {\n    days: number;\n  };\n\n  // Chats\n  openChat: {\n    id: string | undefined;\n    threadId?: number;\n    type?: MessageListType;\n    shouldReplaceHistory?: boolean;\n  };\n\n  openChatWithText: {\n    chatId: string;\n    text: string;\n  };\n  resetOpenChatWithText: never;\n\n  toggleJoinToSend: {\n    chatId: string;\n    isEnabled: boolean;\n  };\n\n  toggleJoinRequest: {\n    chatId: string;\n    isEnabled: boolean;\n  };\n\n  // Messages\n  setEditingDraft: {\n    text?: ApiFormattedText;\n    chatId: string;\n    threadId: number;\n    type: MessageListType;\n  };\n  fetchUnreadMentions: {\n    chatId: string;\n    offsetId?: number;\n  };\n  fetchUnreadReactions: {\n    chatId: string;\n    offsetId?: number;\n  };\n  animateUnreadReaction: {\n    messageIds: number[];\n  };\n  focusNextReaction: never;\n  focusNextMention: never;\n  readAllReactions: never;\n  readAllMentions: never;\n  markMentionsRead: {\n    messageIds: number[];\n  };\n\n  sendPollVote: {\n    chatId: string;\n    messageId: number;\n    options: string[];\n  };\n  cancelPollVote: {\n    chatId: string;\n    messageId: number;\n  };\n  closePoll: {\n    chatId: string;\n    messageId: number;\n  };\n\n  // Media Viewer & Audio Player\n  openMediaViewer: {\n    chatId?: string;\n    threadId?: number;\n    messageId?: number;\n    avatarOwnerId?: string;\n    profilePhotoIndex?: number;\n    origin?: MediaViewerOrigin;\n    volume?: number;\n    playbackRate?: number;\n    isMuted?: boolean;\n  };\n  closeMediaViewer: never;\n  setMediaViewerVolume: {\n    volume: number;\n  };\n  setMediaViewerPlaybackRate: {\n    playbackRate: number;\n  };\n  setMediaViewerMuted: {\n    isMuted: boolean;\n  };\n\n  openAudioPlayer: {\n    chatId: string;\n    threadId?: number;\n    messageId: number;\n    origin?: AudioOrigin;\n    volume?: number;\n    playbackRate?: number;\n    isMuted?: boolean;\n  };\n  closeAudioPlayer: never;\n  setAudioPlayerVolume: {\n    volume: number;\n  };\n  setAudioPlayerPlaybackRate: {\n    playbackRate: number;\n  };\n  setAudioPlayerMuted: {\n    isMuted: boolean;\n  };\n  setAudioPlayerOrigin: {\n    origin: AudioOrigin;\n  };\n\n  // Downloads\n  downloadSelectedMessages: never;\n  downloadMessageMedia: {\n    message: ApiMessage;\n  };\n  cancelMessageMediaDownload: {\n    message: ApiMessage;\n  };\n  cancelMessagesMediaDownload: {\n    messages: ApiMessage[];\n  };\n\n  // Users\n  openAddContactDialog: {\n    userId?: string;\n  };\n  openNewContactDialog: undefined;\n  closeNewContactDialog: undefined;\n  importContact: {\n    phoneNumber: string;\n    firstName: string;\n    lastName?: string;\n  };\n  updateContact: {\n    userId: string;\n    firstName: string;\n    lastName?: string;\n    isMuted?: boolean;\n    shouldSharePhoneNumber?: boolean;\n  };\n\n  // Stickers\n  addRecentSticker: {\n    sticker: ApiSticker;\n  };\n\n  removeRecentSticker: {\n    sticker: ApiSticker;\n  };\n\n  clearRecentStickers: {};\n\n  loadStickerSets: {};\n  loadAddedStickers: {};\n  loadRecentStickers: {};\n  loadFavoriteStickers: {};\n  loadFeaturedStickers: {};\n\n  reorderStickerSets: {\n    order: string[];\n  };\n\n  addNewStickerSet: {\n    stickerSet: ApiStickerSet;\n  };\n\n  openStickerSetShortName: {\n    stickerSetShortName?: string;\n  };\n\n  openStickerSet: {\n    sticker: ApiSticker;\n  };\n\n  // Bots\n  startBot: {\n    botId: string;\n    param?: string;\n  };\n  restartBot: {\n    chatId: string;\n  };\n\n  clickBotInlineButton: {\n    messageId: number;\n    button: ApiKeyboardButton;\n  };\n\n  switchBotInline: {\n    messageId: number;\n    query: string;\n    isSamePeer?: boolean;\n  };\n\n  resetSwitchBotInline: never;\n\n  openGame: {\n    url: string;\n    chatId: string;\n    messageId: number;\n  };\n  closeGame: never;\n\n  requestWebView: {\n    url?: string;\n    botId: string;\n    peerId: string;\n    theme?: ApiThemeParameters;\n    isSilent?: boolean;\n    buttonText: string;\n    isFromBotMenu?: boolean;\n    startParam?: string;\n  };\n  prolongWebView: {\n    botId: string;\n    peerId: string;\n    queryId: string;\n    isSilent?: boolean;\n    replyToMessageId?: number;\n  };\n  requestSimpleWebView: {\n    url: string;\n    botId: string;\n    buttonText: string;\n    theme?: ApiThemeParameters;\n  };\n  closeWebApp: never;\n  setWebAppPaymentSlug: {\n    slug?: string;\n  };\n\n  cancelBotTrustRequest: never;\n  markBotTrusted: {\n    botId: string;\n  };\n\n  closeBotAttachRequestModal: never;\n  confirmBotAttachRequest: never;\n\n  sendWebViewData: {\n    bot: ApiUser;\n    data: string;\n    buttonText: string;\n  };\n\n  loadAttachMenuBots: {\n    hash?: string;\n  };\n\n  toggleBotInAttachMenu: {\n    botId: string;\n    isEnabled: boolean;\n  };\n\n  callAttachMenuBot: {\n    chatId: string;\n    botId: string;\n    isFromBotMenu?: boolean;\n    url?: string;\n    startParam?: string;\n  };\n\n  requestBotUrlAuth: {\n    chatId: string;\n    messageId: number;\n    buttonId: number;\n    url: string;\n  };\n\n  acceptBotUrlAuth: {\n    isWriteAllowed?: boolean;\n  };\n\n  requestLinkUrlAuth: {\n    url: string;\n  };\n\n  acceptLinkUrlAuth: {\n    isWriteAllowed?: boolean;\n  };\n\n  // Settings\n  loadAuthorizations: never;\n  terminateAuthorization: {\n    hash: string;\n  };\n  terminateAllAuthorizations: never;\n\n  loadWebAuthorizations: never;\n  terminateWebAuthorization: {\n    hash: string;\n  };\n  terminateAllWebAuthorizations: never;\n\n  // Misc\n  openPollModal: {\n    isQuiz?: boolean;\n  };\n  closePollModal: never;\n  requestConfetti: {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n  } | undefined;\n\n  openUrl: {\n    url: string;\n    shouldSkipModal?: boolean;\n  };\n  toggleSafeLinkModal: {\n    url?: string;\n  };\n  closeUrlAuthModal: never;\n\n  // Calls\n  requestCall: {\n    userId: string;\n    isVideo?: boolean;\n  };\n  sendSignalingData: P2pMessage;\n  hangUp: never;\n  acceptCall: never;\n  setCallRating: {\n    rating: number;\n    comment: string;\n  };\n  closeCallRatingModal: never;\n  playGroupCallSound: {\n    sound: CallSound;\n  };\n  connectToActivePhoneCall: never;\n\n  // Passcode\n  setPasscode: { passcode: string };\n  clearPasscode: never;\n  lockScreen: never;\n  unlockScreen: { sessionJson: string; globalJson: string };\n  softSignIn: never;\n  logInvalidUnlockAttempt: never;\n  resetInvalidUnlockAttempts: never;\n  setPasscodeError: { error: string };\n  clearPasscodeError: never;\n  skipLockOnUnload: never;\n\n  // Settings\n  requestNextSettingsScreen: SettingsScreens;\n  closeDeleteChatFolderModal: never;\n  openDeleteChatFolderModal: { folderId: number };\n  loadGlobalPrivacySettings: never;\n  updateGlobalPrivacySettings: { shouldArchiveAndMuteNewNonContact: boolean };\n\n  // Premium\n  openPremiumModal: {\n    initialSection?: string;\n    fromUserId?: string;\n    isSuccess?: boolean;\n  };\n  closePremiumModal: never | {\n    isClosed?: boolean;\n  };\n\n  transcribeAudio: {\n    chatId: string;\n    messageId: number;\n  };\n\n  loadPremiumStickers: {\n    hash?: string;\n  };\n\n  // Invoice\n  openInvoice: ApiInputInvoice;\n}\n\nexport type NonTypedActionNames = (\n  // updater\n  'onNotifyUpdate' |\n  // system\n  'init' | 'reset' | 'disconnect' | 'initApi' | 'sync' | 'saveSession' |\n  'showNotification' | 'dismissNotification' | 'showDialog' | 'dismissDialog' |\n  // ui\n  'toggleChatInfo' | 'setIsUiReady' | 'addRecentEmoji' | 'toggleLeftColumn' |\n  'toggleSafeLinkModal' | 'openHistoryCalendar' | 'closeHistoryCalendar' | 'disableContextMenuHint' |\n  'setNewChatMembersDialogState' | 'disableHistoryAnimations' | 'setLeftColumnWidth' | 'resetLeftColumnWidth' |\n  'openSeenByModal' | 'closeSeenByModal' | 'closeReactorListModal' | 'openReactorListModal' |\n  'toggleStatistics' | 'toggleMessageStatistics' |\n  // auth\n  'setAuthPhoneNumber' | 'setAuthCode' | 'setAuthPassword' | 'signUp' | 'returnToAuthPhoneNumber' |\n  'setAuthRememberMe' | 'clearAuthError' | 'uploadProfilePhoto' | 'goToAuthQrCode' | 'clearCache' |\n  // chats\n  'preloadTopChatMessages' | 'loadAllChats' | 'openChatWithInfo' | 'openLinkedChat' |\n  'openSupportChat' | 'focusMessageInComments' | 'openChatByPhoneNumber' |\n  'loadChatSettings' | 'loadFullChat' | 'loadTopChats' | 'requestChatUpdate' | 'updateChatMutedState' |\n  'joinChannel' | 'leaveChannel' | 'deleteChannel' | 'toggleChatPinned' | 'toggleChatArchived' | 'toggleChatUnread' |\n  'loadChatFolders' | 'loadRecommendedChatFolders' | 'editChatFolder' | 'addChatFolder' | 'deleteChatFolder' |\n  'updateChat' | 'toggleSignatures' | 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup' |\n  'loadProfilePhotos' | 'loadMoreMembers' | 'setActiveChatFolder' | 'openNextChat' | 'setChatEnabledReactions' |\n  'addChatMembers' | 'deleteChatMember' | 'openPreviousChat' | 'editChatFolders' | 'toggleIsProtected' |\n  // messages\n  'loadViewportMessages' | 'selectMessage' | 'sendMessage' | 'cancelSendingMessage' | 'pinMessage' | 'deleteMessages' |\n  'markMessageListRead' | 'markMessagesRead' | 'loadMessage' | 'focusMessage' | 'focusLastMessage' |\n  'editMessage' | 'deleteHistory' | 'enterMessageSelectMode' | 'toggleMessageSelection' | 'exitMessageSelectMode' |\n  'openTelegramLink' | 'openChatByUsername' | 'requestThreadInfoUpdate' | 'setScrollOffset' | 'unpinAllMessages' |\n  'setReplyingToId' | 'editLastMessage' | 'saveDraft' | 'clearDraft' | 'loadPinnedMessages' |\n  'toggleMessageWebPage' | 'replyToNextMessage' | 'deleteChatUser' | 'deleteChat' | 'sendReaction' |\n  'reportMessages' | 'sendMessageAction' | 'focusNextReply' | 'openChatByInvite' | 'loadSeenBy' |\n  'loadSponsoredMessages' | 'viewSponsoredMessage' | 'loadSendAs' | 'saveDefaultSendAs' | 'loadAvailableReactions' |\n  'stopActiveEmojiInteraction' | 'interactWithAnimatedEmoji' | 'loadReactors' | 'setDefaultReaction' |\n  'sendDefaultReaction' | 'sendEmojiInteraction' | 'sendWatchingEmojiInteraction' | 'loadMessageReactions' |\n  'stopActiveReaction' | 'copySelectedMessages' | 'copyMessagesByIds' |\n  'setEditingId' |\n  // scheduled messages\n  'loadScheduledHistory' | 'sendScheduledMessages' | 'rescheduleMessage' | 'deleteScheduledMessages' |\n  // poll result\n  'openPollResults' | 'closePollResults' | 'loadPollOptionResults' |\n  // forwarding messages\n  'openForwardMenu' | 'exitForwardMode' | 'setForwardChatId' | 'forwardMessages' |\n  'openForwardMenuForSelectedMessages' |\n  // global search\n  'setGlobalSearchQuery' | 'searchMessagesGlobal' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats' |\n  'setGlobalSearchContent' | 'setGlobalSearchChatId' | 'setGlobalSearchDate' |\n  // message search\n  'openLocalTextSearch' | 'closeLocalTextSearch' | 'setLocalTextSearchQuery' | 'setLocalMediaSearchType' |\n  'searchTextMessagesLocal' | 'searchMediaMessagesLocal' | 'searchMessagesByDate' |\n  // management\n  'toggleManagement' | 'closeManagement' | 'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink' |\n  'setEditingExportedInvite' | 'loadExportedChatInvites' | 'editExportedChatInvite' | 'exportChatInvite' |\n  'deleteExportedChatInvite' | 'deleteRevokedExportedChatInvites' | 'setOpenedInviteInfo' | 'loadChatInviteImporters' |\n  'loadChatJoinRequests' | 'hideChatJoinRequest' | 'hideAllChatJoinRequests' | 'requestNextManagementScreen' |\n  'loadChatInviteRequesters' | 'hideChatReportPanel' |\n  // groups\n  'togglePreHistoryHidden' | 'updateChatDefaultBannedRights' | 'updateChatMemberBannedRights' | 'updateChatAdmin' |\n  'acceptInviteConfirmation' |\n  // users\n  'loadFullUser' | 'loadNearestCountry' | 'loadTopUsers' | 'loadContactList' |\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername' |\n  'deleteContact' | 'loadUser' | 'setUserSearchQuery' | 'loadCommonChats' | 'reportSpam' |\n  // chat creation\n  'createChannel' | 'createGroupChat' | 'resetChatCreation' |\n  // settings\n  'setSettingOption' | 'loadPasswordInfo' | 'clearTwoFaError' |\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' | 'checkPassword' |\n  'loadBlockedContacts' | 'blockContact' | 'unblockContact' |\n  'loadNotificationSettings' | 'updateContactSignUpNotification' | 'updateNotificationSettings' |\n  'updateWebNotificationSettings' | 'loadLanguages' | 'loadPrivacySettings' | 'setPrivacyVisibility' |\n  'setPrivacySettings' | 'loadNotificationExceptions' | 'setThemeSettings' | 'updateIsOnline' |\n  'loadContentSettings' | 'updateContentSettings' |\n  'loadCountryList' | 'ensureTimeFormat' | 'loadAppConfig' |\n  // stickers & GIFs\n  'setStickerSearchQuery' | 'loadSavedGifs' | 'saveGif' | 'setGifSearchQuery' | 'searchMoreGifs' |\n  'faveSticker' | 'unfaveSticker' | 'toggleStickerSet' | 'loadAnimatedEmojis' | 'loadStickers' |\n  'loadStickersForEmoji' | 'clearStickersForEmoji' | 'loadEmojiKeywords' | 'loadGreetingStickers' |\n  // bots\n  'sendBotCommand' | 'loadTopInlineBots' | 'queryInlineBot' | 'sendInlineBotResult' |\n  'resetInlineBot' |\n  // misc\n  'loadWebPagePreview' | 'clearWebPagePreview' | 'loadWallpapers' | 'uploadWallpaper' |\n  'setDeviceToken' | 'deleteDeviceToken' |\n  'checkVersionNotification' | 'createServiceNotification' |\n  // payment\n  'closePaymentModal' | 'addPaymentError' | 'validateRequestedInfo' | 'setPaymentStep' | 'sendPaymentForm' |\n  'getReceipt' | 'sendCredentialsInfo' | 'clearPaymentError' | 'clearReceipt' |\n  // calls\n  'joinGroupCall' | 'toggleGroupCallMute' | 'toggleGroupCallPresentation' | 'leaveGroupCall' |\n  'toggleGroupCallVideo' | 'requestToSpeak' | 'setGroupCallParticipantVolume' | 'toggleGroupCallPanel' |\n  'createGroupCall' | 'joinVoiceChatByLink' | 'subscribeToGroupCallUpdates' | 'createGroupCallInviteLink' |\n  'loadMoreGroupCallParticipants' | 'connectToActiveGroupCall' |\n  // stats\n  'loadStatistics' | 'loadMessageStatistics' | 'loadStatisticsAsyncGraph'\n);\n\nconst typed = typify<GlobalState, ActionPayloads, NonTypedActionNames>();\nexport type GlobalActions = ReturnType<typeof typed.getActions>;\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport { MainViewTypeEnums } from '../../types';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      ui:{\n        ...global.ui,\n        mainViewType:MainViewTypeEnums.noView,\n      },\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithText', (global, actions, payload) => {\n  const { chatId, text } = payload;\n\n  actions.openChat({ id: chatId });\n\n  return {\n    ...global,\n    openChatWithText: {\n      chatId,\n      text,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { MainViewTypeEnums } from '../../types';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n  return {\n    ...global,\n    ui:{\n      ...global.ui,\n      mainViewType:MainViewTypeEnums.noView,\n    },\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\n\naddActionHandler('openMainView', (global,action,payload) => {\n  return {\n    ...global,\n    ui: {\n      ...global.ui,\n      ...payload,\n    },\n    isLeftColumnShown: false,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiMessage,\n  ApiMessageForwardInfo,\n  ApiPhoto,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiAudio,\n  ApiDocument,\n  ApiAction,\n  ApiContact,\n  ApiAttachment,\n  ApiPoll,\n  ApiNewPoll,\n  ApiWebPage,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiReplyKeyboard,\n  ApiKeyboardButton,\n  ApiChat,\n  ApiThreadInfo,\n  ApiInvoice,\n  ApiGroupCall,\n  ApiReactions,\n  ApiReactionCount,\n  ApiUserReaction,\n  ApiAvailableReaction,\n  ApiSponsoredMessage,\n  ApiUser,\n  ApiLocation,\n  ApiGame,\n  PhoneCallAction,\n  ApiWebDocument,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  VIDEO_MOV_TYPE,\n  VIDEO_WEBM_TYPE,\n} from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { buildStickerFromDocument } from './symbols';\nimport { buildApiPhoto, buildApiPhotoSize, buildApiThumbnailFromStripped } from './common';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport { addPhotoToLocalDb, resolveMessageApiChatId, serializeBytes } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildApiCallDiscardReason } from './calls';\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\n\nlet localMessageCounter = 0;\nconst getNextLocalMessageId = () => parseFloat(`${Date.now()}.${localMessageCounter++}`);\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\ntype UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards'\n  )>\n);\n\nexport function buildApiMessageWithChatId(chatId: string, mtpMessage: UniversalMessage): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n\n  const { replyToMsgId, replyToTopId, replyToPeerId } = mtpMessage.replyTo || {};\n  const isEdited = mtpMessage.editDate && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse,\n  } = buildReplyButtons(mtpMessage) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { replies, mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n\n  return {\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    views: mtpMessage.views,\n    forwards: mtpMessage.forwards,\n    isFromScheduled: mtpMessage.fromScheduled,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    ...(replyToMsgId && { replyToMessageId: replyToMsgId }),\n    ...(replyToPeerId && { replyToChatId: getApiChatIdFromMtpPeer(replyToPeerId) }),\n    ...(replyToTopId && { replyToTopMessageId: replyToTopId }),\n    ...(forwardInfo && { forwardInfo }),\n    ...(isEdited && { isEdited }),\n    ...(mtpMessage.editDate && { editDate: mtpMessage.editDate }),\n    ...(isMediaUnread && { isMediaUnread }),\n    ...(mtpMessage.mentioned && isMediaUnread && { hasUnreadMention: true }),\n    ...(mtpMessage.mentioned && { isMentioned: true }),\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && { keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    ...(replies?.comments && { threadInfo: buildThreadInfo(replies, mtpMessage.id, chatId) }),\n    ...(postAuthor && { adminTitle: postAuthor }),\n    ...(mtpMessage.noforwards && { isProtected: true }),\n  };\n}\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList,\n  } = reactions;\n\n  return {\n    canSeeList,\n    results: results.map(buildReactionCount),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction),\n  };\n}\n\nfunction buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount {\n  const { chosen, count, reaction } = reactionCount;\n\n  return {\n    isChosen: chosen,\n    count,\n    reaction,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiUserReaction {\n  const {\n    peerId, reaction, big, unread,\n  } = userReaction;\n\n  return {\n    userId: getApiChatIdFromMtpPeer(peerId),\n    reaction,\n    isUnread: unread,\n    isBig: big,\n  };\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction,\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: ApiMessage['content'] = {};\n\n  if (mtpMessage.media) {\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n      && !content.sticker && !content.poll && !content.contact && !(content.video?.isRound)) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage) {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyToMsgId, date,\n  } = draft;\n\n  return {\n    formattedText: message ? buildMessageTextContent(message, entities) : undefined,\n    replyingToId: replyToMsgId,\n    date,\n  };\n}\n\nexport function buildMessageMediaContent(media: GramJs.TypeMessageMedia): ApiMessage['content'] | undefined {\n  if ('ttlSeconds' in media && media.ttlSeconds) {\n    return undefined;\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  if (video) return { video };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const voice = buildVoice(media);\n  if (voice) return { voice };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const poll = buildPollFromMedia(media);\n  if (poll) return { poll };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  return undefined;\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    fromChatId: savedFromPeerId || fromId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    senderUserId: fromId,\n    hiddenUserName: fwdFrom.fromName,\n    adminTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_MOV_TYPE && !(self as any).isMovSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n  } = videoAttr;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document);\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    id: String(media.document.id),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n\n  let mediaType: ApiDocument['mediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  const photoSize = thumbs && thumbs.find((s: any): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    mediaType,\n    mediaSize,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    firstName, lastName, phoneNumber, userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { type: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nfunction buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: answer.text,\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'question',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildInvoice(media: GramJs.MessageMediaInvoice): ApiInvoice {\n  const {\n    description: text, title, photo, test, totalAmount, currency, receiptMsgId,\n  } = media;\n\n  return {\n    text,\n    title,\n    photo: buildApiWebDocument(photo),\n    receiptMsgId,\n    amount: Number(totalAmount),\n    currency,\n    isTest: test,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults && rawResults.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((id) => buildApiPeerId(id, 'user')),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const { id, photo, document } = media.webpage;\n\n  let video;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n\n  return {\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && document ? buildApiDocument(document) : undefined,\n    video,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let text: string;\n  const translationValues = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    text = 'Chat.Service.BotPermissionAllowed';\n    translationValues.push(action.domain);\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  // TODO Move to the proper button inside preview\n  if (!replyMarkup) {\n    if (media instanceof GramJs.MessageMediaWebPage && media.webpage instanceof GramJs.WebPage) {\n      if (media.webpage.type === 'telegram_message') {\n        return {\n          inlineButtons: [[{\n            type: 'url',\n            text: 'Show Message',\n            url: media.webpage.url,\n          }]],\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  // TODO\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    });\n  });\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n    }),\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyingTo?: number,\n  replyingToTopId?: number,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiChat | ApiUser,\n  serverTimeOffset = 0,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  return {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + serverTimeOffset,\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    ...(replyingTo && { replyToMessageId: replyingTo }),\n    ...(replyingToTopId && { replyToTopMessageId: replyingToTopId }),\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nexport function buildLocalForwardedMessage(\n  toChat: ApiChat,\n  message: ApiMessage,\n  serverTimeOffset: number,\n  scheduledAt?: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content,\n    date: scheduledAt || Math.round(Date.now() / 1000) + serverTimeOffset,\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(senderId !== currentUserId && !isAudio && {\n      forwardInfo: {\n        date: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        senderUserId: senderId,\n      },\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildUploadingMedia(\n  attachment: ApiAttachment,\n): ApiMessage['content'] {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n  } = attachment;\n\n  if (attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      const { width, height } = attachment.quick;\n      return {\n        photo: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          sizes: [],\n          thumbnail: { width, height, dataUri: '' }, // Used only for dimensions\n          blobUrl,\n        },\n      };\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      const { width, height, duration } = attachment.quick;\n      return {\n        video: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          duration: duration || 0,\n          fileName,\n          width,\n          height,\n          blobUrl,\n          ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n          size,\n        },\n      };\n    }\n  }\n  if (attachment.voice) {\n    const { duration, waveform } = attachment.voice;\n    const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n    return {\n      voice: {\n        id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n        duration,\n        waveform: inputWaveform,\n      },\n    };\n  }\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const { duration, performer, title } = attachment.audio || {};\n    return {\n      audio: {\n        id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n        mimeType,\n        fileName,\n        size,\n        duration: duration || 0,\n        title,\n        performer,\n      },\n    };\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const { className: type, offset, length } = entity;\n  return {\n    type,\n    offset,\n    length,\n    ...(entity instanceof GramJs.MessageEntityMentionName && { userId: buildApiPeerId(entity.userId, 'user') }),\n    ...('url' in entity && { url: entity.url }),\n    ...('language' in entity && { language: entity.language }),\n  };\n}\n\nfunction buildThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers,\n  } = messageReplies;\n  if (!channelId) {\n    return undefined;\n  }\n\n  const apiChannelId = buildApiPeerId(channelId, 'channel');\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const isPostThread = chatId !== apiChannelId;\n\n  return {\n    threadId: messageId,\n    ...(isPostThread ? {\n      chatId: apiChannelId,\n      originChannelId: chatId,\n    } : {\n      chatId,\n    }),\n    messagesCount: replies,\n    lastMessageId: maxId,\n    lastReadInboxMessageId: readMaxId,\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {GlobalActions} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateOutlyingIds,\n  updateSponsoredMessage,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise} from '../../../util/schedulers';\nimport {getMessageOriginalId, isServiceNotificationMessage} from '../../helpers';\nimport {getTranslation} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport AccountController from \"../../../lib/client/AccountController\";\nimport MsgConn from \"../../../lib/client/MsgConn\";\nimport {MsgReq, MsgRes} from \"../../../lib/protobuf/PTPMsg\";\nimport {ERR, MsgType} from \"../../../lib/protobuf/PTPCommon\";\nimport GroupController from \"../../../lib/client/GroupController\";\nimport {buildLocalMessage} from \"../../../api/gramjs/apiBuilders/messages\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore,\n  } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n  const group_id = parseInt(chat.id);\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const account = AccountController.getCurrentAccount();\n  const group = GroupController.getInstance(group_id);\n  const {lastMsgId} = account?.getGroupRecord(group_id)!;\n  const messages:ApiMessage[] = [];\n  let lastMessage = null;\n\n  if(lastMsgId > 0){\n    if(group.getMessageIds().length === 0){\n      if(addOffset === undefined){\n        addOffset = -21;\n      }\n      for (let i = 0; i < -addOffset; i++) {\n        if(lastMsgId - i < 1){\n          break\n        }\n        const msg = await group.getMessageFromDb(lastMsgId - i);\n        group.saveMsg([msg],true)\n      }\n    }\n    for (let i = 0; i < group.getMessageIds().length; i++) {\n      const msg_id = group.getMessageIds()[i];\n      const msg = await group.getMessageFromDb(msg_id);\n      const localMessage = buildLocalMessage(\n        chat,\n        msg.msg_data\n      );\n      localMessage.date = msg.sent_at;\n      if(!lastMessage || lastMessage.date < msg.sent_at){\n        lastMessage = localMessage;\n      }\n\n      messages.push(localMessage);\n    }\n  }\n  // const result = await callApi('fetchMessages', {\n  //   chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n  //   offsetId,\n  //   addOffset,\n  //   limit: MESSAGE_LIST_SLICE,\n  //   threadId,\n  // });\n  //\n  // if (!result) {\n  //   return;\n  // }\n\n  // const {\n  //   messages, users, chats, threadInfos,\n  // } = result;\n  const users = [];\n  const chats = [];\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n\n  if(!chat.lastMessage && messages.length > 0 && lastMessage){\n    global = {\n      ...global,\n      chats:{\n        ...global.chats,\n        byId:{\n          ...global.chats.byId,\n          [chatId]:{\n            ...chat,\n            lastMessage\n          }\n        }\n      }\n    }\n  }\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  const localMessage = await callApi('sendMessage', params, progressCallback);\n  const chatId = params.chat.id;\n  const group_id = parseInt(localMessage!.chatId);\n  const group = AccountController.getCurrentAccount()?.getGroupRecord(group_id);\n  const msgReq = {\n    group_adr: group?.groupAddress!,\n    msg_data: localMessage!.content.text!.text,\n    msg_type: MsgType.MSG_TYPE_TEXT,\n    sent_at: localMessage!.date\n  };\n  const msgInfo = {\n    group_id,\n    from_uid: AccountController.getCurrentAccount()?.getUid()!,\n    msg_type:msgReq.msg_type,\n    msg_data:msgReq.msg_data,\n    sent_at:msgReq.sent_at,\n    msg_id: 0,\n  };\n  AccountController.getCurrentAccount()?.saveGroupMsg(group_id,msgInfo)\n  const pdu = await MsgConn.getInstance(AccountController.getCurrentAccountId()).SendPduWithCallback(new MsgReq(msgReq).pack())\n  const {error,msg_id} = MsgRes.parseMsg(pdu);\n  if(error === ERR.NO_ERROR){\n    msgInfo.msg_id = msg_id!;\n    AccountController.getCurrentAccount()?.saveGroupMsg(group_id,msgInfo)\n  }\n  await callApi('updateMessageState', {\n    localMessageId:localMessage!.id,\n    chatId,\n    localMessageIsScheduled:!!localMessage!.isScheduled,\n    localMessageIsSendOk:error == ERR.NO_ERROR,\n  });\n\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  if (!chat.unreadMentionsCount) {\n    return;\n  }\n\n  const unreadMentionsCount = chat.unreadMentionsCount - messageIds.length;\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  if (!unreadMentions.length && unreadMentionsCount) {\n    actions.fetchUnreadMentions({\n      chatId: chat.id,\n      offsetId: Math.max(...messageIds),\n    });\n  }\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      if (global.openedStickerSetShortName === stickerSetShortName) {\n        setGlobal({\n          ...global,\n          openedStickerSetShortName: undefined,\n        });\n      }\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash!, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if (global.openedStickerSetShortName === stickerSetShortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { sticker } = payload;\n\n  if (!selectStickerSet(global, sticker.stickerSetId)) {\n    if (!sticker.stickerSetAccessHash) {\n      actions.showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n      return;\n    }\n\n    await loadStickers(sticker.stickerSetId, sticker.stickerSetAccessHash);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, sticker.stickerSetId);\n  if (!set?.shortName) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n\n  if (isUsernameAvailable === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachMenuBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachMenuBots(hash);\n});\n\naddActionHandler('toggleBotInAttachMenu', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, isEnabled);\n});\n\nasync function toggleBotInAttachMenu(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleBotInAttachMenu', { bot, isEnabled });\n  await loadAttachMenuBots();\n}\n\nasync function loadAttachMenuBots(hash?: string) {\n  const result = await callApi('loadAttachMenuBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachMenuBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      botAttachRequest: {\n        botId,\n        chatId,\n        startParam,\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmBotAttachRequest', async (global, actions) => {\n  const { botAttachRequest } = global;\n  if (!botAttachRequest) return;\n\n  const { botId, chatId, startParam } = botAttachRequest;\n\n  setGlobal({\n    ...global,\n    botAttachRequest: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, true);\n\n  actions.callAttachMenuBot({ chatId, botId, startParam });\n});\n\naddActionHandler('closeBotAttachRequestModal', (global) => {\n  return {\n    ...global,\n    botAttachRequest: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport type { ApiChat, ApiRequestInputInvoice } from '../../../api/types';\n\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) return;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) return;\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) return;\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n  if (!invoice) return;\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n  const { form, invoice } = result;\n  let global = setPaymentForm(getGlobal(), form);\n  let step = PaymentStep.PaymentInfo;\n  const {\n    shippingAddressRequested, nameRequested, phoneRequested, emailRequested,\n  } = global.payment.invoice || {};\n  if (shippingAddressRequested || nameRequested || phoneRequested || emailRequested) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return undefined;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  void sendPaymentForm(requestInputInvoice, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'pending',\n    },\n  };\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  inputInvoice: ApiRequestInputInvoice,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    let global = clearPayment(getGlobal());\n    global = {\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'paid',\n      },\n    };\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const { initialSection, fromUserId, isSuccess } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      isSuccess,\n    },\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\nimport { MainViewTypeEnums } from '../../types';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    ui:{\n      ...global.ui,\n      mainViewType:MainViewTypeEnums.noView,\n    },\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      }\n\n      setGlobal(updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(update.message.id && update.message.hasUnreadMention && {\n          unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1,\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id],\n        }),\n      }));\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n\n  const { id, chatId } = message;\n\n  let { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return undefined;\n      }\n      global = clearPayment(global);\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectIsPremiumPurchaseBlocked, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectComponents: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    isPremiumPurchaseBlocked?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectComponents,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  isPremiumPurchaseBlocked,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = [\n    LeftColumnContent.ChatList,\n    LeftColumnContent.Discover,\n    LeftColumnContent.Wallet,\n    LeftColumnContent.Chart\n  ].includes(content);\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleSelectPremium = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"loop\"\n            onClick={onSelectComponents}\n          >\n            {lang('Components')}\n          </MenuItem>\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          {!isPremiumPurchaseBlocked && (\n            <MenuItem\n              customIcon={<PremiumIcon withGradient big />}\n              onClick={handleSelectPremium}\n            >\n              {lang('TelegramPremium')}\n              <span className=\"menu-item-badge\">{lang('New')}</span>\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n      isPremiumPurchaseBlocked: selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const defaultFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return defaultFolder;\n        }\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, defaultFolder, orderedFolderIds]);\n\n  const allFolderIndex = displayedFolders?.findIndex((folder) => folder.id === 0);\n  const isInAllFolder = allFolderIndex === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(allFolderIndex);\n    }\n  }, [activeChatFolder, allFolderIndex, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = !isInAllFolder;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(allFolderIndex);\n    }\n  }) : undefined), [activeChatFolder, allFolderIndex, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInAllFolder,\n    onBack: () => setActiveChatFolder(allFolderIndex, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        null\n        // <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, memo, useEffect } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport forceReflow from '../../util/forceReflow';\nimport renderText from '../common/helpers/renderText';\n\nimport './TabBarItem.scss';\n\ntype OwnProps = {\n  className?: string;\n  icon?: string;\n  title?: string;\n  isActive?: boolean;\n  isBlocked?: boolean;\n  badgeCount?: number;\n  isBadgeActive?: boolean;\n  previousActiveTab?: number;\n  onClick: (arg: number) => void;\n  clickArg: number;\n};\n\nconst classNames = {\n  active: 'Tab--active',\n  badgeActive: 'Tab__badge--active',\n};\n\nconst TabBarItem: FC<OwnProps> = ({\n  className,\n  title,\n  icon,\n  isActive,\n  isBlocked,\n  badgeCount,\n  isBadgeActive,\n  previousActiveTab,\n  onClick,\n  clickArg,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const tabRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Set initial active state\n    if (isActive && previousActiveTab === undefined && tabRef.current) {\n      tabRef.current.classList.add(classNames.active);\n    }\n\n    if (!isActive || previousActiveTab === undefined) {\n      return;\n    }\n\n    const tabEl = tabRef.current!;\n    const prevTabEl = tabEl.parentElement!.children[previousActiveTab];\n    if (!prevTabEl) {\n      return;\n    }\n\n    const platformEl = tabEl.querySelector<HTMLElement>('.platform')!;\n    const prevPlatformEl = prevTabEl.querySelector<HTMLElement>('.platform')!;\n\n    // We move and resize the platform, so it repeats the position and size of the previous one\n    const shiftLeft = prevPlatformEl.parentElement!.offsetLeft - platformEl.parentElement!.offsetLeft;\n    const scaleFactor = prevPlatformEl.clientWidth / platformEl.clientWidth;\n\n    prevPlatformEl.classList.remove('animate');\n    platformEl.classList.remove('animate');\n    platformEl.style.transform = `translate3d(${shiftLeft}px, 0, 0) scale3d(${scaleFactor}, 1, 1)`;\n    forceReflow(platformEl);\n    platformEl.classList.add('animate');\n    platformEl.style.transform = 'none';\n\n    prevTabEl.classList.remove(classNames.active);\n    tabEl.classList.add(classNames.active);\n  }, [isActive, previousActiveTab]);\n\n  return (\n    <div\n      className={buildClassName('TabBarItem', className)}\n      onClick={() => onClick(clickArg)}\n      ref={tabRef}\n    >\n      <span className={buildClassName(icon && \"has-icon\")}>\n        {(icon && icon.indexOf(\"fa\") !== 0)  && <i className={`icon icon-${icon} ${isActive ? \"active\" : \"\"}`} />}\n        {(icon && icon.indexOf(\"fa\") === 0)  && <i className={`icon ${icon} ${isActive ? \"active\" : \"\"}`} />}\n        <span className='title'>\n          {title ? renderText(title):\"\"}\n        </span>\n        {Boolean(badgeCount) && (\n          <span className={buildClassName('badge', isBadgeActive && classNames.badgeActive)}>{badgeCount}</span>\n        )}\n        <i className=\"platform\" />\n      </span>\n    </div>\n  );\n};\n\nexport default memo(TabBarItem);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/environment';\nimport fastSmoothScrollHorizontal from '../../util/fastSmoothScrollHorizontal';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\n\nimport TabBarItem from './TabBarItem';\n\nimport './TabList.scss';\n\nexport type TabWithProperties = {\n  id?: number;\n  icon?: string;\n  title?: string;\n  badgeCount?: number;\n  isBlocked?: boolean;\n  isBadgeActive?: boolean;\n};\n\ntype OwnProps = {\n  tabs: readonly TabWithProperties[];\n  activeTab: number;\n  big?: boolean;\n  onSwitchTab: (index: number) => void;\n};\n\nconst TAB_SCROLL_THRESHOLD_PX = 16;\n// Should match duration from `--slide-transition` CSS variable\nconst SCROLL_DURATION = IS_IOS ? 450 : IS_ANDROID ? 400 : 300;\n\nconst TabList: FC<OwnProps> = ({\n  tabs, activeTab, big, onSwitchTab,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousActiveTab = usePrevious(activeTab);\n\n  useHorizontalScroll(containerRef.current);\n\n  // Scroll container to place active tab in the center\n  useEffect(() => {\n    const container = containerRef.current!;\n    const { scrollWidth, offsetWidth, scrollLeft } = container;\n    if (scrollWidth <= offsetWidth) {\n      return;\n    }\n\n    const activeTabElement = container.childNodes[activeTab] as HTMLElement | null;\n    if (!activeTabElement) {\n      return;\n    }\n\n    const { offsetLeft: activeTabOffsetLeft, offsetWidth: activeTabOffsetWidth } = activeTabElement;\n    const newLeft = activeTabOffsetLeft - (offsetWidth / 2) + (activeTabOffsetWidth / 2);\n\n    // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n    if (Math.abs(newLeft - scrollLeft) < TAB_SCROLL_THRESHOLD_PX) {\n      return;\n    }\n\n    fastSmoothScrollHorizontal(container, newLeft, SCROLL_DURATION);\n  }, [activeTab]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      className={`TabList border-top no-selection no-scrollbar ${big ? 'big' : ''}`}\n      ref={containerRef}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {tabs.map((tab, i) => (\n        <TabBarItem\n          key={tab.id ?? tab.title}\n          title={tab.title ? lang(tab.title):undefined}\n          icon={tab.icon}\n          isActive={i === activeTab}\n          isBlocked={tab.isBlocked}\n          badgeCount={tab.badgeCount}\n          isBadgeActive={tab.isBadgeActive}\n          previousActiveTab={previousActiveTab}\n          onClick={onSwitchTab}\n          clickArg={i}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(TabList);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport EmptyFolder from './EmptyFolder';\nimport EmptyRecord from './EmptyRecord';\nimport Loading from '../../ui/Loading';\nimport ListItem from '../../ui/ListItem';\nimport { ComponentsScreens } from '../../../types';\nimport { MainViewTypeEnums } from '../../../global/types';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst TabWalletView: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openMainView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const defaultFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return defaultFolder;\n        }\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, defaultFolder, orderedFolderIds]);\n\n  const allFolderIndex = displayedFolders?.findIndex((folder) => folder.id === 0);\n  const isInAllFolder = allFolderIndex === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(allFolderIndex);\n    }\n  }, [activeChatFolder, allFolderIndex, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = !isInAllFolder;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(allFolderIndex);\n    }\n  }) : undefined), [activeChatFolder, allFolderIndex, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInAllFolder,\n    onBack: () => setActiveChatFolder(allFolderIndex, { forceOnHeavyAnimation: true }),\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        <div className={\"p-2\"}>\n          <ListItem\n            icon=\"italic\"\n            onClick={() => {\n              openMainView({mainViewType:MainViewTypeEnums.componentsUi})\n            }}\n          >\n            {lang('UI')}\n          </ListItem>\n        </div>\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(TabWalletView));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\nimport TabList from '../../ui/TabList';\nimport TabBarList from '../../ui/TabBarList';\nimport TabWalletView from './TabWalletView';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectComponents = useCallback(() => {\n    onContentChange(LeftColumnContent.Components);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  const tabs = [\n    { type: LeftColumnContent.ChatList,icon:\"fa-message fas\"},\n    { type: LeftColumnContent.Wallet, icon:\"fa-wallet fas\"},\n    { type: LeftColumnContent.Chart, icon:\"fa-chart-column fas\"},\n    { type: LeftColumnContent.Discover, icon:\"fas fa-location-arrow\"},\n  ];\n\n  let defaultCurrentTab = 0;\n  for (let i = 0; i < tabs.length; i++) {\n    if(tabs[i].type === content){\n      defaultCurrentTab = i\n      break\n    }\n  }\n  const [currentTab,setCurrentTab] = useState(defaultCurrentTab)\n\n  useEffect(() => {\n    if(currentTab !== defaultCurrentTab){\n      setCurrentTab(defaultCurrentTab)\n    }\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content,setCurrentTab,currentTab,defaultCurrentTab]);\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectComponents={handleSelectComponents}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.Chart:\n              return <TabWalletView onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.Wallet:\n              return <TabWalletView onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.Discover:\n              return <TabWalletView onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n\n\n      <TabBarList activeTab={currentTab} tabs={tabs} onSwitchTab={(index)=>{\n        setCurrentTab(index)\n        onContentChange(tabs[index].type);\n      }} />\n\n      {/*<NewChatButton*/}\n      {/*  isShown={isNewChatButtonShown}*/}\n      {/*  onNewPrivateChat={handleSelectContacts}*/}\n      {/*  onNewChannel={handleSelectNewChannel}*/}\n      {/*  onNewGroup={handleSelectNewGroup}*/}\n      {/*/>*/}\n\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../global';\n\nimport {ChatCreationProgress, LeftColumnContent, SettingsScreens} from '../../types';\n\nimport {IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME} from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport {useResize} from '../../hooks/useResize';\nimport {useHotkeys} from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst leftColumnContent = window.sessionStorage.getItem(\"LeftColumnContent\") || LeftColumnContent.ChatList;\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent_(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent_(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (chatCreationProgress === ChatCreationProgress.Complete) {\n      setContent_(LeftColumnContent.ChatList);\n    }\n  }, [chatCreationProgress]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent_(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent_}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n    } = global;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      activeChatFolder,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {(chat && chat.pair_uid! > 0) ? (\n            <PrivateChatInfo\n              userId={chat.pair_uid!.toString()}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const {\n    isLottie, stickerSetId, isVideo, hasEffect,\n  } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !shouldLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  useEffect(() => {\n    if (hasEffect && shouldPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, shouldPlayEffect, onPlayEffect, shouldPlay, startPlayingEffect]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? handleClick : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          tgsUrl={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      {hasEffect && shouldLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport safePlay from '../../../util/safePlay';\nimport { getActions } from '../../../global';\nimport useMedia from '../../../hooks/useMedia';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\n\nconst SIZE = 104;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const style = `width: ${SIZE}px; height: ${SIZE}px;`;\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: SIZE,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: SIZE,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction,\n  ]);\n\n  return {\n    ref,\n    size: SIZE,\n    style,\n    handleClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  debugger\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n  debugger\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n              noVideo\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank', 'noopener')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n              noVideo\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" noVideo />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-message-MessagePhoneCall-module__root\",\"button\":\"src-components-middle-message-MessagePhoneCall-module__button\",\"info\":\"src-components-middle-message-MessagePhoneCall-module__info\",\"reason\":\"src-components-middle-message-MessagePhoneCall-module__reason\",\"arrow\":\"src-components-middle-message-MessagePhoneCall-module__arrow\",\"incoming\":\"src-components-middle-message-MessagePhoneCall-module__incoming\",\"missed\":\"src-components-middle-message-MessagePhoneCall-module__missed\",\"meta\":\"src-components-middle-message-MessagePhoneCall-module__meta\",\"duration\":\"src-components-middle-message-MessagePhoneCall-module__duration\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n}) => {\n\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(\n    message, highlight, isEmojiOnlyMessage(customShape), undefined, undefined, isProtected,\n  );\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForMedia}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    let {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n            isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  isPrivate?:boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  isPrivate,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n\n  let shouldRenderGreeting = isPrivate && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <video\n                  src={botInfoGifUrl}\n                  loop\n                  autoPlay\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate!}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    let messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    let { isRestricted, restrictionReason, lastMessage } = chat;\n\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    const isPrivate = Boolean(chatId && chat.pair_uid! > 0);\n    const props = {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isPrivate,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n    if(withLastMessageWhenPreloading){\n      return {\n        ...props,\n        lastMessage\n      }\n    }else{\n      return props;\n    }\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-ScrollDownButton-module__root\",\"button\":\"src-components-middle-ScrollDownButton-module__button\",\"icon\":\"src-components-middle-ScrollDownButton-module__icon\",\"unread-count\":\"src-components-middle-ScrollDownButton-module__unread-count\",\"unreadCount\":\"src-components-middle-ScrollDownButton-module__unread-count\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-FloatingActionButtons-module__root\",\"unread\":\"src-components-middle-FloatingActionButtons-module__unread\",\"revealed\":\"src-components-middle-FloatingActionButtons-module__revealed\",\"no-composer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"noComposer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"no-extra-shift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"noExtraShift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"only-reactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"onlyReactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"is-symbol-menu-open\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\",\"isSymbolMenuOpen\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      // onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      // onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__root\",\"compact\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__compact\",\"image\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__image\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachmentMenuBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachmentMenuBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachmentMenuBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachMenuBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotIcon from './AttachmentMenuBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachMenuBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachmentMenuBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachMenuBot, toggleBotInAttachMenu } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleBotInAttachMenu]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachmentMenuBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachMenuBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachmentMenuBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotItem from './AttachmentMenuBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachMenuBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachMenuBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachMenuBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bot' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachMenuBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            {/*<MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>*/}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachmentMenuBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectAttachMenuPeerType,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachMenuBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachMenuBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n    callAttachMenuBot,\n    openLimitReachedModal,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  let {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  let {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n  canAttachMedia = true;\n  canAttachEmbedLinks = true;\n  canSendStickers = true;\n  canSendGifs = true;\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(isForCurrentMessageList, insertTextAndUpdateCursor, handleSetAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    // if (connectionState !== 'connectionStateReady') {\n    //   return;\n    // }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachMenuBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachMenuBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {isChatWithBot && isBotMenuButtonCommands && botCommands !== false && !activeVoiceRecording\n            && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n                noVideo\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachMenuBots={attachMenuBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    // const requestedText = selectRequestedText(global, chatId);\n    const requestedText = \"\";\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n        && threadId === currentMessageList?.threadId\n        && messageListType === currentMessageList?.type;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachMenuBots: global.attachMenu.bots,\n      attachMenuPeerType: selectAttachMenuPeerType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\nimport { MainViewTypeEnums } from '../../global/types';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  mainViewType: MainViewTypeEnums;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleMainViewHeader: FC<OwnProps & StateProps> = ({\n                                                           mainViewType,\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n    toggleLeftColumn();\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <h3>\n          {lang('CommentsCount', messagesCount, 'i')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleMainViewHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport { MainViewTypeEnums } from '../../global/types';\nimport MiddleMainViewHeader from './MiddleMainViewHeader';\n\ntype StateProps = {\n  mainViewType:MainViewTypeEnums;\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  mainViewType,\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const prevMainViewType = usePrevious(mainViewType);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  const { isMainViewReady, handleMainViewOpenEnd, handleMainViewSlideStop } = useMainViewIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    mainViewType,\n    prevMainViewType,\n    String(mainViewType),\n  );\n\n\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n  console.log({renderingChatId,renderingThreadId,mainViewType})\n  if(mainViewType > 0){\n    console.log({isMainViewReady})\n    return <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleMainViewOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n        <MiddleMainViewHeader\n          chatId={renderingChatId}\n          threadId={renderingThreadId}\n          messageListType={renderingMessageListType}\n          mainViewType={mainViewType}\n          isReady={isMainViewReady}\n        />\n        {mainViewType}\n\n      </div>\n    </div>\n  }\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const mainViewType = global.ui.mainViewType;\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      mainViewType,\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      console.log(\"handleOpenEnd\",chatId,Boolean(chatId),currentTransitionKey,prevTransitionKey)\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n\nfunction useMainViewIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  id?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      console.log(\"handleOpenEnd\",Boolean(id))\n      setIsReady(Boolean(id));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isMainViewReady: isReady && !willSwitchMessageList,\n    handleMainViewOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleMainViewSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"src-components-middle-MiddleColumn-module__background\",\"customBgImage\":\"src-components-middle-MiddleColumn-module__customBgImage\",\"customBgColor\":\"src-components-middle-MiddleColumn-module__customBgColor\",\"withTransition\":\"src-components-middle-MiddleColumn-module__withTransition\",\"blurred\":\"src-components-middle-MiddleColumn-module__blurred\",\"withRightColumn\":\"src-components-middle-MiddleColumn-module__withRightColumn\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport {\n  NewChatMembersProgress, MediaViewerOrigin, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst MAX_BLOB_SAFE_SIZE = 2000 * 1024 * 1024;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BLOB_SAFE_SIZE && !IS_OPFS_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is currently not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n        if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport type { GlobalState } from '../../global/types';\n\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\nconst GameModal: FC<OwnProps> = ({ openedGame, gameTitle }) => {\n  const { closeGame, showNotification, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        showNotification({ message: 'Unsupported game action' });\n      }\n    } catch (e) {\n      // Ignore messages from other origins\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu, showNotification]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(GameModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotAttachModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotAttachModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotAttachModal = useModuleLoader(Bundles.Extra, 'BotAttachModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotAttachModal ? <BotAttachModal {...props} /> : undefined;\n};\n\nexport default memo(BotAttachModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-main-ConfettiContainer-module__root\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { fastRaf } from '../../util/schedulers';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport BotAttachModal from './BotAttachModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  botAttachRequestBot?: ApiUser;\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  botAttachRequestBot,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachMenuBots,\n    loadContactList,\n    closePaymentModal,\n    clearReceipt,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    // if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    //   sync();\n    // }\n    if (connectionState === 'connectionStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachMenuBots();\n      loadContactList();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachMenuBots, loadContactList,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <BotAttachModal bot={botAttachRequestBot} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      botAttachRequest,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      botAttachRequestBot: botAttachRequest && selectUser(global, botAttachRequest.botId),\n      webApp: global.webApp,\n      currentUser,\n      urlAuth: global.urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { transitionClassNames, shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.container, transitionClassNames)}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"src-components-main-LockScreen-module__container\",\"wrapper\":\"src-components-main-LockScreen-module__wrapper\",\"icon\":\"src-components-main-LockScreen-module__icon\",\"help\":\"src-components-main-LockScreen-module__help\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","MainViewTypeEnums","typify","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","ui","mainViewType","noView","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","openChatWithText","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","order","added","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","Date","now","limit","limitReachedModal","status","payment","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","isScreenLocked","invalidAttemptsCount","initApi","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","getNextLocalMessageId","parseFloat","buildLocalMessage","entities","replyingTo","replyingToTopId","attachment","gif","poll","contact","scheduledAt","sendAs","media","buildUploadingMedia","isChannel","video","buildNewPoll","round","replyToMessageId","replyToTopMessageId","photo","isInAlbum","isScheduled","filename","fileName","blobUrl","previewBlobUrl","mimeType","size","quick","SUPPORTED_IMAGE_CONTENT_TYPES","sizes","thumbnail","dataUri","SUPPORTED_VIDEO_CONTENT_TYPES","duration","voice","waveform","inputWaveform","interpolateArray","SUPPORTED_AUDIO_CONTENT_TYPES","performer","title","audio","document","String","summary","pick","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","group_id","parseInt","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","account","AccountController","group","GroupController","lastMsgId","getGroupRecord","getMessageIds","i","msg","getMessageFromDb","saveMsg","msg_id","localMessage","msg_data","sent_at","users","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","selectThreadTopMessageId","callApi","msgReq","group_adr","groupAddress","msg_type","MsgType","msgInfo","from_uid","getUid","saveGroupMsg","pdu","MsgConn","SendPduWithCallback","MsgReq","pack","MsgRes","ERR","localMessageId","localMessageIsScheduled","localMessageIsSendOk","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","noWebPage","selectNoWebPage","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","selectThreadOriginChat","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","unreadMentionsCount","fetchUnreadMentions","markMessagesRead","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetId","accessHash","stickerSetShortName","stickerSet","getActions","openedStickerSetShortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","addedSetIds","cached","setsById","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","selectIsCurrentUserPremium","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","updateStickersForEmoji","loadStickersForEmoji","shortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThreadInfos","threadInfos","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleBotInAttachMenu","bot","isEnabled","loadAttachMenuBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","showDialog","openUrl","openGame","alert","isError","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","getPaymentForm","form","invoice","setPaymentForm","step","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","botUsername","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","botAttachRequest","callAttachMenuBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestInputInvoice","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","isClosed","isClosing","initialSection","fromUserId","loadPremiumStickers","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","currentMessage","getMessageContent","isPreloadedGlobally","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","isPremiumPurchaseBlocked","selectIsPremiumPurchaseBlocked","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectComponents","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleSelectPremium","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","customIcon","PremiumIcon","withGradient","big","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","defaultFolder","ALL_FOLDER_ID","displayedFolders","allFolderIndex","isInAllFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","classNames","previousActiveTab","tabRef","classList","tabEl","prevTabEl","parentElement","children","platformEl","prevPlatformEl","shiftLeft","offsetLeft","scaleFactor","clientWidth","remove","style","transform","forceReflow","renderText","SCROLL_DURATION","containerRef","usePrevious","useHorizontalScroll","container","scrollWidth","offsetWidth","scrollLeft","activeTabElement","childNodes","activeTabOffsetLeft","activeTabOffsetWidth","newLeft","abs","fastSmoothScrollHorizontal","tab","openMainView","ListItem","componentsUi","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectComponents","handleSelectContacts","handleSelectArchived","handleMouseEnter","handleMouseLeave","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","defaultCurrentTab","currentTab","setCurrentTab","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","TabBarList","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","leftColumnContent","sessionStorage","getItem","nextSettingsScreen","chatCreationProgress","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","ChatCreationProgress","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","isMenuOpen","setIsMenuOpen","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onClose","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","artist","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","pair_uid","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","isShown","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","noUserColors","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","isModalOpen","openModal","closeModal","isLottie","isVideo","hasEffect","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","isPlayingEffect","startPlayingEffect","stopPlayingEffect","shouldLoad","mediaHash","mediaHashEffect","previewMediaHash","previewUrl","getMessageMediaFormat","effectBlobUrl","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","handleEffectEnded","safePlay","actionText","autoPlay","playsInline","loop","muted","isLowPriority","fromSticker","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","soundId","selectAnimatedEmojiSound","forceLoadPreview","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","Audio","once","performance","interactionMessageId","useAnimatedEmoji","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","AnimatedIconFromSticker","noLoad","forcePreview","LIKE_STICKER_ID","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","useVideoAutoPause","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","requestConfetti","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","noVideo","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","videoClassName","renderIcon","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","animatedEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","memoFirstUnreadIdRef","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","isCurrentUserPremium","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useBackgroundMode","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","Menu","autoClose","positionX","positionY","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","fabClassName","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","isQuick","preloadImage","shouldShrink","resizedUrl","fetchBlob","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachMenuBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","peerTypes","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","isForCurrentMessageList","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","requestedText","attachMenuPeerType","selectAttachMenuPeerType","fileSizeLimit","FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","EDITABLE_INPUT_ID","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","prevTransitionKey","prevMainViewType","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","isMainViewReady","handleMainViewOpenEnd","handleMainViewSlideStop","useMainViewIsReady","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","contextActions","memberId","handler","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","IS_OPFS_SUPPORTED","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","BotAttachModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","buildStyle","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","currentUser","authState","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","botAttachRequestBot","isPremiumModalOpen","limitReached","isReceiptModalOpen","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","langCode","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}
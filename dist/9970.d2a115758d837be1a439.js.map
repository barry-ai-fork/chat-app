{"version":3,"file":"9970.d2a115758d837be1a439.js","mappings":"oNAyBA,MAqCA,GAAeA,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEC,GAAyB,EAClC,MAAMC,GAAOC,EAAAA,EAAAA,IAAkBH,GACzBI,EAAOH,IAAUI,EAAAA,EAAAA,IAAWL,EAAQC,GAG1C,MAAO,CACLC,KAAAA,EACAI,YAJkBF,GAAOG,EAAAA,EAAAA,IAAuBH,QAAQI,KAJ1CT,EArCiC,IAM/C,IANgD,OACpDU,EADoD,KAEpDP,EAFoD,OAGpDD,EAHoD,YAIpDK,EAJoD,QAKpDI,GACI,EACJ,MAAM,iBAAEC,IAAqBC,EAAAA,EAAAA,MAEvBC,GAAOC,EAAAA,EAAAA,KAEPC,GAAyBC,EAAAA,EAAAA,KAAY,KACzCL,EAAiB,CAAEM,OAAQf,EAAMgB,GAAIjB,OAAAA,IACrCS,MACC,CAACR,EAAMS,EAAkBD,EAAST,IAErC,GAAKC,GAASD,EAId,OACE,mBAAC,IAAD,CACEQ,OAAQA,EACRC,QAASA,EACTS,QAASJ,EACTK,UAAU,SACVC,MAAOR,EAAK,wBAEZ,6BAAIS,EAAAA,EAAAA,GAAWT,EAAK,8BAA+BP,KACnD,mBAAC,IAAD,CAAQiB,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASV,GACtEF,EAAK,mBAER,mBAAC,IAAD,CAAQO,UAAU,wBAAwBI,QAAM,EAACC,QAASf,GAAUG,EAAK,iB,sQCc/E,MAGMa,GAA8BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAM,GAC3DC,GAA8BC,EAAAA,EAAAA,KAAUF,GAAOA,KAAM,KAAK,GAAO,GAsgCvEG,eAAeC,EACbC,EAAiCC,EAAmBC,GACpD,UADyEC,EACzE,wDACIpC,GAASqC,EAAAA,EAAAA,MAEb,MAAMC,QAAeC,EAAAA,EAAAA,IAAQ,aAAc,CACzCC,MAAOC,EAAAA,GACPN,WAAAA,EACAO,SAAuB,aAAbT,EACVU,WAAYP,EACZQ,iBAAkB5C,EAAO4C,iBACzBC,wBAAuB,WAAEC,EAAAA,EAAAA,IAA8B9C,UAAhC,aAAE,EAAuC+C,UAGlE,IAAKT,EACH,OAGF,MAAM,QAAEU,GAAYV,EAQpB,GANIU,EAAQC,OAAS,GAAKD,EAAQ,KAAOd,GACvCc,EAAQE,QAGVlD,GAASqC,EAAAA,EAAAA,MAELD,GAA8B,WAAbH,EAAuB,CAC1C,MAAMkB,GAAchD,EAAAA,EAAAA,IAAkBH,GAChCoD,EAAeD,EAAc,CAACA,GAAe,GAE7CE,GAAeC,EAAAA,EAAAA,IAAmBtD,IAAW,GAC/CA,EAAOuD,eAAiBvD,EAAOwD,MAAMC,KAAKzD,EAAOuD,gBACnDF,EAAaK,KAAK1D,EAAOwD,MAAMC,KAAKzD,EAAOuD,gBAG7CvD,GAAS2D,EAAAA,EAAAA,IAAa3D,GAAQ4D,EAAAA,EAAAA,IAAqBP,EAAaQ,OAAOvB,EAAOkB,OAAQ,OACtFxD,GAAS8D,EAAAA,EAAAA,IAAoB9D,EAAQsC,EAAOyB,kBAC5C/D,GAASgE,EAAAA,EAAAA,IAAahE,GAAQ4D,EAAAA,EAAAA,IAAqBR,EAAaS,OAAOvB,EAAO2B,OAAQ,OACtFjE,GAASkE,EAAAA,EAAAA,IAAmBlE,EAAQiC,EAAUe,QACrCZ,GAA8B,aAAbH,GAC1BjC,GAASmE,EAAAA,EAAAA,IAASnE,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAOkB,MAAO,OAC7DxD,GAASoE,EAAAA,EAAAA,IAAgBpE,EAAQsC,EAAOyB,kBACxC/D,GAASqE,EAAAA,EAAAA,IAAYrE,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAO2B,MAAO,OAChEjE,GAASkE,EAAAA,EAAAA,IAAmBlE,EAAQiC,EAAUe,KAE9ChD,GAASmE,EAAAA,EAAAA,IAASnE,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAOkB,MAAO,OAC7DxD,GAASoE,EAAAA,EAAAA,IAAgBpE,EAAQsC,EAAOyB,kBACxC/D,GAASqE,EAAAA,EAAAA,IAAYrE,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAO2B,MAAO,OAChEjE,GAASsE,EAAAA,EAAAA,IAAkBtE,EAAQiC,EAAUe,IAG/ChD,GAASuE,EAAAA,EAAAA,IAA4BvE,EAAQiC,EAAUK,GAEvDkC,OAAOC,KAAKnC,EAAOoC,YAAYC,SAAS1D,IACtCjB,GAAS4E,EAAAA,EAAAA,IACP5E,EAAQiB,EAAQ4D,EAAAA,GAAgB,QAASvC,EAAOoC,WAAWzD,OAI/DuD,OAAOC,KAAKnC,EAAOwC,gBAAgBH,SAAS1D,IAC1CjB,GAAS4E,EAAAA,EAAAA,IACP5E,EAAQiB,EAAQ4D,EAAAA,GAAgB,eAAgBvC,EAAOwC,eAAe7D,OAInD,IAAnB+B,EAAQC,QAAiBjD,EAAOiE,MAAMc,cAAc9C,KACtDjC,EAAS,IACJA,EACHiE,MAAO,IACFjE,EAAOiE,MACVc,cAAe,IACV/E,EAAOiE,MAAMc,cAChB,CAAC9C,IAAW,OAMpB+C,EAAAA,EAAAA,IAAUhF,GAGL+B,eAAekD,EAAa/E,GACjC,MAAMoC,QAAeC,EAAAA,EAAAA,IAAQ,gBAAiBrC,GAC9C,IAAKoC,EACH,OAGF,MAAM,MACJkB,EADI,iBACGO,EADH,SACqBmB,EADrB,UAC+BC,EAD/B,aAC0CC,GAC5C9C,EAEJ,IAAItC,GAASqC,EAAAA,EAAAA,MASb,GARImB,IACFxD,GAASmE,EAAAA,EAAAA,IAASnE,GAAQ4D,EAAAA,EAAAA,IAAqBJ,EAAO,QAGpDO,IACF/D,GAASoE,EAAAA,EAAAA,IAAgBpE,EAAQ+D,IAG/BoB,EAAW,CACb,MAAME,GAAoBC,EAAAA,EAAAA,IAAgBtF,EAAQmF,EAAUjE,IAC5DlB,GAASuF,EAAAA,EAAAA,IACPvF,EACAmF,EAAUjE,IACVsE,EAAAA,EAAAA,IAAKL,EAAW,CAAC,yBACjB3E,EACA6E,OAAoB7E,EAAY2E,EAAUM,mBAI9CzF,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQE,EAAKgB,GAAI,CACnCgE,SAAAA,KACIE,GAAgB,CAAEA,aAAAA,MAGxBJ,EAAAA,EAAAA,IAAUhF,GAEV,MAAM2F,EAAaT,EAASS,WAS5B,OARIA,IACF/E,EAAAA,EAAAA,MAAagF,aAAa,CACxBC,aAAcF,EAAWzE,GACzB4E,qBAAsBH,EAAWI,WACjCC,oBAAqBL,EAAWM,YAI7B3D,EAyIFP,eAAemE,EAAYhG,GAChC,IAGE,aAFyBqC,EAAAA,EAAAA,IAAQ,cAAerC,GAGhD,MAAOiG,GAOP,YANoC,sBAA/BA,EAAmBpD,SACtBnC,EAAAA,EAAAA,MAAawF,sBAAsB,CAAE5D,MAAO,cAE5C5B,EAAAA,EAAAA,MAAayF,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,OAyEtExE,eAAeyE,EACpBC,GAEA,MAAMzG,GAASqC,EAAAA,EAAAA,MACTqE,GAAYC,EAAAA,EAAAA,IAAqB3G,EAAQyG,GAC/C,GAAIC,IAAcA,EAAUE,MAC1B,OAAOF,EAGT,MAAMxG,QAAaqC,EAAAA,EAAAA,IAAQ,oBAAqBkE,GAChD,OAAKvG,IAIL8E,EAAAA,EAAAA,KAAUU,EAAAA,EAAAA,KAAWrD,EAAAA,EAAAA,MAAanC,EAAKgB,GAAIhB,IAEpCA,QANP,EAsFF6B,eAAe8E,EACbC,EACA7F,EAAgB8F,EAAgBC,GAEhC,MAAMC,QAAgBT,EAAoBO,GAC1C,IAAKE,EAAS,OACd,MAAMC,GAAU7G,EAAAA,EAAAA,KAAWgC,EAAAA,EAAAA,MAAa4E,EAAQ/F,IAC3CgG,GAAYA,EAAQC,gBAKzBL,EAAQM,kBAAkB,CACxBC,MAAOH,EAAQhG,GACfD,OAAAA,KAC2B,iBAAhB+F,GAA4B,CAAEM,WAAYN,KAPrDF,EAAQS,iBAAiB,CAAExE,QAASyE,EAAAA,GAA4B,6CAt8CpEC,EAAAA,EAAAA,IAAiB,kBAAkB1F,MAAO/B,EAAQ8G,EAAQY,MACxD1C,EAAAA,EAAAA,IAAU,IACLhF,EACH2H,cAAc,IACT3H,EAAO2H,iBACPD,SAOTD,EAAAA,EAAAA,IAAiB,0BAA0B1F,MAAO/B,EAAQ8G,KACxD,MAAMc,EAAmB,IAAIC,IAE7B,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAAA,GAAiCD,IAAK,OAClDE,EAAAA,EAAAA,IAtBiC,KAwBvC,MAAQ/G,OAAQgH,IAAkBC,EAAAA,EAAAA,IAAyBlI,IAAW,GAChEmI,GAAsBC,EAAAA,EAAAA,IAAcC,EAAAA,IACpCC,EAAaH,MAAAA,OAAH,EAAGA,EAAqBI,MAAMrH,GAAOA,IAAO+G,IAAkBL,EAAiBY,IAAItH,KACnG,IAAKoH,EACH,OAGFV,EAAiBa,IAAIH,GAErBxB,EAAQ4B,qBAAqB,CAAEzH,OAAQqH,EAAYK,SAAU9D,EAAAA,UAIjE4C,EAAAA,EAAAA,IAAiB,YAAY,CAACzH,EAAQ8G,EAASY,KAAY,MACzD,MAAM,GAAExG,EAAF,SAAMyH,EAAW9D,EAAAA,IAAmB6C,EAC1C,IAAKxG,EACH,OAGF,MAAM,cAAEqC,GAAkBvD,EACpBE,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQkB,GAchC,GAZIhB,MAAAA,GAAAA,EAAM2I,eACR/B,EAAQgC,iBAAiB,CAAE5H,GAAAA,IAIzBhB,MAAAA,GAAJ,UAAIA,EAAM6I,mBAAV,OAAI,EAAmBC,YACrBlC,EAAQmC,wBAAwB,CAC9BhI,OAAQf,EAAK6I,YAAYC,WAAW/H,OACpC0H,SAAUzI,EAAK6I,YAAYC,WAAWL,WAIrCzI,GASMgJ,EAAAA,EAAAA,IAAkBhJ,KAAUA,EAAK0G,OAC1CE,EAAQqC,kBAAkB,CAAElI,OAAQC,SATpC,GAAIA,IAAOqC,GACJhB,EAAAA,EAAAA,IAAQ,YAAa,CAAE6G,KAAM,aAC7B,CACL,MAAMhJ,GAAOC,EAAAA,EAAAA,IAAWL,EAAQkB,GAC5Bd,IACGmC,EAAAA,EAAAA,IAAQ,YAAa,CAAE6G,KAAM,OAAQhJ,KAAAA,IAO5CuI,IAAa9D,EAAAA,MACMwE,EAAAA,EAAAA,IAAyBrJ,EAAQkB,EAAIyH,IAExD7B,EAAQmC,wBAAwB,CAAEhI,OAAQC,EAAIyH,SAAAA,SAKpDlB,EAAAA,EAAAA,IAAiB,kBAAkB1F,MAAO/B,EAAQ8G,EAASY,KAAY,MACrE,MAAM,GAAExG,GAAOwG,EACTxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQkB,GAChC,IAAKhB,EACH,OAGF,MAAMoJ,QAAqB/G,EAAAA,EAAAA,IAAQ,gBAAiBrC,GAEhDoJ,MAAAA,GAAJ,UAAIA,EAAcpE,gBAAlB,OAAI,EAAwBqE,cAC1BzC,EAAQ0C,SAAS,CAAEtI,GAAIoI,EAAapE,SAASqE,mBAIjD9B,EAAAA,EAAAA,IAAiB,0BAA0B1F,MAAO/B,EAAQ8G,EAASY,KACjE,MAAM,OAAEzG,EAAF,SAAU0H,EAAV,UAAoBc,GAAc/B,EAClCxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,SAIgBqC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAErC,KAAAA,EAAMyI,SAAAA,KAKhE7B,EAAQ4C,aAAa,CAAEzI,OAAAA,EAAQ0H,SAAAA,EAAUc,UAAAA,QAG3ChC,EAAAA,EAAAA,IAAiB,mBAAmB1F,MAAO/B,EAAQ8G,KACjD,MAAM5G,GAAOyJ,EAAAA,EAAAA,IAAkB3J,GAC/B,GAAIE,EAEF,YADA4G,EAAQ0C,SAAS,CAAEtI,GAAIhB,EAAKgB,GAAI0I,sBAAsB,IAIxD9C,EAAQ0C,SAAS,CAAEtI,GAAI2I,EAAAA,GAAaD,sBAAsB,IAE1D,MAAMtH,QAAeC,EAAAA,EAAAA,IAAQ,YAAa,CAAE6G,KAAM,YAC9C9G,GACFwE,EAAQ0C,SAAS,CAAEtI,GAAIoB,EAAOrB,OAAQ2I,sBAAsB,QAIhEnC,EAAAA,EAAAA,IAAiB,gBAAgB1F,MAAO/B,EAAQ8G,EAASY,KACvD,MAAMzF,EAAWyF,EAAQzF,UACnB,UAAE6H,GAAcpC,EACtB,IAAI,cAAEtF,GAAkBsF,EACpBI,EAAI,EAER,KAAO1F,KAAkBC,EAAAA,EAAAA,MAAY4B,MAAMc,cAAc9C,IAAW,CAClE,GAAI6F,KAjIqB,IAuIvB,YALIiC,EAAAA,IAEFC,QAAQ7D,MAAM,mDAQlB,GAA+B,0BAF/BnG,GAASqC,EAAAA,EAAAA,OAEE4H,iBAAmE,4BAArBjK,EAAOkK,UAC9D,OAGF,MAAMC,GAAW/H,GAAiBpC,EAAOiE,MAAMkG,QAAQlI,GACjDmI,EAAaD,EACfA,EAECE,KAAKnJ,GAAOlB,EAAOiE,MAAMR,KAAKvC,KAC9BoJ,QAAQpK,GAASqK,QAAQrK,MAAAA,OAAD,EAACA,EAAM6I,gBAAiByB,EAAAA,EAAAA,IAAmBxK,EAAQE,EAAKgB,MAEhFuJ,MAAK,CAACC,EAAOC,IAAWD,EAAM3B,YAAa6B,KAAOD,EAAM5B,YAAa6B,OAAO,QAC7EpK,QAEEwB,EAAUC,EAAUmI,MAAAA,OAAX,EAAWA,EAAYlJ,GAAIkJ,MAAAA,OAA3B,EAA2BA,EAAYrB,YAAa6B,KAAMxI,GAErEA,IACF0H,MAAAA,GAAAA,IACA1H,GAAgB,QAKtBqF,EAAAA,EAAAA,IAAiB,gBAAgB,CAACzH,EAAQ8G,EAASY,KACjD,MAAM,OAAEzG,EAAF,MAAU4J,GAAUnD,EACpBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,IAID2K,EACF5F,EAAa/E,GAEb2B,GAA4B,IAAMoD,EAAa/E,UAInDuH,EAAAA,EAAAA,IAAiB,gBAAgB,KAC/B/F,GAA4B,IAAMM,EAAU,gBAG9CyF,EAAAA,EAAAA,IAAiB,qBAAqB,CAACzH,EAAQ8G,EAASY,KAAY,MAClE,MAAM,iBAAE9E,GAAqB5C,GACvB,OAAEiB,GAAWyG,EACbxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,IAIAqC,EAAAA,EAAAA,IAAQ,oBAAqB,CAChCrC,KAAAA,EACA0C,iBAAAA,KACI3B,IAAW6J,EAAAA,IAAiC,CAC9CC,iBAAgB,WAAEjI,EAAAA,EAAAA,IAA8B9C,UAAhC,aAAE,EAAuC+C,eAK/D0E,EAAAA,EAAAA,IAAiB,wBAAwB,CAACzH,EAAQ8G,EAASY,KACzD,MAAM,iBAAE9E,GAAqB5C,GACvB,OAAEiB,EAAF,QAAU+J,GAAYtD,EACtBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,KAIL8E,EAAAA,EAAAA,KAAUU,EAAAA,EAAAA,IAAW1F,EAAQiB,EAAQ,CAAE+J,QAAAA,MAClCzI,EAAAA,EAAAA,IAAQ,uBAAwB,CAAErC,KAAAA,EAAM8K,QAAAA,EAASpI,iBAAAA,SAGxD6E,EAAAA,EAAAA,IAAiB,iBAAiB,CAACzH,EAAQ8G,EAASY,KAClD,MAAM,MACJrG,EADI,MACG4J,EADH,MACUC,EADV,UACiBC,GACnBzD,GAs7BN3F,eAA6BV,EAAemC,EAAkByH,EAAgBC,IAC5ElG,EAAAA,EAAAA,IAAU,KACL3C,EAAAA,EAAAA,MACH+I,aAAc,CACZC,SAAUC,EAAAA,GAAAA,cAKd,MAAMC,EAAYC,EAAAA,EAAAA,sBAClB,IACE,MAAM,MAACrF,EAAD,MAAOsF,SAAeC,EAAAA,GAAAA,YAAoBH,GAAWI,YACzDnI,EAAM6G,KAAIjK,GAAMwL,SAASxL,EAAKc,MAC9B2K,EAAAA,GAAAA,iBACAxK,EACA4J,EACA,IAEF,GAAG9E,GAAS2F,EAAAA,GAAAA,SAAa,CACvB,MAAM9L,GAASqC,EAAAA,EAAAA,OACf2C,EAAAA,EAAAA,IAAU,IACLhF,EACHoL,aAAc,CACZC,SAAUC,EAAAA,GAAAA,UAGd1K,EAAAA,EAAAA,MAAayF,WAAW,CAAEC,KAAM,CAC5BvD,QAAS,qBACTgJ,YAAY,EACZxF,aAAa,SAGd,CACaiF,EAAAA,EAAAA,YAA8BD,GACtCS,WAAW,CAACP,IACpB,MAAQQ,SAAUC,GAAcT,EAChC,IAAIzL,GAASqC,EAAAA,EAAAA,OACb2C,EAAAA,EAAAA,IAAU,KACLmH,EAAAA,EAAAA,IAAkBnM,EAAOuL,GAC5BH,aAAc,IACTpL,EAAOoL,aACVC,SAAUC,EAAAA,GAAAA,aAGd1K,EAAAA,EAAAA,MAAa4I,SAAS,CAAEtI,GAAIgL,EAAUE,WAAYxC,sBAAsB,KAE1E,MAAOzD,GACP,MAAMnG,GAASqC,EAAAA,EAAAA,OAEf2C,EAAAA,EAAAA,IAAU,IACLhF,EACHoL,aAAc,CACZC,SAAUC,EAAAA,GAAAA,SAIsB,sBAA/BnF,EAAmBpD,SACtBnC,EAAAA,EAAAA,MAAawF,sBAAsB,CAAE5D,MAAO,cAE5C5B,EAAAA,EAAAA,MAAayF,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,MA3+BtE8F,CAAchL,EAJF8J,EACdd,KAAKnJ,IAAOb,EAAAA,EAAAA,IAAWL,EAAQkB,KAC/BoJ,OAAgBC,SAEgBU,OAGrCxD,EAAAA,EAAAA,IAAiB,eAAe,CAACzH,EAAQ8G,EAASY,KAChD,MAAM,OAAEzG,GAAWyG,EACbxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAChC,IAAKf,EACH,OAGF,MAAQgB,GAAIgL,EAAN,WAAiBnG,GAAe7F,EAEhCgM,GAAanG,GAq+BrBhE,eAA2BmK,EAAmBnG,GAC5C,UACQxD,EAAAA,EAAAA,IAAQ,cAAe,CAAE2J,UAAAA,EAAWnG,WAAAA,IAC1C,MAAOI,GAC6B,sBAA/BA,EAAmBpD,SACtBnC,EAAAA,EAAAA,MAAawF,sBAAsB,CAAE5D,MAAO,cAE5C5B,EAAAA,EAAAA,MAAayF,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,MAx+BtE+F,CAAYJ,EAAWnG,OAG9B0B,EAAAA,EAAAA,IAAiB,kBAAkB,CAACzH,EAAQ8G,EAASY,KAAY,MAC/D,MAAM,OAAEzG,EAAF,OAAUhB,GAA+CyH,EACzDxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC1Bb,GAAOC,EAAAA,EAAAA,IAAWL,EAAQC,GAC3BC,GAASE,IAIdJ,GAASuM,EAAAA,EAAAA,IAAUvM,EAAQiB,IAC3B+D,EAAAA,EAAAA,IAAUhF,IAEN,WAAAkI,EAAAA,EAAAA,IAAyBlI,UAAzB,eAAkCiB,UAAWA,GAC/C6F,EAAQ0C,SAAS,CAAEtI,QAAIV,KAGpB+B,EAAAA,EAAAA,IAAQ,iBAAkB,CAAErC,KAAAA,EAAME,KAAAA,SAGzCqH,EAAAA,EAAAA,IAAiB,cAAc,CAACzH,EAAQ8G,EAASY,KAAY,MAC3D,MAAM,OAAEzG,GAA+ByG,EACjCxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,IAILF,GAASuM,EAAAA,EAAAA,IAAUvM,EAAQiB,IAC3B+D,EAAAA,EAAAA,IAAUhF,IAEN,WAAAkI,EAAAA,EAAAA,IAAyBlI,UAAzB,eAAkCiB,UAAWA,GAC/C6F,EAAQ0C,SAAS,CAAEtI,QAAIV,KAGpB+B,EAAAA,EAAAA,IAAQ,aAAc,CAAEtB,OAAQf,EAAKgB,UAG5CuG,EAAAA,EAAAA,IAAiB,gBAAgB,CAACzH,EAAQ8G,EAASY,KAAY,MAC7D,MAAM,OAAEzG,GAAWyG,EACbxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAChC,IAAKf,EACH,OAGFF,GAASuM,EAAAA,EAAAA,IAAUvM,EAAQiB,IAC3B+D,EAAAA,EAAAA,IAAUhF,IAEN,WAAAkI,EAAAA,EAAAA,IAAyBlI,UAAzB,eAAkCiB,UAAWA,GAC/C6F,EAAQ0C,SAAS,CAAEtI,QAAIV,IAGzB,MAAQU,GAAIgL,EAAN,WAAiBnG,GAAe7F,EAClCgM,GAAanG,IACVxD,EAAAA,EAAAA,IAAQ,eAAgB,CAAE2J,UAAAA,EAAWnG,WAAAA,QAI9C0B,EAAAA,EAAAA,IAAiB,iBAAiB,CAACzH,EAAQ8G,EAASY,KAAY,MAC9D,MAAM,OAAEzG,GAAWyG,EACbxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAChC,IAAKf,EACH,OAGFF,GAASuM,EAAAA,EAAAA,IAAUvM,EAAQiB,IAC3B+D,EAAAA,EAAAA,IAAUhF,IAEN,WAAAkI,EAAAA,EAAAA,IAAyBlI,UAAzB,eAAkCiB,UAAWA,GAC/C6F,EAAQ0C,SAAS,CAAEtI,QAAIV,IAGzB,MAAQU,GAAIgL,EAAN,WAAiBnG,GAAe7F,EAClCgM,GAAanG,IACVxD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE2J,UAAAA,EAAWnG,WAAAA,QAI/C0B,EAAAA,EAAAA,IAAiB,mBAAmB,CAACzH,EAAQ8G,EAASY,KACpD,MAAM,MAAErG,EAAF,UAAS8J,EAAT,MAAoBD,GAAUxD,GA85BtC3F,eAA+BV,EAAemC,EAAkB0H,IAC9DlG,EAAAA,EAAAA,IAAU,KACL3C,EAAAA,EAAAA,MACH+I,aAAc,CACZC,SAAUC,EAAAA,GAAAA,cAId,IACE,MAAMkB,QAAoBjK,EAAAA,EAAAA,IAAQ,kBAAmB,CACnDlB,MAAAA,EACAmC,MAAAA,IAGF,IAAKgJ,EACH,OAGF,MAAQtL,GAAID,GAAWuL,EAEvB,IAAIxM,GAASqC,EAAAA,EAAAA,MACbrC,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQiB,EAAQuL,GACpCxM,EAAS,IACJA,EACHoL,aAAc,IACTpL,EAAOoL,aACVC,SAAUmB,EAAclB,EAAAA,GAAAA,SAAgCA,EAAAA,GAAAA,SAG5DtG,EAAAA,EAAAA,IAAUhF,IACVY,EAAAA,EAAAA,MACG4I,SAAS,CACRtI,GAAID,EACJ2I,sBAAsB,IAGtB3I,GAAUiK,SACN3I,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BtB,OAAAA,EACAiK,MAAAA,IAGJ,MAAOuB,GACP,GAAkB,kBAAdA,EAAE1J,QAA6B,CACjC,MAAM/C,GAASqC,EAAAA,EAAAA,OACf2C,EAAAA,EAAAA,IAAU,IACLhF,EACHoL,aAAc,IACTpL,EAAOoL,aACVC,SAAUC,EAAAA,GAAAA,MACVnF,MAAO,wBA38BVuG,CAAgBrL,EAJJ8J,EACdd,KAAKnJ,IAAOb,EAAAA,EAAAA,IAAWL,EAAQkB,KAC/BoJ,OAAgBC,SAEkBW,OAGvCzD,EAAAA,EAAAA,IAAiB,oBAAoB,CAACzH,EAAQ8G,EAASY,KACrD,MAAM,GAAExG,EAAF,SAAMyL,GAAajF,EACnBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQkB,GAChC,IAAKhB,EACH,OAGF,MAAMsC,GAAQoK,EAAAA,EAAAA,GAAmB5M,EAAQ,sBAEzC,GAAI2M,EAAU,CACZ,MAAME,GAASC,EAAAA,EAAAA,IAAiB9M,EAAQ2M,GACxC,GAAIE,EAAQ,CACV,MAAME,IAAkBvC,EAAAA,EAAAA,IAAmBxK,EAAQkB,EAAIyL,IAEjD,cAAEK,EAAF,gBAAiBC,GAAoBJ,EACrCK,EAAeH,EACjB,CAAC7L,KAAQ8L,GAAiB,KACzBA,GAAiB,IAAI1C,QAAQ6C,GAAaA,IAAajM,IAGtDkM,EAAqB,CAAClM,KAAO+L,IAE9B1K,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BrB,GAAIyL,EACJU,aAAc,IACTR,EACHG,cAAeE,EACfD,gBAAiBG,UAIlB,CACL,MAAMnL,GAAWqL,EAAAA,EAAAA,IAAmBtN,EAAQkB,GACtCqM,GAAW/C,EAAAA,EAAAA,IAAmBxK,EAAQkB,EAAiB,aAAbe,EAA0BuL,EAAAA,QAAqBhN,GAEzFiN,EAAMzN,EAAOiE,MAAMyJ,iBAA8B,aAAbzL,EAA0B,WAAa,UACjF,KAAKwL,MAAAA,OAAA,EAAAA,EAAKxK,SAAU,IAAMT,IAAU+K,EAIlC,YAHAzG,EAAQV,sBAAsB,CAC5B5D,MAAO,wBAIND,EAAAA,EAAAA,IAAQ,mBAAoB,CAAErC,KAAAA,EAAM6M,gBAAiBQ,SAI9D9F,EAAAA,EAAAA,IAAiB,sBAAsB,CAACzH,EAAQ8G,EAASY,KACvD,MAAM,GAAExG,GAAOwG,EACTxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQkB,GAC5BhB,IACGqC,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCrC,KAAAA,EACAyM,UAAUgB,EAAAA,EAAAA,IAAezN,GAAQ,EAAIsN,EAAAA,SAK3C/F,EAAAA,EAAAA,IAAiB,mBAAmB,MAs6BpC1F,iBACE,MAAM6L,QAAoBrL,EAAAA,EAAAA,IAAQ,oBAElC,GAAIqL,EAAa,CACf,MAAM5N,GAASqC,EAAAA,EAAAA,OAEf2C,EAAAA,EAAAA,IAAU,IACLhF,EACH4N,YAAa,IACR5N,EAAO4N,eACPA,MA/6BJC,OAGPpG,EAAAA,EAAAA,IAAiB,8BAA8B,MAk7B/C1F,iBACE,MAAM+L,QAA+BvL,EAAAA,EAAAA,IAAQ,+BAE7C,GAAIuL,EAAwB,CAC1B,MAAM9N,GAASqC,EAAAA,EAAAA,OAEf2C,EAAAA,EAAAA,IAAU,IACLhF,EACH4N,YAAa,IACR5N,EAAO4N,YACVG,YAAaD,MA37BdE,OAGPvG,EAAAA,EAAAA,IAAiB,mBAAmB,CAACzH,EAAQ8G,EAASY,KACpD,MAAM,OAAEzG,EAAF,YAAUgN,EAAV,SAAuBC,GAAaxG,EACpClF,GAAQoK,EAAAA,EAAAA,GAAmB5M,EAAQ,sBAEjBkO,EACrBC,MAAMjN,IAAO4L,EAAAA,EAAAA,IAAiB9M,EAAQkB,GAAK+L,gBAAgBhK,QAAUT,IAEtEsE,EAAQV,sBAAsB,CAAE5D,MAAO,wBAIxCyL,EAAyBtJ,SAAQ5C,MAAAA,IAChC,MAAM8K,GAASC,EAAAA,EAAAA,IAAiB9M,EAAQkB,GAC5B,MAAR2L,SACItK,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BrB,GAAAA,EACAmM,aAAc,IACTR,EACHG,cAAa,UAAEH,EAAOG,qBAAT,aAAE,EAAsB1C,QAAQ6C,GAAaA,IAAalM,IACvEgM,gBAAiBJ,EAAOI,gBAAgB3C,QAAQ8D,GAAeA,IAAenN,UAMrFiN,EAAsBvJ,SAAQ5C,MAAAA,IAC7B,MAAM8K,GAASC,EAAAA,EAAAA,IAAiB9M,EAAQkB,GACpC2L,SACItK,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BrB,GAAAA,EACAmM,aAAc,IACTR,EACHI,gBAAiBJ,EAAOI,gBAAgBpJ,OAAO5C,cAOzDwG,EAAAA,EAAAA,IAAiB,kBAAkB,CAACzH,EAAQ8G,EAASY,KACnD,MAAM,GAAExG,EAAF,aAAMmM,GAAiB3F,EACvBmF,GAASC,EAAAA,EAAAA,IAAiB9M,EAAQkB,GAEpC2L,IACGtK,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BrB,GAAAA,EACAmM,aAAc,CACZnM,GAAAA,EACAmN,SAAUxB,EAAOwB,SACjBrB,cAAeH,EAAOG,iBACnBK,SAMX5F,EAAAA,EAAAA,IAAiB,iBAAiB,CAACzH,EAAQ8G,EAASY,KAClD,MAAM,OAAEmF,GAAWnF,GACb,WAAE4G,EAAF,KAAc7K,GAASzD,EAAO4N,YAE9BpL,GAAQoK,EAAAA,EAAAA,GAAmB5M,EAAQ,iBACrCwE,OAAOC,KAAKhB,GAAMR,QAAUT,EAC9BsE,EAAQV,sBAAsB,CAC5B5D,MAAO,kBA+3BbT,eAAgC8K,EAAuB0B,GAErD,MAAQrN,GAAIsN,EAAN,YAAqBC,KAAgBC,GAAc7B,EAUzD,SARMtK,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BrB,GAAIqN,EAAQ,EACZlB,aAAc,CACZnM,GAAIqN,EAAQ,KACTG,MAIFD,EACH,OAGF,MAAMzO,GAASqC,EAAAA,EAAAA,OACT,YAAE0L,GAAgB/N,EAAO4N,YAE3BG,IACF/I,EAAAA,EAAAA,IAAU,IACLhF,EACH4N,YAAa,IACR5N,EAAO4N,YACVG,YAAaA,EAAYzD,QAAO,QAAC,GAAEpJ,GAAH,SAAYA,IAAOsN,QAh5BpDG,CAAiB9B,EAFR+B,KAAKC,OAAQP,GAAc,GAAKd,EAAAA,SAKhD/F,EAAAA,EAAAA,IAAiB,oBAAoB,CAACzH,EAAQ8G,EAASY,KACrD,MAAM,GAAExG,GAAOwG,GACAoF,EAAAA,EAAAA,IAAiB9M,EAAQkB,IAi5B1Ca,eAAgCb,SACxBqB,EAAAA,EAAAA,IAAQ,mBAAoBrB,GA/4B3B4N,CAAiB5N,OAI1BuG,EAAAA,EAAAA,IAAiB,oBAAoB,CAACzH,EAAQ8G,EAASY,KACrD,MAAM,GAAExG,GAAOwG,GACT,iBAAE9E,GAAqB5C,EACvBE,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQkB,GAC5BhB,IACEA,EAAK6O,aACFxM,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEK,iBAAAA,EAAkB1C,KAAAA,EAAMyI,SAAU9D,EAAAA,MAEnEtC,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCrC,KAAAA,EACA2I,eAAgB3I,EAAK2I,qBAM7BpB,EAAAA,EAAAA,IAAiB,oBAAoB1F,MAAO/B,EAAQ8G,EAASY,KAC3D,MAAM,KAAEsH,GAAStH,EAEXpF,QAAeC,EAAAA,EAAAA,IAAQ,mBAAoByM,GAC5C1M,GAILwE,EAAQ0C,SAAS,CAAEtI,GAAIoB,EAAOrB,aAGhCwG,EAAAA,EAAAA,IAAiB,yBAAyB1F,MAAO/B,EAAQ8G,EAASY,KAChE,MAAM,YAAEuH,EAAF,YAAejI,EAAf,OAA4BD,GAAWW,EAG7CZ,EAAQ0C,SAAS,CAAEtI,GAAI2I,EAAAA,KAEvB,MAAM3J,QAg4BD6B,eAAsCkN,GAC3C,MAAMjP,GAASqC,EAAAA,EAAAA,MACT6M,GAAYC,EAAAA,EAAAA,IAAwBnP,EAAQiP,GAClD,GAAIC,IAAcA,EAAUtI,MAC1B,OAAOgC,EAAAA,EAAAA,IAAW5I,EAAQkP,EAAUhO,IAGtC,MAAMhB,QAAaqC,EAAAA,EAAAA,IAAQ,uBAAwB0M,GACnD,OAAK/O,IAIL8E,EAAAA,EAAAA,KAAUU,EAAAA,EAAAA,KAAWrD,EAAAA,EAAAA,MAAanC,EAAKgB,GAAIhB,IAEpCA,QANP,EAx4BmBkP,CAAuBH,GAC1C,IAAK/O,EAKH,OAJA4G,EAAQuI,wBACRvI,EAAQS,iBAAiB,CACvBxE,QAASyE,EAAAA,GAA4B,mCAAmC8H,QAAQ,UAAWL,KAK/FnI,EAAQ0C,SAAS,CAAEtI,GAAIhB,EAAKgB,KAExB6F,GACFF,EAAuBC,EAAS5G,EAAKgB,GAAI6F,EAAQC,OAIrDS,EAAAA,EAAAA,IAAiB,oBAAoB,CAACzH,EAAQ8G,EAASY,KACrD,MAAM,IAAE6H,GAAQ7H,EAChB,GAAI6H,EAAIC,MAAMC,EAAAA,IAEZ,YADAC,EAAAA,EAAAA,GAAgBH,EAAIC,MAAMC,EAAAA,IAAY,IAIxC,MAAME,EAAM,IAAIC,IAAIL,EAAIM,WAAW,QAAUN,EAAO,WAAUA,MACvDO,EAAOC,EAAOC,GAASL,EAAIM,SAASC,MAAM,KAAK5F,OAAOC,SAASF,KAAK8F,GAAMC,UAAUD,KACrFE,EAAS7L,OAAO8L,YAAYX,EAAIY,cAEtC,IAAIvB,EACU,aAAVc,IACFd,EAAOe,GAGT,MAAM/I,KAAcqJ,EAAOG,eAAe,gBAAmBH,EAAOI,cAAqBJ,EAAOI,YAEhG,GAAIX,EAAMN,MAAM,qBAMd,YALA1I,EAAQ4J,sBAAsB,CAC5BzB,YAAaa,EAAMa,OAAO,EAAGb,EAAM7M,OAAS,GAC5C+D,YAAAA,EACAD,OAAQsJ,EAAOtJ,SASnB,IAJI+I,EAAMD,WAAW,MAAQC,EAAMD,WAAW,QAC5Cb,EAAOc,EAAMa,OAAO,EAAGb,EAAM7M,OAAS,IAGpC+L,EAEF,YADAlI,EAAQ8J,iBAAiB,CAAE5B,KAAAA,IAI7B,GAAc,gBAAVc,EAIF,YAHAhJ,EAAQ+J,wBAAwB,CAC9B7K,oBAAqB+J,IAKzB,MAAMe,EAAsBf,QAASvP,EAC/BiJ,EAAYuG,EAAQe,OAAOf,QAASxP,EACpCwQ,EAAYX,EAAOY,QAAUF,OAAOV,EAAOY,cAAWzQ,EAE5D,GAAI6P,EAAOG,eAAe,cAAgBH,EAAOG,eAAe,cAC9D1J,EAAQoK,oBAAoB,CAC1BzK,SAAUqJ,EACVqB,WAAYd,EAAOe,WAAaf,EAAOgB,kBAEpC,GAAc,MAAVvB,GAAiBgB,GAAuBrH,EAAW,CAC5D,MAAMxI,EAAU,IAAG6P,IAEnB,KADalI,EAAAA,EAAAA,IAAW5I,EAAQiB,GAG9B,YADA6F,EAAQS,iBAAiB,CAAExE,QAAS,wBAItC+D,EAAQ4C,aAAa,CACnBzI,OAAAA,EACAwI,UAAAA,QAEiB,YAAVqG,EACThJ,EAAQwK,YAAY,CAClBC,KAAMxB,IAGRjJ,EAAQ0K,mBAAmB,CACzB/K,SAAUqJ,EACVrG,UAAWA,GAAasH,OAAOD,GAC/BE,UAAAA,EACA1J,WAAY+I,EAAOoB,MACnBzK,YAAAA,EACAD,OAAQsJ,EAAOtJ,aAKrBU,EAAAA,EAAAA,IAAiB,4BAA4B1F,MAAO/B,EAAQ8G,EAASY,KACnE,MAAM,KAAEsH,GAAStH,EACXpF,QAAeC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEyM,KAAAA,IAC9C1M,GAILwE,EAAQ0C,SAAS,CAAEtI,GAAIoB,EAAOpB,SAGhCuG,EAAAA,EAAAA,IAAiB,sBAAsB1F,MAAO/B,EAAQ8G,EAASY,KAC7D,MAAM,SACJjB,EADI,UACMgD,EADN,UACiBuH,EADjB,WAC4B1J,EAD5B,YACwCN,EADxC,OACqDD,GACvDW,EAEExH,GAAOC,EAAAA,EAAAA,IAAkBH,GAE/B,IAAKgR,EACH,OAAI9Q,GAAQA,EAAKuG,WAAaA,GAAaO,GAAgBM,aA+xB/DvF,eACE+E,EACAL,EACAiL,EACApK,EACAN,EACAD,GAGA,GAAIC,IAAgBD,EAAQ,CAC1B,MAAM7G,QAAasG,EAAoBC,GAEvC,IAAKvG,EAAM,OACX,MAAMF,GAASqC,EAAAA,EAAAA,MACTjC,GAAOC,EAAAA,EAAAA,IAAWL,EAAQE,EAAKgB,IAErC,IAAKd,EAAM,OAEX,KADcuR,EAAAA,EAAAA,IAAUvR,KACTA,EAAK+G,gBAElB,YADAL,EAAQS,iBAAiB,CAAExE,QAASyE,EAAAA,GAA4B,4CAIlE,MAAMrE,GAAchD,EAAAA,EAAAA,IAAkBH,GAEtC,IAAKmD,EAAa,OAOlB,YALA2D,EAAQM,kBAAkB,CACxBC,MAAOjH,EAAKc,GACZD,OAAQkC,EAAYjC,MACO,iBAAhB8F,GAA4B,CAAEM,WAAYN,KAMzDF,EAAQ0C,SAAS,CAAEtI,GAAI2I,EAAAA,KAEvB,MAAM3J,QAAasG,EAAoBC,GAEvC,IAAKvG,EAGH,OAFA4G,EAAQuI,wBACRvI,EAAQS,iBAAiB,CAAExE,QAAS,wBAIlC2O,EACF5K,EAAQ4C,aAAa,CAAEzI,OAAQf,EAAKgB,GAAIuI,UAAWiI,IAEnD5K,EAAQ0C,SAAS,CAAEtI,GAAIhB,EAAKgB,KAE1BoG,GACFR,EAAQ8K,SAAS,CAAEvK,MAAOnH,EAAKgB,GAAI2Q,MAAOvK,IAGxCP,GACFF,EAAuBC,EAAS5G,EAAKgB,GAAI6F,EAAQC,GAn1B3CwK,CAAmB1K,EAASL,EAAUgD,EAAWnC,EAAYN,EAAaD,QAH9ED,EAAQ4C,aAAa,CAAEzI,OAAQf,EAAKgB,GAAIuI,UAAAA,IAO5C,MAAM,OAAExI,EAAF,KAAUmI,IAASlB,EAAAA,EAAAA,IAAyBlI,IAAW,GACvD8R,GAAenL,EAAAA,EAAAA,IAAqB3G,EAAQyG,GAClD,GAAIxF,GAAU6Q,GAAyB,WAAT1I,EAAmB,CAC/C,MAAMJ,GAAa+I,EAAAA,EAAAA,IAAiB/R,EAAQiB,EAAQwI,GAEpD,GAAIT,GAAcA,EAAW/H,SAAWA,EAMtC,YALA6F,EAAQ4C,aAAa,CACnBzI,OAAQ+H,EAAW/H,OACnB0H,SAAUK,EAAWL,SACrBc,UAAWuH,IAMZvH,GAu1BP1H,eACE+E,EACAL,EACAgD,EACAuH,GAEAlK,EAAQ0C,SAAS,CAAEtI,GAAI2I,EAAAA,KAEvB,MAAM3J,QAAasG,EAAoBC,GAEvC,IAAKvG,EAAM,OAEX,MAAMF,GAASqC,EAAAA,EAAAA,MAET2G,GAAa+I,EAAAA,EAAAA,IAAiB/R,EAAQE,EAAKgB,GAAIuI,GACrD,IAAIuI,EAEJ,GAAKhJ,EAMHgJ,EAAmBhJ,EAAW/H,WANf,CACf,MAAMqB,QAAeC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAErC,KAAAA,EAAMyI,SAAUc,IAC1E,IAAKnH,EAAQ,OAEb0P,EAAmB1P,EAAO0P,iBAKvBA,GAELlL,EAAQ4C,aAAa,CACnBzI,OAAQ+Q,EACRrJ,SAAUc,EACVA,UAAWsH,OAAOC,KAp3BfiB,CAAuBnL,EAASL,EAAUgD,EAAWuH,OAG5DvJ,EAAAA,EAAAA,IAAiB,0BAA0B1F,MAAO/B,EAAQ8G,EAASY,KACjE,MAAM,OAAEzG,EAAF,UAAUiR,GAAcxK,EAE9B,IAAIxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC9B,GAAKf,EAAL,CAIA,IAAIiS,EAAAA,EAAAA,IAAiBjS,GAAO,CAG1B,GAFAA,QAAagG,EAAYhG,IAEpBA,EACH,OAGF4G,EAAQ0C,SAAS,CAAEtI,GAAIhB,EAAKgB,MAGzBqB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAErC,KAAAA,EAAMgS,UAAAA,SAGjDzK,EAAAA,EAAAA,IAAiB,iCAAiC,CAACzH,EAAQ8G,EAASY,KAClE,MAAM,OAAEzG,EAAF,aAAUmR,GAAiB1K,EAC3BxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAE3Bf,IAIAqC,EAAAA,EAAAA,IAAQ,gCAAiC,CAAErC,KAAAA,EAAMkS,aAAAA,QAGxD3K,EAAAA,EAAAA,IAAiB,gCAAgC1F,MAAO/B,EAAQ8G,EAASY,KACvE,MAAM,OAAEzG,EAAF,OAAUhB,EAAV,aAAkBmS,GAAiB1K,EACzC,IAAIxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC9B,MAAMb,GAAOC,EAAAA,EAAAA,IAAWL,EAAQC,GAEhC,IAAKC,IAASE,EACZ,OAGF,IAAI+R,EAAAA,EAAAA,IAAiBjS,GAAO,CAG1B,GAFAA,QAAagG,EAAYhG,IAEpBA,EACH,OAGF4G,EAAQ0C,SAAS,CAAEtI,GAAIhB,EAAKgB,WAGxBqB,EAAAA,EAAAA,IAAQ,+BAAgC,CAAErC,KAAAA,EAAME,KAAAA,EAAMgS,aAAAA,IAE5DpS,GAASqC,EAAAA,EAAAA,MAET,MAAMgQ,GAAkBzJ,EAAAA,EAAAA,IAAW5I,EAAQiB,GAE3C,IAAKoR,IAAoBA,EAAgBnN,SACvC,OAGF,MAAM,QAAEoN,EAAF,cAAWC,GAAkBF,EAAgBnN,SAE7CsN,EAAWjI,QAAQ6H,EAAaK,cAChCC,GAAelO,OAAOC,KAAK2N,GAAcnP,QAE/C+B,EAAAA,EAAAA,KAAUU,EAAAA,EAAAA,IAAW1F,EAAQiB,EAAQ,CACnCiE,SAAU,IACLmN,EAAgBnN,YACfoN,GAAWE,GAAY,CACzBF,QAASA,EAAQhI,QAAQqI,GAAMA,EAAE1S,SAAWA,QAE1CqS,IAAYE,GAAY,CAC1BF,QAASA,EAAQjI,KAAKsI,GACpBA,EAAE1S,SAAWA,EACT,IAAK0S,EAAGP,aAAAA,GACRO,QAGJD,GAAeH,GAAiB,CAClCA,cAAeA,EAAcjI,QAAQqI,GAAMA,EAAE1S,SAAWA,aAMhEwH,EAAAA,EAAAA,IAAiB,mBAAmB1F,MAAO/B,EAAQ8G,EAASY,KAC1D,MAAM,OACJzG,EADI,OACIhB,EADJ,YACY2S,EADZ,YACyBC,GAC3BnL,EAEJ,IAAIxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC9B,MAAMb,GAAOC,EAAAA,EAAAA,IAAWL,EAAQC,GAChC,IAAKC,IAASE,EACZ,OAGF,IAAI+R,EAAAA,EAAAA,IAAiBjS,GAAO,CAE1B,GADAA,QAAagG,EAAYhG,IACpBA,EACH,OAGF4G,EAAQ0C,SAAS,CAAEtI,GAAIhB,EAAKgB,WAGxBqB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC/BrC,KAAAA,EAAME,KAAAA,EAAMwS,YAAAA,EAAaC,YAAAA,IAG3B,MAAMR,QAAwB9P,EAAAA,EAAAA,IAAQ,gBAAiBrC,GACvD,GAAKmS,MAAAA,IAAAA,EAAiBnN,SACpB,OAGF,MAAM,aAAE4N,GAAiBT,EAAgBnN,SACnC6N,GAAevO,OAAOC,KAAKmO,GAAa3P,OAE9CjD,GAASqC,EAAAA,EAAAA,OAET2C,EAAAA,EAAAA,KAAUU,EAAAA,EAAAA,IAAW1F,EAAQiB,EAAQ,CACnCiE,SAAU,IACLmN,EAAgBnN,YACf4N,GAAgBC,GAAe,CACjCD,aAAcA,EAAaxI,QAAQqI,GAAMA,EAAE1S,SAAWA,QAEpD6S,IAAiBC,GAAe,CAClCD,aAAcA,EAAazI,KAAKsI,GAC9BA,EAAE1S,SAAWA,EACT,IAAK0S,EAAGC,YAAAA,EAAaC,YAAAA,GACrBF,aAOdlL,EAAAA,EAAAA,IAAiB,cAAc1F,MAAO/B,EAAQ8G,EAASY,KACrD,MAAM,OACJzG,EADI,MACII,EADJ,MACW4J,EADX,MACkBC,GACpBxD,EAEExH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,KAIL8E,EAAAA,EAAAA,KAAUgO,EAAAA,EAAAA,KAAyB3Q,EAAAA,EAAAA,MAAa4Q,EAAAA,GAAAA,mBAE1CC,QAAQC,IAAI,CAChBjT,EAAKmB,QAAUA,GACXkB,EAAAA,EAAAA,IAAQ,kBAAmBrC,EAAMmB,QACjCb,EACJN,EAAKgF,UAAYhF,EAAKgF,SAAS+F,QAAUA,GACrC1I,EAAAA,EAAAA,IAAQ,kBAAmBrC,EAAM+K,QACjCzK,EACJ0K,GACI3I,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtB,OAAAA,EAAQ8E,WAAY7F,EAAK6F,WAAYmF,MAAAA,SAChE1K,KAGNwE,EAAAA,EAAAA,KAAUgO,EAAAA,EAAAA,KAAyB3Q,EAAAA,EAAAA,MAAa4Q,EAAAA,GAAAA,gBAGlDxL,EAAAA,EAAAA,IAAiB,oBAAoB,CAACzH,EAAQ8G,EAASY,KACrD,MAAM,OAAEzG,EAAF,UAAUiR,GAAcxK,EACxBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAE3Bf,IAIAqC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAErC,KAAAA,EAAMgS,UAAAA,QAG3CzK,EAAAA,EAAAA,IAAiB,2BAA2B1F,MAAAA,IAC1C,MAAMqR,QAAe7Q,EAAAA,EAAAA,IAAQ,4BAC7B,IAAK6Q,EACH,OAGF,MAAMC,EAAYD,EAAOE,QAAO,CAAChR,EAAQmJ,KACnCA,IACFnJ,EAAOmJ,EAAMvK,IAAMuK,GAGdnJ,IACN,IAEHtC,GAASqC,EAAAA,EAAAA,MACTrC,GAASuT,EAAAA,EAAAA,IAASvT,EAAQqT,IAC1BrO,EAAAA,EAAAA,IAAU,IACLhF,EACHiE,MAAO,IACFjE,EAAOiE,MACVuP,iBAAkBhP,OAAOC,KAAK4O,UAKpC5L,EAAAA,EAAAA,IAAiB,uBAAuB1F,MAAO/B,EAAQ8G,EAASY,KAC9D,MAAM,UAAEwE,EAAF,OAAajL,GAAWyG,EAExB+L,GAAU7K,EAAAA,EAAAA,IAAW5I,EAAQkM,GACnC,IAAIhM,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC9B,IAAKwS,IAAYvT,EACf,OAGF,IAAIiS,EAAAA,EAAAA,IAAiBjS,GAAO,CAG1B,GAFAA,QAAagG,EAAYhG,IAEpBA,EACH,OAGF4G,EAAQ0C,SAAS,CAAEtI,GAAIhB,EAAKgB,KAG9B,IAAI,SAAEgE,GAAahF,EACnB,IAAKgF,EAAU,CACb,MAAMwO,QAAiBnR,EAAAA,EAAAA,IAAQ,gBAAiBrC,GAChD,IAAKwT,EACH,OAGFxO,EAAWwO,EAASxO,SAGlBA,EAAUyO,0BACNpR,EAAAA,EAAAA,IAAQ,yBAA0B,CAAErC,KAAAA,EAAMgS,WAAW,KAGxD3P,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEkR,QAAAA,EAASvT,KAAAA,QAGhDuH,EAAAA,EAAAA,IAAiB,yBAAyB1F,MAAO/B,EAAQ8G,EAASY,KAAY,MAC5E,MAAM,UAAEwE,GAAcxE,EAEhB+L,GAAU7K,EAAAA,EAAAA,IAAW5I,EAAQkM,GACnC,IAAKuH,EACH,OAGF,IAAIvT,EACJ,UAAIuT,EAAQvO,gBAAZ,OAAI,EAAkBqE,eACpBrJ,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQyT,EAAQvO,SAASqE,qBAGvChH,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEkR,QAAAA,IAClCvT,GACF+E,EAAa/E,OAIjBuH,EAAAA,EAAAA,IAAiB,uBAAuB,CAACzH,EAAQ8G,EAASY,KAKxD,KAFkBA,EAAU,GAFTkF,EAAAA,EAAAA,GAAmB5M,EAAQ,kBAW9C,MAAO,IACFA,EACH4N,YAAa,IACR5N,EAAO4N,YACVgG,iBAAkBlM,IAVpBZ,EAAQV,sBAAsB,CAC5B5D,MAAO,sBAcbiF,EAAAA,EAAAA,IAAiB,yBAA0BzH,IAClC,IACFA,EACH6T,sBAAkBrT,OAItBiH,EAAAA,EAAAA,IAAiB,mBAAmB1F,MAAAA,IAAkB,QACpD,MAAM,OAAEd,IAAWiH,EAAAA,EAAAA,IAAyBlI,IAAW,GACjDE,EAAOe,GAAS2H,EAAAA,EAAAA,IAAW5I,EAAQiB,QAAUT,EACnD,IAAKN,IAAQiS,EAAAA,EAAAA,IAAiBjS,GAC5B,OAGF,MAAM4T,GAAS,UAAC5T,EAAKgF,gBAAN,iBAAC,EAAeoN,eAAhB,aAAC,EAAwBrP,cAAWzC,EAC7C8B,QAAeC,EAAAA,EAAAA,IAAQ,eAAgBrC,EAAKgB,GAAIhB,EAAK6F,WAAa,SAAU+N,GAClF,IAAKxR,EACH,OAGF,MAAM,QAAEgQ,EAAF,MAAW9O,EAAX,iBAAkBO,GAAqBzB,EACxCgQ,GAAYA,EAAQrP,SAIzBjD,GAASqC,EAAAA,EAAAA,MACTrC,GAASmE,EAAAA,EAAAA,IAASnE,GAAQ4D,EAAAA,EAAAA,IAAqBJ,EAAO,OACtDxD,GAASoE,EAAAA,EAAAA,IAAgBpE,EAAQ+D,GACjC/D,GAAS+T,EAAAA,EAAAA,IAAe/T,EAAQE,EAAMoS,IACtCtN,EAAAA,EAAAA,IAAUhF,QAGZyH,EAAAA,EAAAA,IAAiB,kBAAkB1F,MAAO/B,EAAQ8G,EAASY,KACzD,MAAM,OAAEzG,EAAF,UAAUkK,GAAczD,EACxBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC1BuC,EAAS2H,EAAuBd,KAAKpK,IAAWI,EAAAA,EAAAA,IAAWL,EAAQC,KAASqK,OAAgBC,SAE7FrK,GAASsD,EAAMP,SAIpB6D,EAAQkN,6BAA6BC,EAAAA,GAAAA,eAC/B1R,EAAAA,EAAAA,IAAQ,iBAAkBrC,EAAMsD,GACtCsD,EAAQkN,6BAA6BC,EAAAA,GAAAA,QACrChP,EAAa/E,QAGfuH,EAAAA,EAAAA,IAAiB,oBAAoB1F,MAAO/B,EAAQ8G,EAASY,KAC3D,MAAM,OAAEzG,EAAF,OAAUhB,GAAWyH,EACrBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC1Bb,GAAOC,EAAAA,EAAAA,IAAWL,EAAQC,GAE3BC,GAASE,UAIRmC,EAAAA,EAAAA,IAAQ,mBAAoBrC,EAAME,GACxC6E,EAAa/E,QAGfuH,EAAAA,EAAAA,IAAiB,qBAAqB,CAACzH,EAAQ8G,EAASY,KACtD,MAAM,OAAEzG,EAAF,YAAUiT,GAAgBxM,EAC1BxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAE3Bf,IAIAqC,EAAAA,EAAAA,IAAQ,oBAAqB,CAAErC,KAAAA,EAAMgU,YAAAA,QAG5CzM,EAAAA,EAAAA,IAAiB,2BAA2B1F,MAAO/B,EAAQ8G,EAASY,KAClE,MAAM,OAAEzG,EAAF,iBAAUkT,GAAqBzM,EAC/BxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,UAECqC,EAAAA,EAAAA,IAAQ,0BAA2B,CACvCrC,KAAAA,EACAiU,iBAAAA,IAGGlP,EAAa/E,QAGpBuH,EAAAA,EAAAA,IAAiB,oBAAoB1F,MAAO/B,EAAQ8G,EAASY,KAC3D,MAAM,OAAEzG,GAAWyG,EACbxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAChC,IAAKf,EAAM,OAEX,MAAMkU,QAAiB7R,EAAAA,EAAAA,IAAQ,oBAAqBrC,GAC/CkU,IAELpP,EAAAA,EAAAA,KAAUU,EAAAA,EAAAA,KAAWrD,EAAAA,EAAAA,MAAanC,EAAKgB,GAAI,CAAEkT,SAAAA,SAG/C3M,EAAAA,EAAAA,IAAiB,oBAAoB1F,MAAO/B,EAAQ8G,EAASY,KAC3D,MAAM,OAAEzG,EAAF,UAAUiR,GAAcxK,EACxBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,KACAmU,EAAAA,EAAAA,IAAiBnU,KAAUoU,EAAAA,EAAAA,IAAcpU,WAExCqC,EAAAA,EAAAA,IAAQ,mBAAoBrC,EAAMgS,OAG1CzK,EAAAA,EAAAA,IAAiB,qBAAqB1F,MAAO/B,EAAQ8G,EAASY,KAC5D,MAAM,OAAEzG,EAAF,UAAUiR,GAAcxK,EACxBxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAC3Bf,KACAmU,EAAAA,EAAAA,IAAiBnU,KAAUoU,EAAAA,EAAAA,IAAcpU,WAExCqC,EAAAA,EAAAA,IAAQ,oBAAqBrC,EAAMgS,O,oMC9jC3C,IAAIqC,EACAC,EAEAC,EACAC,EAAmDxB,QAAQyB,UAExD,MAAMC,EAA4B,KACvC,IAAKF,EAAuB,OAAOxB,QAAQyB,UAE3C,MAAME,EAAY,IAAIC,MAAM,wBACtBC,EAAkB,IAAID,MAAM,8BAClCC,EAAgBC,MAAO,EACvB,MAAMC,EAAa,IAAIH,MAAM,yBACvBI,EAAiB,IAAIJ,MAAM,+BAC3BK,EAAY,IAAIL,MAAM,mBACtBM,EAAe,IAAIN,MAAM,sBACzBO,EAAW,IAAIP,MAAM,kBACrBQ,EAAgB,IAAIR,MAAM,uBAChCQ,EAAcN,MAAO,EACrB,MAAMO,EAAe,IAAIT,MAAM,sBA4B/B,OA3BAS,EAAaP,MAAO,EAEpBP,EAAS,CACPe,KAAMX,EACNY,UAAWP,EACXQ,MAAOT,EACPU,WAAYZ,EACZa,SAAUN,EACVO,IAAKR,EACLS,QAASV,EACTW,KAAMZ,EACNa,QAAST,GAGXb,EAAwBxB,QAAQC,IAAI3O,OAAOyR,OAAOxB,GAAQpK,KAAK8F,IAC7DA,EAAE+F,OAAQ,EACV/F,EAAEgG,OAAS,KACJhG,EAAEiG,OAAOC,MAAK,KACnBlG,EAAEnI,QACFmI,EAAEgG,OAAS,EACXhG,EAAEmG,YAAc,EAChBnG,EAAE+F,OAAQ,SAEVG,MAAK,KACP3B,OAAwBlU,KAGnBkU,GAGT3S,eAAewU,EAAepR,GAC5B,MAAM7C,QAAeC,EAAAA,EAAAA,IAAQ,eAAgB,CAC3CiU,KAAMrR,IAGR,IAAK7C,EAAQ,OAEb,IAAItC,GAASqC,EAAAA,EAAAA,MAEb,MAAMgD,GAAoBC,EAAAA,EAAAA,IAAgBtF,EAAQmF,EAAUjE,IAc5D,OAZAlB,GAASuF,EAAAA,EAAAA,IACPvF,EACAmF,EAAUjE,IACVsE,EAAAA,EAAAA,IAAKlD,EAAO6C,UAAW,CAAC,yBACxB3E,EACA6E,MAAAA,GAAAA,EAAmBoR,cAAWjW,EAAY8B,EAAO6C,UAAUM,mBAE7DzF,GAASmE,EAAAA,EAAAA,IAASnE,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAOkB,MAAO,OAC7DxD,GAASuT,EAAAA,EAAAA,IAASvT,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAO2B,MAAO,QAE7De,EAAAA,EAAAA,IAAUhF,GAEHsC,EAAO6C,UAGhBpD,eAAe2U,EAA2BvR,EAAkCwR,GAC1E,MAAMrU,QAAeC,EAAAA,EAAAA,IAAQ,6BAA8B,CACzDiU,KAAMrR,EACN2O,OAAQ6C,IAGV,IAAKrU,EAAQ,OAEb,IAAItC,GAASqC,EAAAA,EAAAA,MAEbrC,GAASmE,EAAAA,EAAAA,IAASnE,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAOkB,MAAO,OAC7DxD,GAASuT,EAAAA,EAAAA,IAASvT,GAAQ4D,EAAAA,EAAAA,IAAqBtB,EAAO2B,MAAO,QAE7De,EAAAA,EAAAA,IAAUhF,GAyPL,SAAS4W,IACd,OAAOrC,EAGF,SAASsC,IACd,OAAOrC,EAGF,SAASsC,IAA8B,MAChC,QAAZ,EAAAvC,SAAA,SAAcvM,QACdwM,OAAehU,EACf+T,OAAe/T,GAjQjBiH,EAAAA,EAAAA,IAAiB,wBAAyBzH,IACjC,IACFA,EACH+W,oBAAqB/W,EAAO+W,wBAIhCtP,EAAAA,EAAAA,IAAiB,+BAA+B1F,MAAO/B,EAAQ8G,EAASY,KACtE,MAAM,WAAEsP,EAAF,GAAc9V,GAAOwG,EACrBvC,GAAYG,EAAAA,EAAAA,IAAgBtF,EAAQkB,GAErCiE,IAED6R,UACIT,EAAepR,SACfuR,EAA2BvR,UAG7B5C,EAAAA,EAAAA,IAAQ,mCAAoC,CAChDyU,WAAAA,EACAR,KAAMrR,SAIVsC,EAAAA,EAAAA,IAAiB,mBAAmB1F,MAAO/B,EAAQ8G,EAASY,KAC1D,MAAM,OAAEzG,GAAWyG,EAEbxH,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAChC,IAAKf,EACH,OAGF,MAAMoC,QAAeC,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C0U,KAAM/W,IAGHoC,IAELtC,GAASqC,EAAAA,EAAAA,OACT2C,EAAAA,EAAAA,KAAUO,EAAAA,EAAAA,IAAgBvF,EAAQsC,EAAOpB,GAAI,IACxCoB,EACHrB,OAAAA,KAGF6F,EAAQoQ,cAAc,CAAEhW,GAAIoB,EAAOpB,GAAI6E,WAAYzD,EAAOyD,kBAG5D0B,EAAAA,EAAAA,IAAiB,6BAA6B1F,MAAO/B,EAAQ8G,KAC3D,MAAM3B,GAAYgS,EAAAA,EAAAA,IAAsBnX,GAExC,IAAKmF,IAAcA,EAAUlE,OAC3B,OAGF,MAAMf,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQmF,EAAUlE,QAC1C,IAAKf,EACH,OAGF,MAAMkX,EAAY7M,QAAQrK,EAAKuG,UAE/B,IAAI,WAAE4Q,GAAenX,EAAKgF,SACtBkS,IACFC,QAAmB9U,EAAAA,EAAAA,IAAQ,wBAAyB,CAClDiU,KAAMrR,EACNmS,eAAe,KAIdD,KAILE,EAAAA,EAAAA,IAAoBF,GACpBvQ,EAAQS,iBAAiB,CACvBxE,QAAS,kCAIb0E,EAAAA,EAAAA,IAAiB,uBAAuB1F,MAAO/B,EAAQ8G,EAASY,KAC9D,MAAM,SAAEjB,EAAF,WAAY0K,GAAezJ,EAE3BxH,QAAasG,EAAAA,EAAAA,IAAoBC,GAEvC,IAAKvG,EAEH,YADA4G,EAAQS,iBAAiB,CAAExE,QAASyE,EAAAA,GAA4B,qBAIlE,MAAMgQ,QAAavS,EAAAA,EAAAA,IAAa/E,GAE5BsX,MAAAA,GAAAA,EAAMrS,WACR2B,EAAQoQ,cAAc,CAAEhW,GAAIsW,EAAKrS,UAAUjE,GAAI6E,WAAYyR,EAAKrS,UAAUY,WAAYoL,WAAAA,QAI1F1J,EAAAA,EAAAA,IAAiB,iBAAiB1F,MAAO/B,EAAQ8G,EAASY,KAAY,MACpE,IAAK+P,EAAAA,GAAqB,OAE1B,GAAIzX,EAAO0X,UAET,YADA5Q,EAAQ6Q,uBAIV,MAAM,OACJ1W,EADI,GACIC,EADJ,WACQ6E,EADR,WACoBoL,GACtBzJ,GAoIN,WACE,MAAMkQ,EAXE,IAAKC,OAAOC,cAAiBD,OAAeE,oBAYpDxD,EAAe,IAAIO,MACnBN,EAAeoD,EACfrD,EAAayD,UAXEJ,CAAAA,IACf,MAAMK,EAAaL,EAAIM,mBACjBC,EAAMF,EAAWnC,QAAQ8B,EAAIQ,gCAEnC,OADAH,EAAWxG,QACJ,IAAI4G,YAAY,CAAC7T,OAAO8T,OAAQH,EAAYI,OAAOC,iBAAiB,GAAI,CAAEC,SAAS,OAOjEC,CAAQd,IACjCe,EAAAA,EAAAA,GAASpE,GAvITqE,SAEMhE,IACN,MAAQiE,YAAY,kBAAEC,IAAwB9Y,EAC9C,IAAImF,EAAYjE,GAAKoE,EAAAA,EAAAA,IAAgBtF,EAAQkB,IAAM6X,EAAAA,EAAAA,IAAoB/Y,EAAQiB,IAElE,QAAT,EAAAkE,SAAA,eAAWjE,MAAO4X,EAKlBA,EACFhS,EAAQkS,eAAe,CACrBC,OAAQvR,IAKRvC,GAAa2T,IAAsB3T,EAAUjE,GAC/C4F,EAAQ6Q,wBAILxS,GAAejE,GAAO6E,IACzBZ,QAAkBoR,EAAe,CAC/BrV,GAAAA,EACA6E,WAAAA,KAICZ,IAELnF,GAASqC,EAAAA,EAAAA,MACTrC,GAASuF,EAAAA,EAAAA,IACPvF,EACAmF,EAAUjE,GACV,IACKiE,EACHgM,WAAAA,QAEF3Q,EACA2E,EAAUM,kBAAoB,GAEhCzF,EAAS,IACJA,EACH6Y,WAAY,IACP7Y,EAAO6Y,WACVC,kBAAmB3T,EAAUjE,IAE/B6V,oBAAoB,IAEtB/R,EAAAA,EAAAA,IAAUhF,KA5CR8G,EAAQ6Q,2BA+CZlQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACzH,EAAQ8G,EAASY,KACvD,MAAM,MAAEwR,GAAUxR,EAElB,IAAK+M,EAAOyE,GACV,OAGF,MAAMC,EAAS,KACC,eAAVD,GACFzE,EAAOkB,WAAW3N,QAEN,aAAVkR,GACFzE,EAAOmB,SAAS5N,QAEJ,YAAVkR,GACFzE,EAAOuB,QAAQhO,SAEjB2Q,EAAAA,EAAAA,GAASlE,EAAOyE,KAGdxE,EACFA,EAAsB2B,KAAK8C,GAE3BA,QAIJ1R,EAAAA,EAAAA,IAAiB,iCAAkCzH,IACjD,MAAMmF,GAAYgS,EAAAA,EAAAA,IAAsBnX,GACnCmF,GAIAuR,EAA2BvR,EAAWA,EAAUwR,gBAGvDlP,EAAAA,EAAAA,IAAiB,eAAe1F,MAAO/B,EAAQ8G,EAASY,KACtD,MAAM,OAAEzH,EAAF,QAAUmZ,GAAY1R,EAExB1H,EAAO0X,UACT5Q,EAAQ6Q,wBAIGtX,EAAAA,EAAAA,IAAWL,EAAQC,WAM1B2U,KAEN5P,EAAAA,EAAAA,IAAU,KACL3C,EAAAA,EAAAA,MACHqV,UAAW,CACTxW,GAAI,GACJmY,MAAO,aACPC,cAAerZ,EACfmZ,QAAAA,EACAG,QAASvZ,EAAOuD,eAElBwT,oBAAoB,S,6GCnUjB,SAASxR,EACdvF,EACAwZ,EACAC,EACAC,EACAC,GACa,MACb,MAKMC,EALapV,OAAOyR,OAAO,IAC/B,UAAGjW,EAAO6Y,WAAWpV,KAAK+V,UAA1B,aAAG,EAAqCI,gBACrCH,EAAgBG,eAEOtP,QAAQ6F,IAAOA,EAAE0J,SACfvG,QAAO,CAACwG,EAA2CC,KAC/ED,EAAIC,EAAG7Y,IAAM6Y,EACND,IACN,IAEH,MAAO,IACF9Z,EACH6Y,WAAY,IACP7Y,EAAO6Y,WACVpV,KAAM,IACDzD,EAAO6Y,WAAWpV,KACrB,CAAC+V,GAAc,IACVxZ,EAAO6Y,WAAWpV,KAAK+V,OACvBhU,EAAAA,EAAAA,IAAKiU,EAAiB,CAAC,yBACtBC,GAAyB,CAC3BjU,kBAAmBzF,EAAO6Y,WAAWpV,KAAK+V,GAAa/T,kBAAoBiU,WAE/ClZ,IAA1BmZ,GAAuC,CACzClU,kBAAmBkU,GAErBC,aAAAA,MAOH,SAASI,EACdha,EACAwZ,GAEA,MAAMrU,GAAYG,EAAAA,EAAAA,IAAgBtF,EAAQwZ,GAC1C,GAAIrU,GAAaA,EAAUlE,OAAQ,CACjC,MAAMf,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQmF,EAAUlE,QACtCf,IACFF,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQmF,EAAUlE,OAAQ,CAC5CiE,SAAU,IACLhF,EAAKgF,SACRsU,iBAAahZ,MAMrB,MAAO,IACFR,EACH6Y,WAAY,IACP7Y,EAAO6Y,WACVpV,KAAM,KACD+B,EAAAA,EAAAA,IAAKxF,EAAO6Y,WAAWpV,KAAM,CAAC+V,EAAYpN,gBAM9C,SAAS6N,EACdja,EACAyZ,EACAE,GAEA,OAAK3Z,EAAO6Y,WAAWC,kBAIhBvT,EAAgBvF,EACrBA,EAAO6Y,WAAWC,kBAClBW,OACAjZ,EACAmZ,GAPO3Z,EAUJ,SAASka,EACdla,EACAwZ,EACAvZ,EACAka,GAEA,IADAC,EACA,wDACA,MAAMjV,GAAYG,EAAAA,EAAAA,IAAgBtF,EAAQwZ,GAC1C,OAAKrU,EAIEI,EAAgBvF,EAAQwZ,EAAa,CAC1CI,aAAc,IACTzU,EAAUyU,aACb,CAAC3Z,GAAS,IACLkF,EAAUyU,aAAa3Z,MACvBka,KAGNA,EAAkBN,OAChBO,EAAgB,GAAK,EACrBjV,EAAUyU,aAAa3Z,IAAWma,EAAgB,EAAI,GAblDpa,I,oHC/FJ,SAAS+Y,EAAoB/Y,EAAqBiB,GACvD,MAAMf,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAChC,GAAKf,GAASA,EAAKgF,UAAahF,EAAKgF,SAASsU,YAE9C,OAAOlU,EAAgBtF,EAAQE,EAAKgF,SAASsU,aAGxC,SAASlU,EAAgBtF,EAAqBwZ,GACnD,OAAOxZ,EAAO6Y,WAAWpV,KAAK+V,GAGzB,SAASa,EAA2Bra,EAAqBwZ,EAAqBF,GAAuB,MAC1G,iBAAOhU,EAAgBtF,EAAQwZ,UAA/B,aAAO,EAAsCI,aAAaN,GAGrD,SAASgB,EAA+Bta,GAA8B,QAC3E,MAAMiB,EAAM,UAAGkW,EAAsBnX,UAAzB,aAAG,EAA+BiB,OAE9C,IAAKA,EAAQ,OAAO,EAEpB,MAAMf,GAAO0I,EAAAA,EAAAA,IAAW5I,EAAQiB,GAChC,QAAKf,KAEGiS,EAAAA,EAAAA,IAAiBjS,IAASA,EAAKqa,WAAchQ,QAAO,UAACrK,EAAK0S,mBAAN,aAAC,EAAkB4H,aAG1E,SAASrD,EAAsBnX,GACpC,MAAQ6Y,YAAY,kBAAEC,IAAwB9Y,EAC9C,GAAK8Y,EAIL,OAAOxT,EAAgBtF,EAAQ8Y,GAG1B,SAAS2B,EAAoBza,GAClC,MAAM,UAAE0X,EAAF,cAAanU,GAAkBvD,EACrC,IAAK0X,IAAcA,EAAU4B,gBAAkB5B,EAAU6B,QACvD,OAGF,MAAMrY,EAAKwW,EAAU6B,UAAYhW,EAAgBmU,EAAU4B,cAAgB5B,EAAU6B,QACrF,OAAOlZ,EAAAA,EAAAA,IAAWL,EAAQkB,K,2DCzCrB,MAAMwO,EAAmBH,IAC9B,MAAM,SACJmL,EADI,aACMnK,EADN,SACoBN,EADpB,SAC8B0K,GAChC,IAAI/K,IAAIL,GAEZ,GAAiB,QAAbmL,EAAoB,OAExB,MAAM,iBACJ9J,EADI,mBAEJY,EAFI,sBAGJd,EAHI,wBAIJG,EAJI,aAKJnH,EALI,oBAMJwH,EANI,YAOJI,IACE1Q,EAAAA,EAAAA,MAGEga,GAAUC,EAAAA,GAAYF,EAAW1K,GAAUX,QAAQ,QAAS,IAC5De,EAAiC,GAKvC,OAJAE,EAAa5L,SAAQ,CAACmW,EAAOC,KAC3B1K,EAAO0K,GAAOD,KAGRF,GACN,IAAK,UAAW,CACd,MAAM,OACJI,EADI,MACIC,EADJ,KACWC,EADX,QACiBjK,EADjB,UAC0BG,EAD1B,WACqCC,EADrC,MACiDI,EADjD,YACwDhB,EADxD,OACqE1J,GACvEsJ,EAEErJ,KAAcqJ,EAAOG,eAAe,gBAAmBC,IAAqBA,EAEnE,qBAAXuK,IACE3K,EAAOG,eAAe,cAAgBH,EAAOG,eAAe,cAC9DU,EAAoB,CAClBzK,SAAUuU,EACV7J,WAAYC,GAAaC,IAElB4J,EACTvK,EAAsB,CAAEuK,MAAAA,EAAOjU,YAAAA,EAAaD,OAAAA,IAE5CyK,EAAmB,CACjB/K,SAAUuU,EACVvR,UAAWsH,OAAOmK,GAClBlK,UAAWD,OAAOE,GAClB3J,WAAYmK,EACZzK,YAAAA,EACAD,OAAAA,KAIN,MAEF,IAAK,cAAe,CAClB,MAAM,KACJmU,EADI,QACEzH,GACJpD,EAEJ3G,EAAa,CACXzI,OAAS,IAAGwS,IACZvS,GAAIga,IAEN,MAEF,IAAK,KAoBL,IAAK,QACL,IAAK,MAIL,IAAK,QAUL,QAGE,MAhCF,IAAK,OAAQ,CACX,MAAM,OAAEC,GAAW9K,EAEnBO,EAAiB,CAAE5B,KAAMmM,IACzB,MAEF,IAAK,cAAe,CAClB,MAAM,IAAEC,GAAQ/K,EAEhBQ,EAAwB,CACtB7K,oBAAqBoV,IAEvB,MAYF,IAAK,UAAW,CACd,MAAM,KAAE7J,GAASlB,EACjBiB,EAAY,CAAEC,KAAAA,IACd","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts","webpack://telegram-t/./src/global/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatFolder, ApiError, ApiUser,} from '../../../api/types';\nimport {ApiChatType, MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {GlobalActions} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addUsers,\n  addUserStatuses,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat, updateChatDialogs,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport AccountController from \"../../../lib/client/AccountController\";\nimport MsgConn from \"../../../lib/client/MsgConn\";\nimport {ERR, GroupType} from \"../../../lib/protobuf/PTPCommon\";\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('onNotifyUpdate', async (global, actions,payload) => {\n  setGlobal({\n    ...global,\n    notifyUpdater:{\n      ...global.notifyUpdater,\n      ...payload\n    }\n  })\n  //await AccountController.addAccount()\n  //await callApi('switchAccount',AccountController.getCurrentAccountId());\n});\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat?.lastMessage!.date, shouldReplace);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    actions.openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    actions.focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1 === 'invoice') {\n    actions.openInvoice({\n      slug: part2,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (chat && chat.username === username && !startAttach && !startParam) {\n      actions.focusMessage({ chatId: chat.id, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembers } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(adminMembers && isDismissed && {\n        adminMembers: adminMembers.filter((m) => m.userId !== userId),\n      }),\n      ...(adminMembers && !isDismissed && {\n        adminMembers: adminMembers.map((m) => (\n          m.userId === userId\n            ? { ...m, adminRights, customTitle }\n            : m\n        )),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithText', (global) => {\n  return {\n    ...global,\n    openChatWithText: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const settings = await callApi('fetchChatSettings', chat);\n  if (!settings) return;\n\n  setGlobal(updateChat(getGlobal(), chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived', offsetId?: string, offsetDate?: number, shouldReplace = false,\n) {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetId: stickerSet.id,\n      stickerSetAccessHash: stickerSet.accessHash,\n      stickerSetShortName: stickerSet.shortName,\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n  const accountId = AccountController.getCurrentAccountId();\n  try {\n    const {error,group} = await MsgConn.getInstance(accountId).createGroup(\n      users.map(user=>parseInt(user.id)),\n      GroupType.GROUP_TYPE_MULTI,\n      title,\n      about,\n      \"\"\n    )\n    if(error != ERR.NO_ERROR){\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          progress: ChatCreationProgress.Error,\n        },\n      });\n      getActions().showDialog({ data: {\n          message: \"Error Create Group\",\n          isSlowMode: true,\n          hasErrorKey: false,\n        }\n      });\n    }else{\n      const account = AccountController.getInstance(accountId);\n      account.saveGroups([group!])\n      const { group_id: channelId } = group!;\n      let global = getGlobal();\n      setGlobal({\n        ...updateChatDialogs(global,accountId),\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Complete,\n        },\n      })\n      getActions().openChat({ id: channelId.toString(), shouldReplaceHistory: true });\n    }\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const chat = await callApi('getChatByPhoneNumber', phoneNumber);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const chat = await fetchChatByUsername(username);\n\n    if (!chat) return;\n    const global = getGlobal();\n    const user = selectUser(global, chat.id);\n\n    if (!user) return;\n    const isBot = isUserBot(user);\n    if (!isBot || !user.isAttachMenuBot) {\n      actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n      return;\n    }\n\n    const currentChat = selectCurrentChat(global);\n\n    if (!currentChat) return;\n\n    actions.callAttachMenuBot({\n      botId: user.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n    return;\n  }\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachMenuBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachMenuBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport type { CallSound } from '../../types';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  let { inviteLink } = chat.fullInfo!;\n  if (canInvite) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type { GlobalState } from '../types';\nimport { selectChat } from './chats';\nimport { isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser(global: GlobalState) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n","import { getActions } from '../global';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url' | 'invoice';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openChatByPhoneNumber,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n    openInvoice,\n  } = getActions();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, phone, post, comment, voicechat, livestream, start, startattach, attach,\n      } = params;\n\n      const startAttach = params.hasOwnProperty('startattach') && !startattach ? true : startattach;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else if (phone) {\n          openChatByPhoneNumber({ phone, startAttach, attach });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n            startParam: start,\n            startAttach,\n            attach,\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: `-${channel}`,\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n\n    case 'invoice': {\n      const { slug } = params;\n      openInvoice({ slug });\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","isOpen","onClose","deleteChatMember","getActions","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","getGlobal","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","lastLocalServiceMessage","selectLastServiceNotification","message","chatIds","length","shift","currentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","chats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","setGlobal","loadFullChat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","stickerSet","loadStickers","stickerSetId","stickerSetAccessHash","accessHash","stickerSetShortName","shortName","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","isAttachMenuBot","callAttachMenuBot","botId","startParam","showNotification","langProvider","addActionHandler","payload","notifyUpdater","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","selectChat","hasUnreadMark","toggleChatUnread","lastMessage","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","type","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","force","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isMuted","about","photo","memberIds","chatCreation","progress","ChatCreationProgress","accountId","AccountController","group","MsgConn","createGroup","parseInt","GroupType","ERR","isSlowMode","saveGroups","group_id","channelId","updateChatDialogs","toString","createChannel","joinChannel","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","deleteChatFolder","unreadCount","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","openChatByPhoneNumber","substr","openChatByInvite","openStickerSetShortName","chatOrChannelPostId","Number","commentId","comment","joinVoiceChatByLink","inviteHash","voicechat","livestream","openInvoice","slug","openChatByUsername","start","channelPostId","isUserBot","startBot","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","openChatWithText","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","values","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","sound","doPlay","isVideo","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectPhoneCallUser","protocol","hostname","method","IS_SAFARI","value","key","domain","phone","post","invite","set"],"sourceRoot":""}